---
const {
  title = "Fernie Real Estate",
  seo_title = title,
  seo_description = "",
  summary = "",
  showHeader = true,
  class: bodyClass = "",
  heroPreload = null as null | {
    href: string;
    imagesrcset?: string;
    imagesizes?: string;
    as?: "image";
    type?: string;
    crossorigin?: "" | "anonymous" | "use-credentials";
  }
} = Astro.props;

import { getJson } from "../lib/fetchJson";

/* ---------- helpers ---------- */
const RESERVED = new Set(["index","page","pages","all","view","list"]);
const getField = (r:any, k:string) =>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();
const visible = (r:any) => {
  const s = getField(r, "status").toLowerCase();
  const rawSlug = getField(r, "slug").toLowerCase();
  return s !== "hidden" && s !== "inactive" && rawSlug !== "index" && !RESERVED.has(rawSlug);
};
type MenuItem = { title:string; slug:string; sort:number };

async function fetchMenuSafe(url?: string): Promise<MenuItem[]> {
  if (!url) return [];
  try { new URL(url, "http://x"); } catch { return []; }

  try {
    const raw = await getJson<any>(url);
    const rows:any[] =
      Array.isArray(raw) ? raw :
      Array.isArray(raw?.data) ? raw.data :
      Array.isArray(raw?.rows) ? raw.rows : [];

    const out: MenuItem[] = [];
    for (const r of rows) {
      if (!visible(r)) continue;
      const title = getField(r, "title");
      const slug = getField(r, "slug");
      if (!title || !slug) continue;
      const sort = Number.isFinite(+r?.sort) ? +r.sort : Number.MAX_SAFE_INTEGER;
      out.push({ title, slug, sort });
    }
    out.sort((a,b) => (a.sort - b.sort) || a.title.localeCompare(b.title));
    return out;
  } catch (e) {
    console.warn("[fetchMenuSafe] using empty menu for", url, e);
    return [];
  }
}

/* ---------- build menus (safe) ---------- */
const neighbourhoods:MenuItem[] = await fetchMenuSafe(import.meta.env.PUBLIC_SHEET_JSON);
const typesMenu:MenuItem[]      = await fetchMenuSafe(import.meta.env.PUBLIC_TYPES_JSON);
const xtraMenu:MenuItem[]       = await fetchMenuSafe(import.meta.env.PUBLIC_XTRAAREA_JSON);
await fetchMenuSafe(import.meta.env.PUBLIC_TODO_JSON);

/* ---------- misc ---------- */
const metaDescription = (seo_description || summary || "").toString().trim();

/* ---------- nav order ---------- */
const NAV_ORDER = [
  "neighbourhoods",
  "types",
  "xtra",
  "todo",
  "stay",
  "search",
  "contact",
] as const;

// RV script URL (allows override via env)
const RV_URL = import.meta.env.PUBLIC_RV_SCRIPT || "https://cdn.realtyvis.com/js/embed.js";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{seo_title}</title>
    {metaDescription && <meta name="description" content={metaDescription} />}

    <!-- 🚀 RealtyVis performance hints (global) -->
    <link rel="dns-prefetch" href="https://cdn.realtyvis.com">
    <link rel="preconnect" href="https://cdn.realtyvis.com" crossorigin>
    <link rel="dns-prefetch" href="https://api.realtyvis.com">
    <link rel="preconnect" href="https://api.realtyvis.com" crossorigin>
    <!-- Preload the script at low importance (does not block) -->
    <link rel="preload" as="script" href={RV_URL} importance="low">

    <!-- ✅ Optional hero responsive preload -->
    {heroPreload && (
      <link
        rel="preload"
        as={heroPreload.as || "image"}
        href={heroPreload.href}
        { ...(heroPreload.imagesrcset ? { imagesrcset: heroPreload.imagesrcset } : {}) }
        { ...(heroPreload.imagesizes ? { imagesizes: heroPreload.imagesizes } : { imagesizes: "100vw" }) }
        { ...(heroPreload.type ? { type: heroPreload.type } : {}) }
        { ...(heroPreload.crossorigin ? { crossorigin: heroPreload.crossorigin } : {}) }
      />
    )}

    <slot name="head" />

    <!-- 🌟 Minimal LCP helpers -->
    <style>
      @media (max-width:900px){
        header nav{ display:none !important; }
        header nav.open{ display:flex !important; }
      }
    </style>
    <style>
      :root { --container-max: 1200px; --container-pad: 12px; }
      .below-fold > * { content-visibility: auto; contain-intrinsic-size: 1000px; }
      .hb { position: relative; overflow: clip; }
      .hb__img { width: 100%; height: 100%; object-fit: cover; display: block; }
      .hb__overlay { position: absolute; inset: 0; pointer-events: none; }
      .hb__inner { position: absolute; inset-inline: 0; inset-block-end: 0; padding: clamp(16px, 5vw, 32px); }
      .hb__text { width: min(var(--container-max), 100% - 2*var(--container-pad)); margin-inline: auto; color: #fff; }
      .hb__title { margin: 0; font-size: clamp(28px, 6vw, 52px); line-height: 1.05; letter-spacing: -0.02em; text-wrap: balance; }
      .hb__lead { margin-top: .6rem; font-size: clamp(16px, 2.6vw, 20px); opacity: .95; max-width: 68ch; }
    </style>

    <style is:global>
      :root {
        --header-h: 52px;
        --bg:#47414e10; --ink:#271f11; --ink-muted:#1f2937; --hover-bg:rgba(243,244,246,.9);
        --hero-h: 55vh;
        --hero-min: 240px;
        --container-pad: 12px;
        --container-max: 1200px;
        --bleed-fix: 2px;
        --card-text-lines: 3;
        --card-text-lh: 1.35;
      }
      *,*::before,*::after { box-sizing:border-box; }
      html,body { height:100%; overflow-x:clip; margin:0; }
      body { font-family: system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif; background: var(--bg); color: var(--ink); }
      .container { max-width: var(--container-max); margin-inline: auto; padding-inline: var(--container-pad); }
      .card .body p { display: -webkit-box !important; -webkit-box-orient: vertical; -webkit-line-clamp: var(--card-text-lines); overflow: hidden !important; text-overflow: ellipsis; white-space: normal; word-break: break-word; line-height: var(--card-text-lh); }
      @supports not (-webkit-hyphens: none) {
        .card .body p { display: block !important; max-height: calc(1em * var(--card-text-lh) * var(--card-text-lines)); overflow: hidden !important; }
      }
      header { position: fixed; top: 0; left: 0; right: 0; height: var(--header-h); background: rgba(255,255,255,.84); backdrop-filter: blur(10px); border-bottom: 1px solid #e5e7eb; z-index: 1000; }
      .nav-inner { width: 100%; height: 100%; display: flex; align-items: center; justify-content: space-between; padding: 0 max(16px, env(safe-area-inset-right)) 0 max(16px, env(safe-area-inset-left)); gap: 10px; }
      .brand { font-weight: 700; font-size: 1rem; color: var(--ink); text-decoration: none; padding: 4px 6px; border-radius: 6px; white-space: nowrap; }
      .brand:hover { background: var(--hover-bg); }
      nav { display: flex; align-items: center; gap: 15px; justify-content: flex-end; flex: 1 1 auto; }
      nav a { color: var(--ink-muted); padding: 6px 8px; text-decoration: none; border-radius: 8px; font-weight: 500; }
      nav a:hover, nav a:focus-visible { color: var(--ink); background: var(--hover-bg); }
      .hamburger { display: none; background: none; border: none; font-size: 1.5rem; cursor: pointer; color: var(--ink-muted); }
      @media (max-width:900px){
        header nav { position: absolute; top: var(--header-h); right: 0; background: #fff; flex-direction: column; gap: 0; padding: 8px 12px; box-shadow: 0 2px 8px rgba(0,0,0,.1); width: auto; max-width: 92vw; min-width: 220px; }
        header nav a { display: block; width: 100%; padding: 10px; }
        .hamburger { display: block; margin-left: auto; }
      }
      footer.site-footer { width: 100%; background: rgba(255,255,255,0.9); backdrop-filter: blur(6px); border-top: 1px solid #e5e7eb; padding: 1rem 0; margin-top: 3rem; text-align: center; font-size: .875rem; color: #4b5563; }
      .listing-buttons { display: flex; flex-wrap: wrap; gap: 0.5rem; margin-top: 1rem; justify-content: flex-start; }
      .btn-link { display: inline-flex; align-items: center; justify-content: center; padding: 0.5rem 1rem; border: 1px solid var(--color-border, #ccc); background: var(--color-bg, #fff); border-radius: 6px; font-size: 0.95rem; text-decoration: none; color: var(--color-text, #333); transition: background 0.2s, border-color 0.2s; }
      .btn-link:hover { background: var(--color-bg-hover, #f5f5f5); border-color: var(--color-border-hover, #999); }
    </style>

    <!-- 🧠 Idle-load RealtyVis once (global cache) -->
    <script is:inline>
      (function(){
        var RV_URL = {RV_URL: JSON.stringify(RV_URL)}.RV_URL;
        if (window.__rvScriptLoading || window.__rvScriptLoaded) return;
        window.__rvScriptLoading = true;

        function load(){
          var s = document.createElement("script");
          s.src = RV_URL; s.async = true; s.defer = true;
          s.onload = function(){ window.__rvScriptLoaded = true; try{ window.RealtyVis?.scan?.(); }catch(e){} };
          s.onerror = function(){ window.__rvScriptLoading = false; };
          document.head.appendChild(s);
        }

        if ("requestIdleCallback" in window) {
          requestIdleCallback(load, { timeout: 2000 });
        } else {
          setTimeout(load, 1000);
        }
      })();
    </script>

    <!-- 🏃 Prefetch /search on intent (hover / touch) -->
    <script is:inline>
      (function(){
        var seen = new Set();
        function prefetch(u){
          if (seen.has(u)) return;
          seen.add(u);
          var l = document.createElement("link");
          l.rel = "prefetch"; l.as = "document"; l.href = u;
          document.head.appendChild(l);
        }
        function closestSearchLink(el){
          return el && el.closest && el.closest('a[href^="/search"]');
        }
        document.addEventListener("mouseover", function(e){
          var a = closestSearchLink(e.target);
          if (a) prefetch(a.href);
        }, {passive:true});
        document.addEventListener("touchstart", function(e){
          var a = closestSearchLink(e.target);
          if (a) prefetch(a.href);
        }, {passive:true});
      })();
    </script>

    <!-- (kept) smooth anchors -->
    <script is:inline src="/js/smooth-anchors.js"></script>
  </head>

  <body class={bodyClass}>
    <a class="skip-link" href="#main">Skip to main content</a>

    {showHeader && (
      <header role="banner">
        <div class="nav-inner">
          <a class="brand" href="/" data-astro-prefetch>Fernie.Homes</a>
          <button class="hamburger" onclick="toggleNav()" aria-label="Open menu" aria-expanded="false">☰</button>
          <nav aria-label="Primary">
            {
              NAV_ORDER.map((key) => {
                switch (key) {
                  case "neighbourhoods": return <a href="/neighbourhoods" data-astro-prefetch="hover">Neighbourhoods</a>;
                  case "types": return <a href="/types" data-astro-prefetch="hover">Property Types</a>;
                  case "xtra": return <a href="/xtraarea" data-astro-prefetch="hover">Other Areas</a>;
                  case "todo": return <a href="/to_do" data-astro-prefetch="hover">To Do</a>;
                  case "stay": return <a href="/stay" data-astro-prefetch="hover">Stay</a>;
                  case "search": return <a href="/search" data-astro-prefetch="hover">Search</a>;
                  case "contact": return <a href="/contact" data-astro-prefetch>Contact</a>;
                }
              })
            }
          </nav>
        </div>
      </header>
    )}

    <main id="main" role="main">
      <slot name="hero" />
      <div class="below-fold">
        <slot />
      </div>
    </main>

    <footer class="site-footer" role="contentinfo">
      <div class="container">
        <p>&copy; {new Date().getFullYear()} Fernie Real Estate. All rights reserved.</p>
        <div class="footer-links">
          <a href="/privacy" data-astro-prefetch>Privacy Policy</a>
          <a href="/terms" data-astro-prefetch>Terms of Use</a>
          <a href="/contact" data-astro-prefetch>Contact</a>
        </div>
      </div>
    </footer>

    <script is:inline>
      function toggleNav(){
        const nav=document.querySelector("header nav");
        const btn=document.querySelector(".hamburger");
        if(!nav||!btn)return;
        const isOpen=nav.classList.toggle("open");
        btn.setAttribute("aria-expanded",String(isOpen));
      }
      window.toggleNav=toggleNav;
      document.addEventListener("DOMContentLoaded",()=>{ const nav=document.querySelector("header nav"); if(nav) nav.classList.remove("open"); });
    </script>

    <!-- Accessibility: ensure iframes have titles -->
    <script is:inline>
      (function () {
        const DEFAULTS = [
          { test: /google\.com\/maps|maps\.google/i, title: "Embedded Google Map" },
          { test: /realtyvis|cdn\.realtyvis/i,       title: "Embedded RealtyVis content" },
        ];
        function ensureTitle(frame) {
          if (!(frame instanceof HTMLIFrameElement)) return;
          if (frame.hasAttribute("title") && frame.getAttribute("title")?.trim()) return;
          const src = frame.getAttribute("src") || "";
          const match = DEFAULTS.find((d) => d.test.test(src));
          const t = frame.getAttribute("data-title") || (match ? match.title : "Embedded content");
          frame.setAttribute("title", t);
        }
        document.querySelectorAll("iframe").forEach(ensureTitle);
        const mo = new MutationObserver((muts) => {
          for (const m of muts) {
            m.addedNodes?.forEach((n) => {
              if (n instanceof HTMLIFrameElement) ensureTitle(n);
              else if (n instanceof HTMLElement) n.querySelectorAll?.("iframe").forEach(ensureTitle);
            });
          }
        });
        mo.observe(document.documentElement, { subtree: true, childList: true });
        window.addEventListener("load", () => document.querySelectorAll("iframe").forEach(ensureTitle));
      })();
    </script>
  </body>
</html>
