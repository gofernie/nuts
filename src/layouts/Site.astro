---
// File: src/layouts/Site.astro
const {
  title = "Fernie Real Estate",
  seo_title = title,
  seo_description = "",
  summary = "",
  showHeader = true,
  class: bodyClass = ""
} = Astro.props;

import { getJson } from "../lib/fetchJson";

/* ---------- helpers ---------- */
const RESERVED = new Set(["index","page","pages","all","view","list"]);
const getField = (r:any, k:string) =>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();
const visible = (r:any) => {
  const s = getField(r, "status").toLowerCase();
  const rawSlug = getField(r, "slug").toLowerCase();
  return s !== "hidden" && s !== "inactive" && rawSlug !== "index" && !RESERVED.has(rawSlug);
};
type MenuItem = { title:string; slug:string; sort:number };

async function fetchMenuSafe(url?: string): Promise<MenuItem[]> {
  if (!url) return [];
  try { new URL(url, "http://x"); } catch { return []; }

  try {
    const raw = await getJson<any>(url); // returns null on failure
    const rows:any[] =
      Array.isArray(raw) ? raw :
      Array.isArray(raw?.data) ? raw.data :
      Array.isArray(raw?.rows) ? raw.rows : [];

    const out: MenuItem[] = [];
    for (const r of rows) {
      if (!visible(r)) continue;
      const title = getField(r, "title");
      const slug = getField(r, "slug");
      if (!title || !slug) continue;
      const sort = Number.isFinite(+r?.sort) ? +r.sort : Number.MAX_SAFE_INTEGER;
      out.push({ title, slug, sort });
    }
    out.sort((a,b) => (a.sort - b.sort) || a.title.localeCompare(b.title));
    return out;
  } catch (e) {
    console.warn("[fetchMenuSafe] using empty menu for", url, e);
    return [];
  }
}

/* ---------- build menus (safe) ---------- */
const neighbourhoods:MenuItem[] = await fetchMenuSafe(import.meta.env.PUBLIC_SHEET_JSON);
const typesMenu:MenuItem[]      = await fetchMenuSafe(import.meta.env.PUBLIC_TYPES_JSON);
const xtraMenu:MenuItem[]       = await fetchMenuSafe(import.meta.env.PUBLIC_XTRAAREA_JSON);
await fetchMenuSafe(import.meta.env.PUBLIC_TODO_JSON); // prefetch safe

/* ---------- misc ---------- */
const metaDescription = (seo_description || summary || "").toString().trim();

/* ---------- nav order ---------- */
const NAV_ORDER = [
  "neighbourhoods",
  "types",
  "xtra",
  "todo",
  "stay",
  "search",
  "contact",
] as const;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{seo_title}</title>
    {metaDescription && <meta name="description" content={metaDescription} />}

    <slot name="head" />

    <style>
      /* collapse to hamburger a bit earlier to avoid crowding */
      @media (max-width:900px){
        header nav{ display:none !important; }
        header nav.open{ display:flex !important; }
      }
    </style>

    <style>
      :root {
        --header-h: 52px;
        --bg:#78777c10; --ink:#271f11; --ink-muted:#1f2937; --hover-bg:rgba(243,244,246,.9);
        --hero-h:70vh; --container-pad:12px; --bleed-fix:2px;
        --container-max: 1200px;
      }
      *,*::before,*::after { box-sizing:border-box; }
      html, body { height:100%; overflow-x:clip; }
      body { margin:0; font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif; background:var(--bg); color:var(--ink); }

      /* Keyboard focus (helps Lighthouse) */
      :focus-visible { outline:3px solid #005fcc; outline-offset:2px; }

      /* Skip link */
      .skip-link {
        position:absolute; left:-9999px; top:auto; overflow:hidden; z-index:10000;
      }
      .skip-link:focus {
        left:1rem; top:1rem; background:#fff; color:#000;
        padding:.5rem .75rem; border-radius:.5rem; box-shadow:0 2px 8px rgba(0,0,0,.2);
      }

      header{
        position:fixed; top:0; left:0; right:0; height:var(--header-h); z-index:1000;
        background:rgba(255,255,255,.84); backdrop-filter:blur(10px); border-bottom:1px solid #e5e7eb;
      }
      .nav-inner{
        width:100%; height:100%;
        padding:0 max(16px, env(safe-area-inset-right)) 0 max(16px, env(safe-area-inset-left));
        display:flex; align-items:center; justify-content:space-between;
        gap:10px; flex-wrap:nowrap;
      }

      .brand{
        font-weight:700; font-size:1rem; color:var(--ink);
        text-decoration:none; padding:4px 6px; border-radius:6px;
        white-space: nowrap; flex: 0 0 auto;
      }
      .brand:hover{ background:var(--hover-bg); }

      nav{
        display:flex; align-items:center; gap:20px;
        flex: 1 1 auto; min-width: 0; justify-content:flex-end;
      }

      nav a{
        color:var(--ink-muted); padding:6px 8px; text-decoration:none; border-radius:8px; font-weight:500;
        display:inline-flex; align-items:center; gap:4px; white-space:nowrap;
      }
      nav a:hover, nav a:focus-visible{ color:var(--ink); background:var(--hover-bg); }
      .hamburger{ display:none; background:none; border:none; font-size:1.5rem; cursor:pointer; color:var(--ink-muted); }

      /* Mobile menu layout (no dropdowns) */
      @media (max-width:900px){
        header nav{
          position:absolute; top:var(--header-h); right:0; background:#fff;
          flex-direction:column; gap:0; padding:8px 12px; box-shadow:0 2px 8px rgba(0,0,0,.1);
          width:auto; max-width:92vw; min-width:220px;
        }
        header nav a{ display:block; width:100%; padding:10px; }
        .hamburger{ display:block; margin-left:auto; }
      }

      main{ margin:0; padding:0; }

      footer.site-footer{ width:100%; background:rgba(255,255,255,0.9); backdrop-filter:blur(6px);
        border-top:1px solid #e5e7eb; padding:1rem 0; margin-top:3rem; text-align:center; font-size:.875rem; color:#4b5563; }
      footer.site-footer .container{ max-width:var(--container-max); margin-inline:auto; padding-inline:var(--container-pad); }
      footer.site-footer .footer-links{ margin-top:.5rem; display:flex; justify-content:center; gap:1rem; flex-wrap:wrap; font-size:.8rem; }
      footer.site-footer .footer-links a{ color:#4b5563; text-decoration:none; }
      footer.site-footer .footer-links a:hover{ text-decoration:underline; }
    </style>

    <style is:global>
      html { scroll-behavior: smooth; }
      :target { scroll-margin-top: calc(var(--header-h) + 12px); }
      .hero-bleed{ position:relative; left:50%; right:50%; width:calc(100vw + var(--bleed-fix)*2);
        margin-left:calc(-50vw - var(--bleed-fix)); margin-right:calc(-50vw - var(--bleed-fix));
        min-height:var(--hero-h); padding-top:var(--header-h);
        background-color:#e5e7eb; border-bottom:1px solid #eee; overflow:hidden; }
      .hero-bleed>img{ position:absolute; inset:0; width:100%; height:100%; object-fit:cover; }

      .container{ max-width:var(--container-max); margin-inline:auto; padding-inline:var(--container-pad); }
    </style>

    <script is:inline>
      function toggleNav(){
        const nav=document.querySelector("header nav");
        const btn=document.querySelector(".hamburger");
        if(!nav||!btn)return;
        const isOpen=nav.classList.toggle("open");
        btn.setAttribute("aria-expanded",String(isOpen));
      }
      // @ts-ignore
      window.toggleNav=toggleNav;
      document.addEventListener("DOMContentLoaded",()=>{ const nav=document.querySelector("header nav"); if(nav) nav.classList.remove("open"); });
    </script>

    <!-- Serve from /public and load early; mark inline so Astro doesn't bundle -->
    <script is:inline src="/js/smooth-anchors.js"></script>
  </head>
  <body class={bodyClass}>
    <!-- Skip link -->
    <a class="skip-link" href="#main">Skip to main content</a>

    {showHeader && (
      <header role="banner">
        <div class="nav-inner">
          <a class="brand" href="/" data-astro-prefetch>Fernie Real Estate</a>
          <button class="hamburger" onclick="toggleNav()" aria-label="Open menu" aria-expanded="false">â˜°</button>
          <nav aria-label="Primary">
            {
              NAV_ORDER.map((key) => {
                switch (key) {
                  case "neighbourhoods":
                    return <a class="menu-link" href="/neighbourhoods" data-astro-prefetch="hover">Neighbourhoods</a>;
                  case "types":
                    return <a class="menu-link" href="/types" data-astro-prefetch="hover">Types</a>;
                  case "xtra":
                    return <a class="menu-link" href="/xtraarea" data-astro-prefetch="hover">Other Areas</a>;
                  case "todo":
                    return <a class="menu-link" href="/to_do" data-astro-prefetch="hover">To Do</a>;
                  case "stay":
                    return <a class="menu-link" href="/stay" data-astro-prefetch="hover">Stay</a>;
                  case "search":
                    return <a class="menu-link" href="/search" data-astro-prefetch="hover">Search</a>;
                  case "contact":
                    return <a class="menu-link" href="/contact" data-astro-prefetch>Contact</a>;
                }
              })
            }
          </nav>
        </div>
      </header>
    )}

    <main id="main" role="main">
      <slot />
    </main>

    <footer class="site-footer" role="contentinfo">
      <div class="container">
        <p>&copy; {new Date().getFullYear()} Fernie Real Estate. All rights reserved.</p>
        <div class="footer-links">
          <a href="/privacy" data-astro-prefetch>Privacy Policy</a>
          <a href="/terms" data-astro-prefetch>Terms of Use</a>
          <a href="/contact" data-astro-prefetch>Contact</a>
        </div>
      </div>
    </footer>

    <!-- RealtyVis loader (global, once) -->
    <script is:inline>
      if (typeof window !== "undefined" && !window.__rvLoaded) {
        const s = document.createElement("script");
        s.src = "https://cdn.realtyvis.com/js/embed.js";
        s.defer = true;
        document.body.appendChild(s);
        window.__rvLoaded = true;
      }
    </script>

    <!-- âœ… A11y fixer: give titles to map/3rd-party iframes that forget them -->
    <script is:inline>
      (function () {
        const DEFAULTS = [
          { test: /google\.com\/maps|maps\.google/i, title: "Embedded Google Map" },
          { test: /realtyvis|cdn\.realtyvis/i,       title: "Embedded RealtyVis content" },
        ];
        function ensureTitle(frame) {
          if (!(frame instanceof HTMLIFrameElement)) return;
          if (frame.hasAttribute("title") && frame.getAttribute("title")?.trim()) return;
          const src = frame.getAttribute("src") || "";
          const match = DEFAULTS.find(d => d.test.test(src));
          const t = frame.getAttribute("data-title")
            || (match ? match.title : "Embedded content");
          frame.setAttribute("title", t);
        }
        // Initial pass
        document.querySelectorAll("iframe").forEach(ensureTitle);
        // Watch for injected iframes (e.g., RealtyVis)
        const mo = new MutationObserver((muts) => {
          for (const m of muts) {
            m.addedNodes?.forEach((n) => {
              if (n instanceof HTMLIFrameElement) ensureTitle(n);
              else if (n instanceof HTMLElement) n.querySelectorAll?.("iframe").forEach(ensureTitle);
            });
          }
        });
        mo.observe(document.documentElement, { subtree: true, childList: true });
        // Also re-run after window load in case late scripts inject frames
        window.addEventListener("load", () => document.querySelectorAll("iframe").forEach(ensureTitle));
      })();
    </script>
  </body>
</html>
