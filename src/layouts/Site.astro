---
const {
  title = "Fernie Real Estate",
  seo_title = title,
  seo_description = "",
  summary = "",
  showHeader = true,
  class: bodyClass = ""
} = Astro.props;

import { getJson } from "../lib/fetchJson";

/** ---------- shared helpers (nav + pages) ---------- */
const RESERVED = new Set(["index","page","pages","all","view","list"]);
const slugify = (v:any) =>
  (v ?? "")
    .toString()
    .trim()
    .toLowerCase()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

const getField = (r:any, k:string) =>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const visible = (r:any) => {
  const s = getField(r, "status").toLowerCase();
  const cleaned = slugify(getField(r, "slug"));
  return s !== "hidden" && s !== "inactive" && cleaned !== "index" && !RESERVED.has(cleaned);
};

type MenuItem = { title:string; slug:string; sort:number };

async function fetchMenu(url?: string): Promise<MenuItem[]> {
  if (!url) return [];
  try {
    const raw = await getJson<any>(url);
    const rows: any[] =
      Array.isArray(raw) ? raw :
      Array.isArray(raw?.data) ? raw.data :
      Array.isArray(raw?.rows) ? raw.rows : [];

    const seen = new Set<string>();
    const out: MenuItem[] = [];

    for (const r of rows) {
      if (!visible(r)) continue;

      const title = getField(r, "title");
      const s = slugify(getField(r, "slug") || title);
      if (!title || !s || RESERVED.has(s) || seen.has(s)) continue;

      const sort = Number.isFinite(+r?.sort) ? +r.sort : Number.MAX_SAFE_INTEGER;
      out.push({ title, slug: s, sort });
      seen.add(s);
    }

    // Sort deterministically: numeric sort asc, then title asc
    out.sort((a,b) => (a.sort - b.sort) || a.title.localeCompare(b.title));
    return out;
  } catch (e) {
    console.warn("Menu fetch failed for", url, e);
    return [];
  }
}

/** ---------- build menus (ALL items) ---------- */
let neighbourhoods:MenuItem[] = await fetchMenu(import.meta.env.PUBLIC_SHEET_JSON);
let typesMenu:MenuItem[]      = await fetchMenu(import.meta.env.PUBLIC_TYPES_JSON);
let xtraMenu:MenuItem[]       = await fetchMenu(import.meta.env.PUBLIC_XTRAAREA_JSON);
let todoMenu:MenuItem[]       = await fetchMenu(import.meta.env.PUBLIC_TODO_JSON);

/** ---------- helpers ---------- */
// columns = ceil(count / 8), clamped to max 6 columns
const colsFor = (n:number) => Math.min(6, Math.max(1, Math.ceil(n / 8)));

const metaDescription = (seo_description || summary || "").toString().trim();
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{seo_title}</title>
    {metaDescription && <meta name="description" content={metaDescription} />}

    <style>
      @media (max-width:768px){
        header nav{ display:none !important; }
        header nav.open{ display:flex !important; }
      }
    </style>

    <slot name="head" />

    <style>
      :root {
        --header-h: 52px;
        --bg:#fafaf9; --ink:#111827; --ink-muted:#1f2937; --hover-bg:rgba(243,244,246,.9);
        --hero-h:48vh; --container-pad:12px; --bleed-fix:2px;
      }
      *,*::before,*::after { box-sizing:border-box; }
      html, body { height:100%; overflow-x:clip; }
      body { margin:0; font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif; background:var(--bg); color:var(--ink); }

      /* ---------- Full-width header ---------- */
      header{
        position:fixed; top:0; left:0; right:0; height:var(--header-h); z-index:1000;
        background:rgba(255,255,255,.84); backdrop-filter:blur(10px); border-bottom:1px solid #e5e7eb;
      }
      .nav-inner{
        width:100%;
        height:100%;
        padding:0 max(16px, env(safe-area-inset-right)) 0 max(16px, env(safe-area-inset-left));
        display:flex; align-items:center; gap:12px;
      }
      .brand{
        margin-right:auto; /* push nav to the right */
        font-weight:700; font-size:1rem; color:var(--ink);
        text-decoration:none; padding:4px 6px; border-radius:6px;
      }
      .brand:hover{ background:var(--hover-bg); }

      nav{ margin-left:auto; display:flex; align-items:center; gap:12px; }
      nav a{ color:var(--ink-muted); padding:6px 8px; text-decoration:none; border-radius:8px; font-weight:500; }
      nav a:hover, nav a:focus-visible{ color:var(--ink); background:var(--hover-bg); }
      .hamburger{ display:none; background:none; border:none; font-size:1.5rem; cursor:pointer; color:var(--ink-muted); }

      /* Desktop dropdown */
      .menu-group{ position:relative; margin:0 2px; }
      .menu-link.has-sub::after{ content:" ▾"; opacity:.8; }

      /* === Multi-column dropdown: max 8 per column, no vertical scroll === */
      .dropdown{
        position:absolute; left:0; top:calc(100% + 21px);
        background:rgba(255,255,255,0.9); backdrop-filter:blur(6px);
        border:1px solid rgba(229,231,235,.7); border-radius:10px; box-shadow:0 6px 20px rgba(0,0,0,.08);

        display:grid;
        grid-auto-flow: column;              /* fill rows top→bottom, then new column */
        grid-template-rows: repeat(8, auto); /* cap at 8 rows per column */
        grid-auto-columns: 220px;            /* column width */
        gap: 6px 12px;
        padding: 10px;

        width: max-content;
        max-width: calc(min(92vw, var(--cols, 1) * 240px)); /* soft width by computed columns */

        /* hide vertical scroll & only show horizontal scroll when multi-column */
        overflow-y: hidden !important;
        overflow-x: hidden;                  /* default: no horiz scrollbar */
        max-height: none !important;

        opacity:0; transform:translateY(-12px); pointer-events:none; visibility:visible;
        transition:transform .28s cubic-bezier(.2,.7,.2,1), opacity .22s ease-out;
        z-index:1100;
      }
      .dropdown.wide{ overflow-x:auto; }
      /* hide scrollbars when not wide */
      .dropdown:not(.wide){ scrollbar-width: none; }
      .dropdown:not(.wide)::-webkit-scrollbar{ height:0; }

      .menu-group .dropdown.align-right{ left:auto; right:0; }

      /* ▼▼ UPDATED: add smooth transition + white pop on hover ▼▼ */
      .dropdown > a{
        display:block; width:100%; padding:8px 10px; line-height:1.35;
        white-space:normal; text-decoration:none; border-radius:6px; color:var(--ink-muted);
        transition: background .15s ease, color .15s ease, box-shadow .15s ease, transform .15s ease, font-weight .15s ease;
      }
      .dropdown > a:hover{
        background:#fff;             /* full white background */
        color:var(--ink);            /* full dark text */
        font-weight:600;             /* bolder text */
        box-shadow:0 1px 3px rgba(0,0,0,0.08); /* subtle pop shadow */
        transform:translateY(-1px);  /* tiny lift */
      }
      /* ▲▲ UPDATED END ▲▲ */

      .dropdown > a.view-all {
        margin-top:6px;
        font-size:0.8rem;
        font-weight:700;
        text-transform:uppercase;
        letter-spacing:0.5px;
        opacity:0.9;
        grid-column: 1 / -1; /* span all columns */
      }

      @media (min-width:769px){
        .menu-group::before{
          content:""; position:absolute; top:100%; left:-12px; right:-12px; height:40px; pointer-events:auto;
        }
        .menu-group.hovering > .dropdown,
        .menu-group:hover > .dropdown,
        .menu-group:focus-within > .dropdown{
          opacity:1; transform:translateY(0); pointer-events:auto;
        }
      }

      /* Mobile */
      @media (max-width:768px){
        header nav{
          position:absolute; top:var(--header-h); right:0; background:#fff;
          flex-direction:column; gap:0; padding:8px 12px; box-shadow:0 2px 8px rgba(0,0,0,.1);
          width:auto; max-width:92vw; min-width:220px;
        }
        header nav a{ display:block; width:100%; padding:10px; }
        .hamburger{ display:block; margin-left:auto; }

        .menu-group{ width:100%; }
        .menu-link.has-sub::after{ content:" ▾"; }
        .menu-group > .dropdown{
          position:static; background:#fff; box-shadow:none; border:0; padding:0 0 4px 0;
          display:block; /* stack items */
          overflow:hidden; max-height:0; transition:max-height .28s ease;
          opacity:1; transform:none; pointer-events:auto;
        }
        .menu-group.expanded > .dropdown{ max-height:480px; overflow:auto; }
      }

      @media (prefers-reduced-motion: reduce){
        .dropdown, .menu-group > .dropdown{ transition:none !important; }
      }

      main{ margin:0; padding:0; }
    </style>

    <style is:global>
      .hero-bleed{
        position:relative; left:50%; right:50%;
        width:calc(100vw + var(--bleed-fix)*2);
        margin-left:calc(-50vw - var(--bleed-fix)); margin-right:calc(-50vw - var(--bleed-fix));
        min-height:var(--hero-h); padding-top:var(--header-h);
        background-color:#e5e7eb; border-bottom:1px solid #eee; transform:translateZ(0); overflow:hidden;
      }
      .hero-bleed>img{ position:absolute; inset:0; width:100%; height:100%; object-fit:cover; }
      .container{ max-width:1200px; margin-inline:auto; padding-inline:var(--container-pad); }
    </style>

    <script is:inline>
      function toggleNav(){
        const nav=document.querySelector("header nav");
        const btn=document.querySelector(".hamburger");
        if(!nav||!btn)return;
        const isOpen=nav.classList.toggle("open");
        btn.setAttribute("aria-expanded",String(isOpen));
        if(!isOpen){ nav.querySelectorAll(".menu-group.expanded").forEach(g=>g.classList.remove("expanded")); }
      }
      window.toggleNav=toggleNav;

      const isDesktop = () => window.matchMedia("(min-width: 769px)").matches;

      document.addEventListener("DOMContentLoaded",function(){
        const nav=document.querySelector("header nav");
        const btn=document.querySelector(".hamburger");
        if(nav)nav.classList.remove("open");
        if(btn)btn.setAttribute("aria-expanded","false");

        // Mobile: first tap opens; second tap navigates
        document.querySelectorAll("a.menu-link.has-sub").forEach(link=>{
          link.addEventListener("click",function(e){
            if(isDesktop()) return; // desktop: let it navigate
            const group=link.closest(".menu-group");
            if(!group) return;
            if(!group.classList.contains("expanded")){
              e.preventDefault();
              nav.querySelectorAll(".menu-group.expanded").forEach(g=>{ if(g!==group) g.classList.remove("expanded"); });
              group.classList.add("expanded");
            }
          }, {passive:false});
        });

        if (isDesktop()){
          const groups=document.querySelectorAll(".menu-group");
          const CLOSE_MS=160;
          groups.forEach(g=>{
            const dd=g.querySelector(".dropdown");
            let t=null;

            function alignToViewport(){
              if(!dd) return;
              dd.classList.remove("align-right");
              const rect=dd.getBoundingClientRect();
              if (rect.right > (window.innerWidth - 12)) dd.classList.add("align-right");
            }

            function openNow(){ clearTimeout(t); g.classList.add("hovering"); alignToViewport(); }
            function scheduleClose(){ clearTimeout(t); t=setTimeout(()=>g.classList.remove("hovering"), CLOSE_MS); }

            g.addEventListener("mouseenter", openNow);
            g.addEventListener("mouseleave", scheduleClose);
            g.addEventListener("focusin", openNow);
            g.addEventListener("focusout", scheduleClose);
          });
        }
      });
    </script>
  </head>
  <body class={bodyClass}>
    {showHeader && (
      <header>
        <div class="nav-inner">
          <a class="brand" href="/">Fernie Real Estate</a>

          <button class="hamburger" onclick="toggleNav()" aria-label="Open menu" aria-expanded="false">☰</button>

          <nav>
            <div class="menu-group">
              <a class="menu-link has-sub" href="/neighbourhoods">Neighbourhoods</a>
              {(() => {
                const cols = colsFor(neighbourhoods.length);
                const wide = cols > 1 ? "wide" : "";
                return (
                  <div class={`dropdown ${wide}`} style={`--cols:${cols};`}>
                    {neighbourhoods.map(n => <a href={`/neighbourhoods/${n.slug}`}>{n.title}</a>)}
                    <a class="view-all" href="/neighbourhoods">ALL NEIGHBOURHOODS</a>
                  </div>
                );
              })()}
            </div>

            <div class="menu-group">
              <a class="menu-link has-sub" href="/types">Types</a>
              {(() => {
                const cols = colsFor(typesMenu.length);
                const wide = cols > 1 ? "wide" : "";
                return (
                  <div class={`dropdown ${wide}`} style={`--cols:${cols};`}>
                    {typesMenu.map(t => <a href={`/types/${t.slug}`}>{t.title}</a>)}
                    <a class="view-all" href="/types">ALL PROPERTY TYPES</a>
                  </div>
                );
              })()}
            </div>

            <div class="menu-group">
              <a class="menu-link has-sub" href="/xtraarea">Other Areas</a>
              {(() => {
                const cols = colsFor(xtraMenu.length);
                const wide = cols > 1 ? "wide" : "";
                return (
                  <div class={`dropdown ${wide}`} style={`--cols:${cols};`}>
                    {xtraMenu.map(x => <a href={`/xtraarea/${x.slug}`}>{x.title}</a>)}
                    <a class="view-all" href="/xtraarea">ALL OTHER AREAS</a>
                  </div>
                );
              })()}
            </div>

            {/* ✅ To Do → to_do */}
            <div class="menu-group">
              <a class="menu-link has-sub" href="/to_do">To Do</a>
              {(() => {
                const cols = colsFor(todoMenu.length);
                const wide = cols > 1 ? "wide" : "";
                return (
                  <div class={`dropdown ${wide}`} style={`--cols:${cols};`}>
                    {todoMenu.map(t => <a href={`/to_do/${t.slug}`}>{t.title}</a>)}
                    <a class="view-all" href="/to_do">ALL THINGS TO DO</a>
                  </div>
                );
              })()}
            </div>

            <a class="menu-link" href="/contact">Contact</a>
          </nav>
        </div>
      </header>
    )}
    <main><slot /></main>
  </body>
</html>
