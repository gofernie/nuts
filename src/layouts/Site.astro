---
const {
  title = "Fernie Real Estate",
  seo_title = title,
  seo_description = "",
  summary = "",
  showHeader = true,
  class: bodyClass = ""
} = Astro.props;

import { getJson } from "../lib/fetchJson";

const getField = (r:any, k:string) =>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const visible = (r:any) => {
  const s = getField(r, "status").toLowerCase();
  const slug = getField(r, "slug").toLowerCase();
  return s !== "hidden" && s !== "inactive" && slug !== "index";
};

const toItem = (r:any) => {
  const t = getField(r, "title");
  const s = getField(r, "slug");
  return (t && s) ? { title: t, slug: s } : null;
};

let neighbourhoods = [];
let typesMenu = [];

try {
  const urlN = import.meta.env.PUBLIC_SHEET_JSON;
  if (urlN) {
    const rawN = await getJson<any>(urlN);
    const rowsN = Array.isArray(rawN) ? rawN :
                  Array.isArray(rawN?.data) ? rawN.data :
                  Array.isArray(rawN?.rows) ? rawN.rows : [];
    neighbourhoods = rowsN.filter(visible).map(toItem).filter(Boolean)
      .sort((a:any,b:any)=>a.title.localeCompare(b.title)).slice(0,8);
  }
} catch (e) { console.warn("Neighbourhoods menu fetch failed:", e); }

try {
  const urlT = import.meta.env.PUBLIC_TYPES_JSON;
  if (urlT) {
    const rawT = await getJson<any>(urlT);
    const rowsT = Array.isArray(rawT) ? rawT :
                  Array.isArray(rawT?.data) ? rawT.data :
                  Array.isArray(rawT?.rows) ? rawT.rows : [];
    typesMenu = rowsT.filter(visible).map(toItem).filter(Boolean)
      .sort((a:any,b:any)=>a.title.localeCompare(b.title)).slice(0,8);
  }
} catch (e) { console.warn("Types menu fetch failed:", e); }

const metaDescription = (seo_description || summary || "").toString().trim();
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{seo_title}</title>
    {metaDescription && <meta name="description" content={metaDescription} />}

    <style>
      @media (max-width:768px){
        header nav{ display:none !important; }
        header nav.open{ display:flex !important; }
      }
    </style>

    <slot name="head" />

    <style>
      :root {
        --header-h: 52px;
        --bg:#fafaf9; --ink:#111827; --ink-muted:#1f2937; --hover-bg:rgba(243,244,246,.9);
        --hero-h:48vh; --container-w:1200px; --container-pad:12px; --bleed-fix:2px;
      }
      *,*::before,*::after { box-sizing:border-box; }
      html, body { height:100%; overflow-x:clip; }
      body { margin:0; font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif; background:var(--bg); color:var(--ink); }

      header{
        position:fixed; top:0; left:0; right:0; height:var(--header-h); z-index:1000;
        background:rgba(255,255,255,.84); backdrop-filter:blur(10px); border-bottom:1px solid #e5e7eb;
      }
      .nav-inner{ max-width:var(--container-w); margin:0 auto; height:100%; padding:0 var(--container-pad); display:flex; align-items:center; gap:12px; }
      .brand{ font-weight:700; font-size:1rem; color:var(--ink); text-decoration:none; padding:4px 6px; border-radius:6px; }
      .brand:hover{ background:var(--hover-bg); }
      .spacer{ flex:1; }

      nav{ display:flex; align-items:center; gap:12px; }
      nav a{ color:var(--ink-muted); padding:6px 8px; text-decoration:none; border-radius:8px; font-weight:500; }
      nav a:hover, nav a:focus-visible{ color:var(--ink); background:var(--hover-bg); }
      .hamburger{ display:none; background:none; border:none; font-size:1.5rem; cursor:pointer; color:var(--ink-muted); }

      /* ===== Desktop dropdowns: single column, animated, edge-aware ===== */
      .menu-group{ position:relative; margin:0 2px; }
      .menu-link.has-sub::after{ content:" ▾"; opacity:.8; }

      .dropdown{
        position:absolute; left:0; top:calc(100% + 16px);
        background:rgba(255,255,255,0.9); backdrop-filter:blur(6px);
        border:1px solid rgba(229,231,235,.7); border-radius:10px; box-shadow:0 6px 20px rgba(0,0,0,.08);

        /* force single column */
        display:block !important;
        columns:auto !important;
        column-count:1 !important;
        column-width:auto !important;

        min-width:240px; width:max-content; max-width:min(92vw,360px);
        max-height:min(70vh,520px); overflow:auto;

        opacity:0; transform:translateY(-12px); pointer-events:none; visibility:visible;
        transition:transform .28s cubic-bezier(.2,.7,.2,1), opacity .22s ease-out;
        will-change:opacity, transform;
        z-index:1100;
      }
      .menu-group .dropdown.align-right{ left:auto; right:0; }

      .dropdown > a{
        display:block !important; width:100%; padding:8px 12px; line-height:1.35;
        white-space:normal; text-decoration:none; border-radius:6px; color:var(--ink-muted);
      }
      .dropdown > a:hover{ background:var(--hover-bg); color:var(--ink); }
      .dropdown .sep{ margin:6px 0 4px; border-top:1px solid rgba(0,0,0,0.08); }

      @media (min-width:769px){
        .menu-group::before{
          content:""; position:absolute; top:100%; left:-12px; right:-12px; height:40px; pointer-events:auto;
        }
        .menu-group.hovering > .dropdown,
        .menu-group:hover > .dropdown,
        .menu-group:focus-within > .dropdown{
          opacity:1; transform:translateY(0); pointer-events:auto;
        }
      }

      /* ===== Mobile ===== */
      @media (max-width:768px){
        header nav{
          position:absolute; top:var(--header-h); right:0; background:#fff;
          flex-direction:column; gap:0; padding:8px 12px; box-shadow:0 2px 8px rgba(0,0,0,.1);
          width:min(92vw,420px);
        }
        header nav a{ display:block; width:100%; padding:10px; }
        .hamburger{ display:block; }

        .menu-group{ width:100%; }
        .menu-link.has-sub::after{ content:" ▾"; }
        .menu-group > .dropdown{
          position:static; background:#fff; box-shadow:none; border:0; padding:0 0 4px 0;
          overflow:hidden; max-height:0; transition:max-height .28s ease;
          opacity:1; transform:none; pointer-events:auto;
        }
        .menu-group.expanded > .dropdown{ max-height:480px; }
      }

      @media (prefers-reduced-motion: reduce){
        .dropdown, .menu-group > .dropdown{ transition:none !important; }
      }

      main{ margin:0; padding:0; }
    </style>

    <style is:global>
      .hero-bleed{
        position:relative; left:50%; right:50%;
        width:calc(100vw + var(--bleed-fix)*2);
        margin-left:calc(-50vw - var(--bleed-fix)); margin-right:calc(-50vw - var(--bleed-fix));
        min-height:var(--hero-h); padding-top:var(--header-h);
        background-color:#e5e7eb; border-bottom:1px solid #eee; transform:translateZ(0); overflow:hidden;
      }
      .hero-bleed>img{ position:absolute; inset:0; width:100%; height:100%; object-fit:cover; }
      .container{ max-width:var(--container-w); margin-inline:auto; padding-inline:var(--container-pad); }
    </style>

    <script is:inline>
      function toggleNav(){
        const nav=document.querySelector("header nav");
        const btn=document.querySelector(".hamburger");
        if(!nav||!btn)return;
        const isOpen=nav.classList.toggle("open");
        btn.setAttribute("aria-expanded",String(isOpen));
        if(!isOpen){ nav.querySelectorAll(".menu-group.expanded").forEach(g=>g.classList.remove("expanded")); }
      }
      window.toggleNav=toggleNav;

      function isMobile(){ return window.matchMedia("(hover: none), (max-width: 768px)").matches; }

      document.addEventListener("DOMContentLoaded",function(){
        const nav=document.querySelector("header nav");
        const btn=document.querySelector(".hamburger");
        if(nav)nav.classList.remove("open");
        if(btn)btn.setAttribute("aria-expanded","false");

        // Mobile: first tap opens, second tap navigates
        document.querySelectorAll("a.menu-link.has-sub").forEach(link=>{
          link.addEventListener("click",function(e){
            if(!isMobile()) return;
            const group=link.closest(".menu-group");
            if(!group) return;
            if(!group.classList.contains("expanded")){
              e.preventDefault();
              nav.querySelectorAll(".menu-group.expanded").forEach(g=>{ if(g!==group) g.classList.remove("expanded"); });
              group.classList.add("expanded");
            }
          });
        });

        // Desktop hover + edge alignment
        if (window.matchMedia("(min-width: 769px)").matches){
          const groups=document.querySelectorAll(".menu-group");
          const CLOSE_MS=180;
          groups.forEach(g=>{
            const dd=g.querySelector(".dropdown");
            let t=null;

            function alignToViewport(){
              if(!dd) return;
              dd.classList.remove("align-right");
              const rect=dd.getBoundingClientRect();
              const overRight = rect.right > (window.innerWidth - 12);
              if (overRight) dd.classList.add("align-right");
            }

            function openNow(){ clearTimeout(t); g.classList.add("hovering"); alignToViewport(); }
            function scheduleClose(){ clearTimeout(t); t=setTimeout(()=>g.classList.remove("hovering"), CLOSE_MS); }

            g.addEventListener("mouseenter", openNow);
            g.addEventListener("mouseleave", scheduleClose);
            g.addEventListener("focusin", openNow);
            g.addEventListener("focusout", scheduleClose);
          });
        }
      });
    </script>
  </head>
  <body class={bodyClass}>
    {showHeader && (
      <header>
        <div class="nav-inner">
          <a class="brand" href="/">Fernie Real Estate</a>
          <span class="spacer"></span>

          <button class="hamburger" onclick="toggleNav()" aria-label="Open menu" aria-expanded="false">☰</button>

          <nav>
            <div class="menu-group">
              <a class="menu-link has-sub" href="/neighbourhoods">Neighbourhoods</a>
              <div class="dropdown">
                {neighbourhoods.map(n => <a href={`/neighbourhoods/${n.slug}`}>{n.title}</a>)}
                <div class="sep"></div>
                <a href="/neighbourhoods">View all neighbourhoods</a>
              </div>
            </div>

            <div class="menu-group">
              <a class="menu-link has-sub" href="/types">Types</a>
              <div class="dropdown">
                {typesMenu.map(t => <a href={`/types/${t.slug}`}>{t.title}</a>)}
                <div class="sep"></div>
                <a href="/types">View all property types</a>
              </div>
            </div>

            <a class="menu-link" href="/contact">Contact</a>
          </nav>
        </div>
      </header>
    )}
    <main><slot /></main>
  </body>
</html>
