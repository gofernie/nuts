---
/* src/layouts/Site.astro */
const {
  title = "Fernie Real Estate",
  seo_title = title,          // <title>
  seo_description = "",       // <meta name="description">
  summary = "",               // used as fallback for description
  showHeader = true,
  class: bodyClass = ""
} = Astro.props;

import { getJson } from "../lib/fetchJson";

// helpers for menus
const getField = (r:any, k:string) =>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const visible = (r:any) => {
  const s = getField(r, "status").toLowerCase();
  const slug = getField(r, "slug").toLowerCase();
  return s !== "hidden" && s !== "inactive" && slug !== "index";
};

const toItem = (r:any) => {
  const t = getField(r, "title");
  const s = getField(r, "slug");
  return (t && s) ? { title: t, slug: s } : null;
};

let neighbourhoods: {title:string; slug:string}[] = [];
let typesMenu: {title:string; slug:string}[] = [];

try {
  const urlN = import.meta.env.PUBLIC_SHEET_JSON;
  if (urlN) {
    const rawN = await getJson<any>(urlN);
    const rowsN: any[] = Array.isArray(rawN) ? rawN :
                         Array.isArray(rawN?.data) ? rawN.data :
                         Array.isArray(rawN?.rows) ? rawN.rows : [];
    neighbourhoods = rowsN.filter(visible).map(toItem).filter(Boolean)
      .sort((a:any,b:any) => a.title.localeCompare(b.title)).slice(0, 8) as any;
  }
} catch (e) { console.warn("Neighbourhoods menu fetch failed:", e); }

try {
  const urlT = import.meta.env.PUBLIC_TYPES_JSON;
  if (urlT) {
    const rawT = await getJson<any>(urlT);
    const rowsT: any[] = Array.isArray(rawT) ? rawT :
                         Array.isArray(rawT?.data) ? rawT.data :
                         Array.isArray(rawT?.rows) ? rawT.rows : [];
    typesMenu = rowsT.filter(visible).map(toItem).filter(Boolean)
      .sort((a:any,b:any) => a.title.localeCompare(b.title)).slice(0, 8) as any;
  }
} catch (e) { console.warn("Types menu fetch failed:", e); }

// SEO fallback
const metaDescription = (seo_description || summary || "").toString().trim();
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>{seo_title}</title>
    {metaDescription && <meta name="description" content={metaDescription} />}

    <!-- Anti-FOUC: ensure mobile menu starts closed -->
    <style>
      @media (max-width:768px){
        header nav{ display:none !important; }
        header nav.open{ display:flex !important; }
      }
    </style>

    <slot name="head" />

    <style>
      :root {
        --header-h: 52px;
        --bg: #fafaf9;
        --ink: #111827;
        --ink-muted: #1f2937;
        --hover-bg: rgba(243,244,246,.9);
        --hero-h: 48vh;
        --container-w: 1200px;
        --container-pad: 12px;
        --bleed-fix: 2px;
      }
      *,*::before,*::after { box-sizing: border-box; }
      html, body { height: 100%; overflow-x: clip; }
      body { margin:0; font-family: system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif; background: var(--bg); color: var(--ink); }

      header{
        position:fixed; top:0; left:0; right:0; height:var(--header-h); z-index:100;
        background: rgba(255,255,255,.84); backdrop-filter: blur(10px); border-bottom:1px solid #e5e7eb;
        overflow: visible;
      }
      .nav-inner{ max-width: var(--container-w); margin:0 auto; height:100%; padding:0 var(--container-pad); display:flex; align-items:center; }
      .brand{ font-weight:700; font-size:1rem; color:var(--ink); text-decoration:none; padding:4px 6px; border-radius:6px; }
      .brand:hover{ background: var(--hover-bg); }
      .spacer{ flex:1; }

      nav{ display:flex; align-items:center; gap:12px; }
      nav a{ color:var(--ink-muted); padding:4px 6px; text-decoration:none; border-radius:6px; font-weight:500; line-height:1; }
      nav a:hover, nav a:focus-visible{ color:var(--ink); background: var(--hover-bg); }
      .hamburger{ display:none; background:none; border:none; font-size:1.5rem; cursor:pointer; color:var(--ink-muted); }

      /* Dropdown + buffer (desktop) */
      .menu-group{ position:relative; }
      .menu-group > .menu-link::after{ content:" â–¾"; opacity:.8; }
      .dropdown{
        position:absolute; left:0; top:calc(100% + 21px);
        background: rgba(255,255,255,0.85); backdrop-filter: blur(6px);
        border:1px solid rgba(229,231,235,.7); border-radius:10px; box-shadow:0 6px 20px rgba(0,0,0,.08);
        padding:8px; min-width:240px; opacity:0; visibility:hidden; transform: translateY(-6px);
        transition: opacity .18s ease, transform .18s ease, visibility 0s linear .18s; z-index:300;
      }
      .menu-group::before{
        content:""; position:absolute; top:100%; left:0; right:0; height:22px;
        pointer-events:auto; z-index:301;
      }
      .menu-group.hovering > .dropdown,
      .menu-group:hover > .dropdown,
      .menu-group:focus-within > .dropdown{
        opacity:1; visibility:visible; transform: translateY(0);
      }
      .dropdown a{ display:block; padding:8px 10px; border-radius:6px; color:var(--ink-muted); text-decoration:none; }
      .dropdown a:hover{ background: var(--hover-bg); color: var(--ink); }
      .dropdown .sep{ margin:6px 0 4px; border-top:1px solid rgba(0,0,0,0.08); }

      /* Mobile */
      @media (max-width:768px){
        header nav{
          position:absolute; top:var(--header-h); right:0; background:#fff;
          flex-direction:column; gap:0; padding:8px 12px; display:none;
          box-shadow:0 2px 8px rgba(0,0,0,.1);
          width:min(92vw, 420px);
        }
        header nav.open{ display:flex; }
        header nav a{ display:block; width:100%; padding:10px; }
        .hamburger{ display:block; }

        /* Hide dropdowns by default on mobile */
        .menu-group { width:100%; }
        .menu-group .menu-row{
          display:flex; align-items:center; justify-content:space-between; width:100%;
          padding:4px 6px; border-radius:6px;
        }
        .submenu-toggle{
          margin-left:6px; border:none; background:none; font-size:1.1rem; line-height:1;
          padding:8px; cursor:pointer; color:var(--ink-muted);
        }
        .submenu-toggle[aria-expanded="true"] { transform: rotate(180deg); }

        .menu-group > .dropdown{
          position:static; background:#fff; backdrop-filter:none; box-shadow:none; padding:4px 0;
          opacity:1; visibility:visible; transform:none;
          display:none;                 /* <-- key: hidden by default */
        }
        .menu-group.expanded > .dropdown{
          display:block;                /* <-- only when expanded */
        }

        /* Remove desktop-only affordances */
        .menu-group::before{ display:none; }
      }

      main{ margin:0; padding:0; }
    </style>

    <style is:global>
      .hero-bleed{
        position: relative; left: 50%; right: 50%;
        width: calc(100vw + var(--bleed-fix) * 2);
        margin-left: calc(-50vw - var(--bleed-fix)); margin-right: calc(-50vw - var(--bleed-fix));
        min-height: var(--hero-h); padding-top: var(--header-h); background-color:#e5e7eb; border-bottom:1px solid #eee; transform: translateZ(0); overflow:hidden;
      }
      .hero-bleed > img{ position:absolute; inset:0; width:100%; height:100%; object-fit:cover; object-position:center; }
      .container{ max-width: var(--container-w); margin-inline:auto; padding-inline: var(--container-pad); }
      img{ display:block; max-width:100%; height:auto; }
    </style>

    <script is:inline>
      // Mobile nav toggle with ARIA
      function toggleNav(){
        const nav = document.querySelector("header nav");
        const btn = document.querySelector(".hamburger");
        if(!nav || !btn) return;
        const isOpen = nav.classList.toggle("open");
        btn.setAttribute("aria-expanded", String(isOpen));
        if (!isOpen) {
          // Collapse any open submenus when main menu closes
          nav.querySelectorAll(".menu-group.expanded").forEach(g=>{
            g.classList.remove("expanded");
            const t = g.querySelector(".submenu-toggle");
            if (t) t.setAttribute("aria-expanded","false");
          });
        }
      }
      window.toggleNav = toggleNav;

      // Ensure main menu is closed on load
      document.addEventListener("DOMContentLoaded", () => {
        const nav = document.querySelector("header nav");
        const btn = document.querySelector(".hamburger");
        if (nav && nav.classList.contains("open")) {
          nav.classList.remove("open");
          if (btn) btn.setAttribute("aria-expanded","false");
        }

        // Submenu toggles (mobile-only, harmless on desktop)
        document.querySelectorAll(".submenu-toggle").forEach((btn:any)=>{
          btn.addEventListener("click", (e:any)=>{
            const group = btn.closest(".menu-group");
            if (!group) return;
            const expanded = group.classList.toggle("expanded");
            btn.setAttribute("aria-expanded", String(expanded));
          });
        });
      });

      // Desktop hover intent (unchanged)
      (function(){
        const isTouch = matchMedia("(max-width: 768px)").matches;
        if (isTouch) return;
        const groups = document.querySelectorAll(".menu-group");
        const CLOSE_MS = 140;

        groups.forEach(g => {
          let closeT:any = null;
          const openNow = () => { clearTimeout(closeT); g.classList.add("hovering"); };
          const scheduleClose = () => { clearTimeout(closeT); closeT = setTimeout(() => g.classList.remove("hovering"), CLOSE_MS); };
          g.addEventListener("mouseenter", openNow);
          g.addEventListener("mouseleave", scheduleClose);
          g.addEventListener("focusin", openNow);
          g.addEventListener("focusout", scheduleClose);
        });
      })();
    </script>
  </head>
  <body class={bodyClass}>
    {showHeader && (
      <header>
        <div class="nav-inner">
          <a class="brand" href="/">Fernie Real Estate</a>
          <span class="spacer"></span>

          <button
            class="hamburger"
            onclick="toggleNav()"
            aria-label="Open menu"
            aria-expanded="false"
          >â˜°</button>

          <nav>
            <!-- Neighbourhoods -->
            <div class="menu-group">
              <div class="menu-row">
                <a class="menu-link" href="/neighbourhoods">Neighbourhoods</a>
                <button class="submenu-toggle" aria-expanded="false" aria-label="Toggle neighbourhoods">â–¾</button>
              </div>
              <div class="dropdown" role="menu" aria-label="Neighbourhoods menu">
                {neighbourhoods.map(n => <a href={`/neighbourhoods/${n.slug}`}>{n.title}</a>)}
                <div class="sep"></div>
                <a href="/neighbourhoods">View all neighbourhoods</a>
              </div>
            </div>

            <!-- Types -->
            <div class="menu-group">
              <div class="menu-row">
                <a class="menu-link" href="/types">Types</a>
                <button class="submenu-toggle" aria-expanded="false" aria-label="Toggle types">â–¾</button>
              </div>
              <div class="dropdown" role="menu" aria-label="Types menu">
                {typesMenu.map(t => <a href={`/types/${t.slug}`}>{t.title}</a>)}
                <div class="sep"></div>
                <a href="/types">View all property types</a>
              </div>
            </div>

            <a href="/contact">Contact</a>
          </nav>
        </div>
      </header>
    )}
    <main>
      <slot />
    </main>
  </body>
</html>
