---
/**
 * SnowReport.astro — Fernie Alpine Resort (FAR)
 * Data: Open-Meteo (hourly snowfall + 3-day daily sums)
 * No API key required. Server-side fetch at render time.
 */

type OMHourly = { time: string[]; snowfall?: number[] };
type OMDaily = { time: string[]; snowfall_sum?: number[] };
type OMResp = {
  hourly?: OMHourly;
  daily?: OMDaily;
};

const LAT = 49.5043;
const LON = -115.0910;
const TZ  = "America/Edmonton";


// Request last 24h of hourly snowfall, plus the next 3 days of daily snowfall_sum.
const url = new URL("https://api.open-meteo.com/v1/forecast");
url.searchParams.set("latitude", String(LAT));
url.searchParams.set("longitude", String(LON));
url.searchParams.set("hourly", "snowfall");        // cm per hour
url.searchParams.set("daily", "snowfall_sum");     // cm per day
url.searchParams.set("timezone", TZ);
url.searchParams.set("past_days", "1");            // include previous 24h
url.searchParams.set("forecast_days", "3");        // next 3 days

let data: OMResp | null = null;
let err: string | null = null;

try {
  const res = await fetch(url.toString(), { headers: { "cache-control": "no-cache" } });
  if (!res.ok) throw new Error(`Open-Meteo HTTP ${res.status}`);
  data = (await res.json()) as OMResp;
} catch (e:any) {
  err = e?.message || "Failed to load snow data";
}

// Compute last 24h snowfall from hourly series (cm)
let last24cm = 0;
if (data?.hourly?.snowfall && Array.isArray(data.hourly.snowfall) && data.hourly.snowfall.length >= 24) {
  const h = data.hourly.snowfall;
  last24cm = h.slice(-24).reduce((a, b) => a + (Number.isFinite(b) ? b : 0), 0);
}
const dailyTimes = data?.daily?.time ?? [];
const dailySums  = data?.daily?.snowfall_sum ?? [];

// Prepare 3-day forecast rows
const forecast = dailyTimes.slice(0, 3).map((iso, i) => {
  const cm = Number(dailySums?.[i] ?? 0);
  const d  = new Date(iso + "T00:00:00");
  const label = d.toLocaleDateString("en-CA", { weekday: "short", month: "short", day: "numeric", timeZone: TZ });
  return { label, cm: Math.max(0, Math.round(cm * 10) / 10) };
});

// Simple helpers
const formatCM = (v:number) => `${(Math.round(v * 10) / 10).toFixed(1)} cm`;
---

<div class="snow-card" role="region" aria-label="Fernie snow report">
  <div class="row">
    <div class="stat">
      <div class="eyebrow">Last 24h</div>
      <div class="big">{formatCM(last24cm)}</div>
    </div>
    <div class="vline" aria-hidden="true"></div>
    <div class="forecast">
      <div class="eyebrow">Next 3 days</div>
      <ul class="days">
        {forecast.map(f => (
          <li class="day">
            <span class="d">{f.label}</span>
            <span class="cm">{formatCM(f.cm)}</span>
          </li>
        ))}
      </ul>
    </div>
  </div>

  <div class="fine">
    Source: <a href="https://open-meteo.com/" rel="nofollow noopener">Open-Meteo</a> ·
    Coords: {LAT.toFixed(3)}, {LON.toFixed(3)} · TZ: {TZ}
    {err && <span class="err"> · {err}</span>}
  </div>
</div>

<style>
  .snow-card {
    --pad: 12px;
    --radius: 16px;
    --shadow: 0 6px 24px rgba(0,0,0,.06);
    --fg: #0b1f2a;
    --muted: #5e737f;
    --line: rgba(0,0,0,.08);
    background: white;
    color: var(--fg);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    padding: calc(var(--pad) * 1.25) calc(var(--pad) * 1.5);
  }
  .row {
    display: grid;
    grid-template-columns: auto 1px 1fr;
    gap: 16px;
    align-items: center;
  }
  .stat { display: grid; gap: 4px; }
  .eyebrow {
    font-size: .8rem;
    letter-spacing: .06em;
    text-transform: uppercase;
    color: var(--muted);
  }
  .big { font-size: clamp(1.8rem, 2.4vw + 1rem, 2.6rem); font-weight: 800; line-height: 1.1; }

  .vline {
    width: 1px; height: 48px; background: var(--line);
  }

  .forecast { min-width: 220px; }
  .days { list-style: none; padding: 0; margin: 0; display: grid; grid-template-columns: repeat(3, minmax(0, 1fr)); gap: 10px; }
  .day { display: grid; gap: 2px; padding: 6px 8px; background: #f7fafb; border-radius: 12px; text-align: center; }
  .d   { font-size: .86rem; color: var(--muted); }
  .cm  { font-weight: 700; }

  .fine {
    margin-top: 10px;
    font-size: .8rem;
    color: var(--muted);
  }

  @media (max-width: 640px) {
    .row {
      grid-template-columns: 1fr;
      gap: 10px;
    }
    .vline { display: none; }
    .forecast { min-width: 0; }
  }
</style>
