---
// src/components/RVEmbed.astro
export interface Props {
  blockId: string;
  minHeight?: string;    // default: one card tall
  class?: string;
}

const { blockId, minHeight = "560px", class: klass = "" } = Astro.props;
---

<section class={`rv-section ${klass}`}>
  <div class="rv-wrap" style={`min-height:${minHeight}`}>
    <div data-rv-block={blockId}></div>
  </div>

  <style>
    .rv-section {
      margin: 0;
      padding: 0;
    }

    .rv-wrap {
      display: block;
      margin: 0;
      padding: 0;
      line-height: 0;
    }

    .rv-wrap > * {
      display: block;
      width: 100%;
      border: 0;
    }

    /* Prevent extra gap under RV */
    .rv-wrap :where(iframe, .rv-container, [data-rv-block]) {
      margin-bottom: 0 !important;
    }
  </style>
</section>

<script is:inline>
  (function initRV() {
    if (window?.RealtyVis?.init) {
      try { window.RealtyVis.init(); } catch (_) {}
      return;
    }

    // If the script hasn't finished loading yet, wait for it.
    const s = document.querySelector(
      'script[src*="realtyvis"][src*="in.js"], script[src*="app.realtyvis.com/in.js"]'
    );

    if (s) {
      s.addEventListener(
        "load",
        () => {
          try { window.RealtyVis.init(); } catch (_) {}
        },
        { once: true }
      );
    } else {
      // fallback tiny poll
      const t = setInterval(() => {
        if (window?.RealtyVis?.init) {
          clearInterval(t);
          try { window.RealtyVis.init(); } catch (_) {}
        }
      }, 60);
      setTimeout(() => clearInterval(t), 2000);
    }
  })();
</script>
