---
// File: src/pages/types/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* ---------- tiny util ---------- */
const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

/* ---------- static paths ---------- */
export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_TYPES_JSON;
  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch {
    return [];
  }

  const items = rows.map((r:any) => {
    const status  = String(r?.status ?? r?.Status ?? r?.STATUS ?? "").trim().toLowerCase();
    const rawSlug = String(r?.slug   ?? r?.Slug   ?? r?.SLUG   ?? "").trim().toLowerCase();
    const hidden = status === "hidden" || status === "inactive" || rawSlug === "index";
    if (hidden) return null;

    const title  = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    const slug   = rawSlug || slugify(title);
    if (!slug) return null;

    return { params: { slug } };
  }).filter(Boolean) as { params: { slug: string } }[];

  return items;
}

/* ---------- page data ---------- */
const slugParam = (Astro.params.slug || "").toString().trim().toLowerCase();
const url = import.meta.env.PUBLIC_TYPES_JSON;
if (!url) throw new Error("Missing PUBLIC_TYPES_JSON in .env (restart dev).");

let row:any = null;
try {
  const raw = await getJson<any>(url);
  const rows:any[] = Array.isArray(raw) ? raw
    : Array.isArray(raw?.data) ? raw.data
    : Array.isArray(raw?.rows) ? raw.rows : [];

  row = rows.find((r:any) => {
    const rawSlug = String(r?.slug ?? r?.Slug ?? r?.SLUG ?? "").trim().toLowerCase();
    const title   = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    const computed = (rawSlug || slugify(title)).toLowerCase();
    return computed === slugParam;
  });
} catch (e) {
  console.error("[types slug] JSON fetch failed:", e);
}

if (!row) {
  throw new Error(`Type slug not found: ${slugParam}`);
}

/* ---------- fields ---------- */
const title    = String(row?.title ?? row?.Title ?? row?.TITLE ?? "Property Type").trim();
const summary  = String(row?.summary ?? row?.Summary ?? row?.SUMMARY ?? "").trim();
const body     = String(row?.long_copy ?? row?.longcopy ?? row?.LongCopy ?? "").trim();
const heroImg  = String(row?.hero_img ?? row?.heroImg ?? row?.HeroImg ?? "").trim();
const seoTitle = String(row?.seo_title ?? row?.seoTitle ?? title).trim();
const seoDesc  = String(row?.seo_description ?? row?.seoDescription ?? summary ?? "").trim();

const SUMMARY_IS_HTML = false;
const BODY_IS_HTML    = true;

/* ---------- listings (RealtyVis) ---------- */
/** In Sheets, for `cta1` / `rv_block`, store EITHER:
 *  - just the block id:   XXXXXXXX-XXXXXXXX
 *  - or the container:    <div data-rv-block="XXXXXXXX-XXXXXXXX"></div>
 *  NEVER the <script src=".../embed.js"> tag (we strip it if present).
 */
const rawCta =
  String(row?.cta1 ?? row?.rv_block ?? "").trim() ||
  String(import.meta.env.PUBLIC_DEFAULT_RV_BLOCK ?? "").trim();

const isRvId = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i.test(rawCta);

function stripScripts(html:string) {
  return html.replace(/<script\b[^>]*>[\s\S]*?<\/script>/gi, "");
}

function keepOnlyRvContainer(html:string) {
  const clean = stripScripts(html);
  const m = clean.match(
    /<div[^>]*\sdata-rv-block=["']?([A-Z0-9]{8}-[A-Z0-9]{8})["']?[^>]*>\s*<\/div>/i
  );
  return m?.[0] ?? clean;
}

const containerHtml = isRvId
  ? `<div data-rv-block="${rawCta}"></div>`
  : keepOnlyRvContainer(rawCta);
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc}>
  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    containerPad={12}
    flush={false}
    preload={false}
  />

  {summary && (
    <div class="container summary-wrap">
      {SUMMARY_IS_HTML
        ? <div class="lead" set:html={summary}></div>
        : <p class="lead">{summary}</p>}
    </div>
  )}

  {(rawCta) && (
    <div class="container listings-wrap">
      <h2 class="h2">Current Listings</h2>

      <!-- ðŸš« No per-page script loader. Global RV loader in Site.astro does the work. -->
      <div class="rv-slot" set:html={containerHtml}></div>

      <!-- Re-scan on SPA nav / bfcache return if RV is already present -->
      <script is:inline>
        (function(){
          function rescan(){
            if (window.RealtyVis) {
              requestAnimationFrame(function(){
                try { window.RealtyVis.init?.(); } catch(_) {}
                try { window.RealtyVis.scan?.(); } catch(_) {}
              });
            }
          }
          document.addEventListener("astro:page-load", rescan);
          document.addEventListener("astro:after-swap", rescan);
          window.addEventListener("pageshow", (e)=>{ if (e.persisted) rescan(); });
          document.addEventListener("visibilitychange", ()=>{ if (!document.hidden) rescan(); });
        })();
      </script>
    </div>
  )}

  {body && (
    <div class="container body-wrap">
      {BODY_IS_HTML
        ? <div class="lead" set:html={body}></div>
        : <p class="lead">{body}</p>}
    </div>
  )}

  {!rawCta && (
    <div class="container note">
      <p><strong>Heads-up:</strong> No <code>cta1</code>/<code>rv_block</code> set, and no
        <code> PUBLIC_DEFAULT_RV_BLOCK</code>. Add one to show listings.</p>
    </div>
  )}

  <style>
    .container{
      max-width:1200px;
      margin-inline:auto;
      padding-inline:12px;
    }

    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .body-wrap{ padding-top:12px; }

    .lead{
      margin:0;
      font-size:1.075rem;
      line-height:1.6;
      color:#111827;
    }

    .listings-wrap{ padding-top:16px; padding-bottom:8px; }
    .h2{ font-size: clamp(20px,2.6vw,28px); margin: 0 0 10px; }

    .rv-slot { min-height: 200px; }
    .rv-slot:empty::before{
      content:"";
      display:block;
      height:180px;
      border-radius:10px;
      background:linear-gradient(90deg,#eee 25%,#f6f6f6 37%,#eee 63%);
      background-size:400% 100%;
      animation:shimmer 1.2s infinite linear;
      border:1px solid #eee;
    }
    @keyframes shimmer {
      0% { background-position: 100% 0; }
      100% { background-position: 0 0; }
    }

    .note{
      color:#666; background:#fafafa; border:1px solid #eee;
      padding:12px 14px; border-radius:8px; margin-top:16px;
    }
  </style>
</Site>
