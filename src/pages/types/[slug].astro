---
// File: src/pages/types/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import RVEmbed from "../../components/RVEmbed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* ---------- tiny util ---------- */
const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

/* ---------- static paths ---------- */
export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_TYPES_JSON;
  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch { return []; }

  const items = rows.map((r:any) => {
    const status  = String(r?.status ?? r?.Status ?? r?.STATUS ?? "").trim().toLowerCase();
    const rawSlug = String(r?.slug   ?? r?.Slug   ?? r?.SLUG   ?? "").trim().toLowerCase();
    const hidden = status === "hidden" || status === "inactive" || rawSlug === "index";
    if (hidden) return null;

    const title  = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    const slug   = (rawSlug || slugify(title)).toLowerCase();
    return slug ? { params: { slug }, props: { row: r } } : null;
  }).filter(Boolean) as any[];

  return items;
}

/* ---------- page data ---------- */
type Row = {
  title?: string; Title?: string; TITLE?: string;
  summary?: string; Summary?: string; SUMMARY?: string;
  long_copy?: string; longcopy?: string; LongCopy?: string;
  hero_img?: string; heroImg?: string; HeroImg?: string;
  seo_title?: string; seoTitle?: string;
  seo_description?: string; seoDescription?: string;
  cta1?: string; rv_block?: string; slug?: string; status?: string;
};
const { row: rowIn } = Astro.props as { row?: Row };
const row = rowIn ?? ({} as Row);

/* ---------- fields ---------- */
const title    = String(row?.title ?? row?.Title ?? row?.TITLE ?? "Property Type").trim();
const summary  = String(row?.summary ?? row?.Summary ?? row?.SUMMARY ?? "").trim();
const body     = String(row?.long_copy ?? row?.longcopy ?? row?.LongCopy ?? "").trim();
const heroImg  = String(row?.hero_img ?? row?.heroImg ?? row?.HeroImg ?? "").trim();
const seoTitle = String(row?.seo_title ?? row?.seoTitle ?? title).trim();
const seoDesc  = String(row?.seo_description ?? row?.seoDescription ?? summary ?? "").trim();

const SUMMARY_IS_HTML = false;
const BODY_IS_HTML    = true;

/* ---------- listings (RealtyVis) ---------- */
const rawCta =
  String(row?.cta1 ?? row?.rv_block ?? "").trim() ||
  String(import.meta.env.PUBLIC_DEFAULT_RV_BLOCK ?? "").trim();

const ID_RE = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i;
function stripScripts(html:string) { return html.replace(/<script\b[^>]*>[\s\S]*?<\/script>/gi, ""); }
function extractRvId(html:string) {
  const clean = stripScripts(html);
  const m = clean.match(/data-rv-block=["']?([A-Z0-9]{8}-[A-Z0-9]{8})["']?/i);
  return m?.[1] || "";
}
const rvBlockId = ID_RE.test(rawCta) ? rawCta : extractRvId(rawCta);
const hasValidBlock = ID_RE.test(rvBlockId);

/* ---------- hero preload hint ---------- */
const heroPreload = heroImg ? { href: heroPath(heroImg) } : null;
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc} heroPreload={heroPreload}>
  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    containerPad={12}
    flush={false}
    preload={false}
  />

  {summary && (
    <section class="summary-section">
      <div class="container">
        <div class="summary-card">
          {SUMMARY_IS_HTML
            ? <div class="lead" set:html={summary}></div>
            : <p class="lead">{summary}</p>}
        </div>
      </div>
    </section>
  )}

  {(rawCta) && (
    <div class="container listings-wrap">
         <h2 class="h2">Current {title} Listings</h2>

      {hasValidBlock ? (
        <div class="rv-host">
          <RVEmbed block={rvBlockId} minHeight="1000px" showSkeleton={false} />
        </div>
      ) : (
        <div class="rv-fallback">
          <p>Listings are unavailable right now.</p>
          <p><a href="/search">Browse all listings</a></p>
        </div>
      )}

      {hasValidBlock && (
        <script is:inline>
{`(function(){
  let warmed=false;
  function warm(){
    if(warmed) return; warmed=true;
    new Image().src="https://app.realtyvis.com/favicon.ico";
    new Image().src="https://cdn.realtyvis.com/favicon.ico";
    try{
      fetch("https://app.realtyvis.com/css/site.min.css",{mode:"no-cors"}).catch(()=>{});
      fetch("https://app.realtyvis.com/js/site.min.js",{mode:"no-cors"}).catch(()=>{});
    }catch(e){}
  }
  const host=document.querySelector(".rv-host")||document.querySelector(".listings-wrap");
  if(!host) return;
  ["pointerover","touchstart","focusin"].forEach(ev=>{
    host.addEventListener(ev,warm,{once:true,passive:true});
  });
})();`}
        </script>
      )}
    </div>
  )}

  {body && (
    <div class="container body-wrap">
      {BODY_IS_HTML
        ? <div class="lead" set:html={body}></div>
        : <p class="lead">{body}</p>}
    </div>
  )}

  {!rawCta && (
    <div class="container note">
      <p><strong>Heads-up:</strong> No <code>cta1</code>/<code>rv_block</code> set, and no
        <code> PUBLIC_DEFAULT_RV_BLOCK</code>. Add one to show listings.</p>
    </div>
  )}

  <style>
    .container {
      max-width: 1200px;
      margin-inline: auto;
      padding-inline: 12px;
    }

    /* ðŸ‘‡ summary section matches neighbourhood index */
    .summary-section {
      padding: 18px 0 4px;
    }
    .summary-card {
      background: #fff;
      border: 1px solid #ececec;
      border-radius: 14px;
      padding: 16px 18px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.06);
    }

    .lead {
      margin: 0;
      font-size: 1.075rem;
      line-height: 1.6;
      color: #111827;
    }

    .listings-wrap {
      padding-top: 16px;
      padding-bottom: 8px;
    }

    .h2 {
      font-size: clamp(20px, 2.6vw, 28px);
      margin: 0 0 10px;
    }

    .rv-fallback {
      margin-top: 12px;
      padding: 12px 16px;
      background: #fff3cd;
      border: 1px solid #ffe69c;
      border-radius: 10px;
      color: #5c3c00;
    }

    .note {
      color: #666;
      background: #fafafa;
      border: 1px solid #eee;
      padding: 12px 14px;
      border-radius: 8px;
      margin-top: 16px;
    }

    /* Kill shimmer/skeletons coming from RV */
    .rv-host [class*="skeleton"],
    .rv-host [class*="Skeleton"],
    .rv-host [class*="loading"],
    .rv-host [data-skeleton],
    .rv-host .rv-skeleton,
    .rv-host .loading-skeleton,
    .rv-host .rv-loading {
      animation: none !important;
      background: none !important;
      background-image: none !important;
      box-shadow: none !important;
      opacity: 0 !important;
      pointer-events: none !important;
    }
    .rv-host * {
      animation-duration: 0s !important;
      transition: none !important;
    }
  </style>
</Site>
