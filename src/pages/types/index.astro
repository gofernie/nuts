---
// src/pages/types/index.astro
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

const url = import.meta.env.PUBLIC_TYPES_JSON;

type Row = {
  // raw values from the sheet
  raw_slug?: string;
  title?: string;
  summary?: string;
  hero_img?: string;
  status?: string;
  seo_title?: string;
  seo_description?: string;
  // derived for cards/links
  slug?: string;
};

let items: Row[] = [];
let header: Row | null = null;
let error: string | null = null;

try {
  if (!url) throw new Error("Missing PUBLIC_TYPES_JSON in .env (restart dev).");
  const raw = await getJson<any>(url);

  const rows: any[] =
    Array.isArray(raw) ? raw :
    Array.isArray(raw?.data) ? raw.data :
    Array.isArray(raw?.rows) ? raw.rows :
    [];

  const get = (r:any,k:string)=>
    (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

  const normalize = (r:any): Row => {
    const title = get(r,"title");
    const raw_slug = get(r,"slug"); // preserve sheet slug (may be blank)
    const computedSlug = (title||"").toLowerCase()
      .replace(/&/g,"-and-")
      .replace(/[^a-z0-9]+/g,"-")
      .replace(/^-+|-+$/g,"");

    return {
      raw_slug,
      title,
      summary: get(r,"summary"),
      hero_img: get(r,"hero_img"),
      status: get(r,"status"),
      seo_title: get(r,"seo_title"),
      seo_description: get(r,"seo_description"),
      // used for cards/links
      slug: raw_slug || computedSlug,
    };
  };

  const normalized = rows.map(normalize);

  // ✅ robust header detection:
  // 1) explicit slug === "index", or 2) status === "header", or 3) blank raw slug
  header =
    normalized.find(r => (r.raw_slug ?? "").toLowerCase() === "index") ??
    normalized.find(r => (r.status ?? "").toLowerCase() === "header") ??
    normalized.find(r => !r.raw_slug) ??
    null;

  // ✅ visible cards (exclude header row itself + hidden states)
  items = normalized.filter((r) => {
    if (!r.slug || !r.title) return false;
    if (header && r === header) return false;
    const s = (r.status ?? "").toLowerCase();
    return !["draft","hidden","inactive"].includes(s);
  });

  // Optional build-time logs (helpful on Netlify)
  console.log("[types/index] url:", url);
  console.log("[types/index] rows:", rows.length, "items:", items.length);
  console.log("[types/index] header:", header?.title ?? "(none)");
  console.log("[types/index] header.seo_title:", header?.seo_title ?? "(none)");
  console.log("[types/index] header.seo_description:", header?.seo_description ? "(present)" : "(none)");
} catch (e:any) {
  error = e?.message || String(e);
}

const heroSrc = header?.hero_img ? heroPath(header.hero_img) : "";

// ✅ SEO pulled from header row, with sensible fallbacks
const pageSeoTitle = header?.seo_title || header?.title || "Property Types";
const pageSeoDesc  = header?.seo_description || header?.summary || "";
---

<Site showHeader={true} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>

  {heroSrc && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={heroSrc} fetchpriority="high" />
    </Fragment>
  )}

  <section class="hero-bleed">
    {heroSrc && (
      <img
        src={heroSrc}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
      />
    )}
  </section>

  <div class="container intro">
    <h1>{header?.title || pageSeoTitle}</h1>
    {(header?.summary || pageSeoDesc) && <p>{header?.summary || pageSeoDesc}</p>}
  </div>

  <div class="container"><h2>hi there skeleton</h2></div>

  <!-- ✅ MRP container with skeleton placeholder -->

  <div class="container">
  <div id="mrp-container" aria-busy="true">
    <!-- Skeleton -->
    <div id="mrp-skeleton" class="mrp-skeleton grid" aria-hidden="true">
      <div class="s-card">
        <div class="s-thumb shimmer"></div>
        <div class="s-line shimmer" style="width:70%"></div>
        <div class="s-line shimmer" style="width:45%"></div>
      </div>
      <!-- ...repeat a few cards... -->
    </div>

    <!-- Dedicated mount for IDX injection -->
    <div id="mrp-mount"></div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.getElementById("mrp-container");
    const skeleton  = document.getElementById("mrp-skeleton");
    const mount     = document.getElementById("mrp-mount");

    if (!container || !skeleton || !mount) return;

    const removeSkeleton = () => {
      skeleton.style.display = "none";
      container.setAttribute("aria-busy", "false");
    };

    const loadMrp = () => {
      if (document.getElementById("mrpscript")) return; // prevent double-load
      const s = document.createElement("script");
      s.id  = "mrpscript";
      s.src = "https://idx.myrealpage.com/wps/rest/66350/l/idx2/mylistings/tmpl~v2,noframe~true/-/mylistings(all-office-274487).def/in.js";
      s.async = true;

      // Fallback: if the script fires 'load' but no DOM injected yet, the MO will still catch it.
      s.addEventListener("load", () => {
        // no-op, MutationObserver below will handle DOM insertion reliably
      });
      s.addEventListener("error", () => {
        // keep skeleton visible or swap to an error state if you want
        console.error("MRP script failed to load");
      });

      mount.appendChild(s);
    };

    // Hide skeleton the moment real nodes (not just the script tag) appear under mount
    const mo = new MutationObserver(() => {
      const hasRealContent = Array.from(mount.children).some(
        n => n.tagName !== "SCRIPT"
      ) || mount.querySelector("*:not(script)");
      if (hasRealContent) {
        removeSkeleton();
        mo.disconnect();
      }
    });
    mo.observe(mount, { childList: true, subtree: true });

    // Lazy-load when near viewport
    if ("IntersectionObserver" in window) {
      const io = new IntersectionObserver((entries, obs) => {
        if (entries[0]?.isIntersecting) {
          loadMrp();
          obs.disconnect();
        }
      }, { rootMargin: "200px 0px" });
      io.observe(container);
    } else {
      loadMrp();
    }
  });
</script>


  
  <div class="container">
    <section class="grid-wrap">
      {error ? (
        <p class="error">Error: {error}</p>
      ) : items.length === 0 ? (
        <p>No property types yet. Check your <code>PUBLIC_TYPES_JSON</code> or add rows to your sheet.</p>
      ) : (
        <div class="grid">
          {items.map((n) => {
            const primary = n.hero_img ? heroPath(n.hero_img) : "";
            const altBase = primary.includes("/images/")
              ? primary.replace("/images/", "/img/")
              : primary.replace("/img/", "/images/");
            const filename = (primary.split("/").pop() || "").trim();
            const finalFallback = filename ? `/img/hero/${filename}` : "";

            return (
              <a class="card" href={`/types/${n.slug}`}>
                <div class="thumb">
                  {primary ? (
                    <img
                      src={primary}
                      alt={n.title}
                      loading="lazy"
                      decoding="async"
                      onerror={`
                        if (this.dataset.step!=='1'){ this.dataset.step='1'; this.src='${altBase}'; }
                        else if (this.dataset.step!=='2' && '${finalFallback}'){ this.dataset.step='2'; this.src='${finalFallback}'; }
                        else {
                          const ph = document.createElement('div');
                          ph.className = 'ph';
                          ph.setAttribute('aria-hidden','true');
                          ph.textContent = 'No image';
                          this.replaceWith(ph);
                        }
                      `}
                    />
                  ) : (
                    <div class="ph" aria-hidden="true">No image</div>
                  )}
                </div>
                <div class="body">
                  <strong>{n.title}</strong>
                  {n.summary && <p>{(n.summary).split(/\s+/).slice(0,10).join(" ") + ((n.summary).split(/\s+/).length>10 ? "…" : "")}</p>}
                </div>
              </a>
            );
          })}
        </div>
      )}
    </section>
  </div>

  <style>
    .container { max-width: 1200px; margin-left: auto; margin-right: auto; padding: 0 1rem; }
    .intro { margin-top: 24px; margin-bottom: 20px; text-align: left; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin: 0 0 8px 0; color: #111827; }
    .intro p { font-size: 1rem; line-height: 1.6; margin: 0; color: #1f2937; }

    .grid-wrap { margin-top: 24px; }
    .grid {
      display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 16px;
    }

    .card {
      display:flex; flex-direction:column; background:#fff; border-radius:12px; overflow:hidden;
      border:1px solid #eee; text-decoration:none; color:inherit; box-shadow:0 1px 3px rgba(0,0,0,0.05);
      transform:translateY(0); transition: transform .25s ease, box-shadow .25s ease;
    }
    .card:hover { transform: translateY(-6px); box-shadow: 0 6px 16px rgba(0,0,0,0.12); }

    .thumb { aspect-ratio:16/9; background:#f6f6f6; display:grid; place-items:center; }
    .thumb img { width:100%; height:100%; object-fit:cover; display:block; }

    .ph { font-size:12px; color:#999; }
    .body { padding:12px; }
    .body p { margin:.4rem 0 0 0; color:#555; font-size:.95rem; line-height:1.35; }

    .error { color:#b00; }

    /* ✅ Reserve space to avoid layout shift */
    #mrp-container { min-height: 600px; }

    /* ✅ Skeleton styles */
    .mrp-skeleton.grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 16px;
      padding: 8px 0;
    }
    .s-card {
      border:1px solid #eee; border-radius:12px; overflow:hidden; background:#fff;
      box-shadow:0 1px 3px rgba(0,0,0,0.05);
      display:flex; flex-direction:column; padding:0 12px 12px 12px;
    }
    .s-th
