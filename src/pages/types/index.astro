---
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

const url = import.meta.env.PUBLIC_TYPES_JSON;

type Row = {
  raw_slug?: string;
  title?: string;
  summary?: string;
  hero_img?: string;
  status?: string;
  seo_title?: string;
  seo_description?: string;
  slug?: string;
};

let items: Row[] = [];
let header: Row | null = null;
let error: string | null = null;

try {
  if (!url) throw new Error("Missing PUBLIC_TYPES_JSON in .env (restart dev).");
  const raw = await getJson<any>(url);

  const rows: any[] =
    Array.isArray(raw) ? raw :
    Array.isArray(raw?.data) ? raw.data :
    Array.isArray(raw?.rows) ? raw.rows :
    [];

  const get = (r:any,k:string)=>
    (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

  const normalize = (r:any): Row => {
    const title = get(r,"title");
    const raw_slug = get(r,"slug");
    const computedSlug = (title||"").toLowerCase()
      .replace(/&/g,"-and-")
      .replace(/[^a-z0-9]+/g,"-")
      .replace(/^-+|-+$/g,"");

    return {
      raw_slug,
      title,
      summary: get(r,"summary"),
      hero_img: get(r,"hero_img"),
      status: get(r,"status"),
      seo_title: get(r,"seo_title"),
      seo_description: get(r,"seo_description"),
      slug: raw_slug || computedSlug,
    };
  };

  const normalized = rows.map(normalize);

  header =
    normalized.find(r => (r.raw_slug ?? "").toLowerCase() === "index") ??
    normalized.find(r => (r.status ?? "").toLowerCase() === "header") ??
    normalized.find(r => !r.raw_slug) ??
    null;

  items = normalized.filter((r) => {
    if (!r.slug || !r.title) return false;
    if (header && r === header) return false;
    const s = (r.status ?? "").toLowerCase();
    return !["draft","hidden","inactive"].includes(s);
  });
} catch (e:any) {
  error = e?.message || String(e);
}

const heroSrc = header?.hero_img ? heroPath(header.hero_img) : "";
const pageSeoTitle = header?.seo_title || header?.title || "Property Types";
const pageSeoDesc  = header?.seo_description || header?.summary || "";

/** ðŸ‘‰ Your exact MRP embed URL */
const MRP_SCRIPT_SRC =
  "https://idx.myrealpage.com/wps/rest/66350/l/idx2/recip/tmpl~v2,noframe~true/-/search-1425912.def/in.js";
---

<Site showHeader={true} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>

  {heroSrc && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={heroSrc} fetchpriority="high" />
    </Fragment>
  )}

  <section class="hero-bleed">
    {heroSrc && (
      <img
        src={heroSrc}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
      />
    )}
  </section>

  <div class="container intro">
    <h1>{header?.title || pageSeoTitle}</h1>
    {(header?.summary || pageSeoDesc) && <p>{header?.summary || pageSeoDesc}</p>}
  </div>

  <div class="container"><h2>Is There Any Shift?</h2></div>

  <!-- =========================
       MRP â€” ZERO-TRANSITION OVERLAY
       ========================= -->
  <div class="container">
    <div id="mrp-wrap" aria-busy="true">
      <!-- Overlay (absolute; contributes no height) -->
      <div id="mrp-skeleton" role="status" aria-live="polite" aria-label="Loading listings">
        <div class="skel">
          <div class="bar" style="width: 42%"></div>
          <div class="bar" style="width: 68%"></div>
          <div class="card"></div>
          <div class="card"></div>
          <div class="card"></div>
        </div>
      </div>

      <!-- Mount point for MRP injection -->
      <div id="mrp-mount"></div>
    </div>
  </div>

  <script is:inline>
    (function () {
      const WRAP = document.getElementById('mrp-wrap');
      const SKELETON = document.getElementById('mrp-skeleton');
      const MOUNT = document.getElementById('mrp-mount');
      if (!WRAP || !SKELETON || !MOUNT) return;

      let hidden = false;
      let idleTimer;

      function widgetLooksReady() {
        // script + at least one non-script child, or any non-script descendant
        return MOUNT.childElementCount > 1 || MOUNT.querySelector('*:not(script)');
      }

      function hideOverlayNow() {
        if (hidden) return;
        hidden = true;
        WRAP.setAttribute('aria-busy', 'false');
        // no transition; avoid blended repaints
        SKELETON.style.visibility = 'hidden';
        SKELETON.style.opacity = '0';
        // remove next frame to keep paint stable
        requestAnimationFrame(() => {
          if (SKELETON && SKELETON.parentNode) SKELETON.remove();
        });
      }

      function scheduleHideIfReady() {
        if (!widgetLooksReady() || hidden) return;
        clearTimeout(idleTimer);
        idleTimer = setTimeout(hideOverlayNow, 350); // wait for DOM to settle
      }

      const observer = new MutationObserver(scheduleHideIfReady);
      observer.observe(MOUNT, { childList: true, subtree: true });

      function loadMrpScript() {
        if (document.getElementById('mrp-script')) return;
        const s = document.createElement('script');
        s.id = 'mrp-script';
        s.src = MRP_SCRIPT_SRC;
        s.async = true;
        s.addEventListener('load', scheduleHideIfReady);
        s.addEventListener('error', () => console.error("MRP script failed to load"));
        MOUNT.appendChild(s);
      }

      if ('IntersectionObserver' in window) {
        const io = new IntersectionObserver((entries, obs) => {
          if (entries[0]?.isIntersecting) {
            loadMrpScript();
            obs.disconnect();
          }
        }, { rootMargin: '200px 0px' });
        io.observe(WRAP);
      } else {
        loadMrpScript();
      }

      // Hard fallback (never shimmer forever)
      setTimeout(() => {
        if (!hidden) hideOverlayNow();
      }, 8000);
    })();
  </script>

  <!-- ======================
       Your existing grid/cards
       ====================== -->
  <div class="container">
    <section class="grid-wrap">
      {error ? (
        <p class="error">Error: {error}</p>
      ) : items.length === 0 ? (
        <p>No property types yet.</p>
      ) : (
        <div class="grid">
          {items.map((n) => {
            const primary = n.hero_img ? heroPath(n.hero_img) : "";
            return (
              <a class="card" href={`/types/${n.slug}`}>
                <div class="thumb">
                  {primary ? (
                    <img src={primary} alt={n.title} loading="lazy" decoding="async" />
                  ) : (
                    <div class="ph" aria-hidden="true">No image</div>
                  )}
                </div>
                <div class="body">
                  <strong>{n.title}</strong>
                  {n.summary && <p>{n.summary.split(/\s+/).slice(0,10).join(" ") + (n.summary.split(/\s+/).length>10 ? "â€¦" : "")}</p>}
                </div>
              </a>
            );
          })}
        </div>
      )}
    </section>
  </div>

  <style>
    .container { max-width: 1200px; margin: 0 auto; padding: 0 1rem; }
    .intro { margin-top: 24px; margin-bottom: 20px; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin-bottom: 8px; }
    .intro p { font-size: 1rem; line-height: 1.6; }

    .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 16px; }
    .card { display:flex; flex-direction:column; background:#fff; border-radius:12px; overflow:hidden;
            border:1px solid #eee; text-decoration:none; color:inherit; box-shadow:0 1px 3px rgba(0,0,0,0.05);
            transition: transform .25s ease, box-shadow .25s ease; }
    .card:hover { transform: translateY(-6px); box-shadow: 0 6px 16px rgba(0,0,0,0.12); }

    .thumb { aspect-ratio:16/9; background:#f6f6f6; }
    .thumb img { width:100%; height:100%; object-fit:cover; display:block; }

    .body { padding:12px; }
    .body p { margin-top:.4rem; color:#555; font-size:.95rem; line-height:1.35; }

    .error { color:#b00; }

    /* ===== Zero-transition overlay + reserved space ===== */
    :root { --mrp-min-height: 980px; } /* bump if needed; keeps layout steady */
    #mrp-wrap { position: relative; min-height: var(--mrp-min-height); }
    #mrp-mount { contain: layout style; }

    #mrp-skeleton {
      position: absolute; inset: 0;
      display: grid; place-items: center;
      background: #f8fafc;      /* static, no shimmer */
      opacity: 1;               /* no CSS transition to avoid flashing */
      visibility: visible;
      pointer-events: none;     /* always ignore pointer */
      z-index: 10;
    }
    .skel { width: min(1100px, 92vw); display: grid; gap: 16px; }
    .skel .bar { height: 18px; border-radius: 6px; background: #eef2f7; }
    .skel .card { height: 220px; border-radius: 12px; background: #f1f5f9; }

    @media (min-width: 1024px) { :root { --mrp-min-height: 1100px; } }
  </style>
</Site>
