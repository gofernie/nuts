---
// File: src/pages/types/index.astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

const PATH_BASE = "/types";

/* ---------- helpers ---------- */
const RESERVED = new Set(["index","page","pages","all","view","list"]);
const get = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

const visible = (r:any) => {
  const s = get(r,"status").toLowerCase();
  const rawSlug = get(r,"slug").toLowerCase();
  return s !== "hidden" && s !== "inactive" && rawSlug !== "index" && !RESERVED.has(rawSlug);
};

type Row = {
  slug?: string;
  title?: string;
  summary?: string;
  long_copy?: string;
  hero_img?: string;
  status?: string;
  seo_title?: string;
  seo_description?: string;
  sort?: number|string;
};

let items: Row[] = [];
let header: Row | null = null;
let error: string | null = null;

try {
  const url = import.meta.env.PUBLIC_TYPES_JSON;
  if (!url) throw new Error("Missing PUBLIC_TYPES_JSON in .env (restart dev).");

  const raw = await getJson<any>(url);
  const rows:any[] =
    Array.isArray(raw) ? raw :
    Array.isArray(raw?.data) ? raw.data :
    Array.isArray(raw?.rows) ? raw.rows : [];

  // header row (index/header/first with summary)
  const headerCandidates = rows.filter((r:any) => {
    const slug = get(r,"slug").toLowerCase();
    const status = get(r,"status").toLowerCase();
    const hasSummary = !!(get(r,"summary") || get(r,"long_copy") || get(r,"seo_description") || get(r,"description"));
    return slug === "index" || status === "header" || hasSummary;
  });

  header =
    headerCandidates.find(r => get(r,"slug").toLowerCase() === "index") ??
    headerCandidates.find(r => get(r,"status").toLowerCase() === "header") ??
    headerCandidates[0] ?? null;

  items = rows
    .filter(r => visible(r))
    .map(r => ({
      slug: get(r,"slug") || slugify(get(r,"title")),
      title: get(r,"title"),
      summary: get(r,"summary"),
      hero_img: get(r,"hero_img"),
      sort: +get(r,"sort") || Number.MAX_SAFE_INTEGER,
    }))
    .filter(r => r.slug && r.title)
    .sort((a,b) => (Number(a.sort) - Number(b.sort)) || a.title!.localeCompare(b.title!));

} catch (e:any) {
  error = e?.message || "Failed to load data.";
}

const pageTitle = get(header,"title") || "Property Types in Fernie";
const pageSummary =
  get(header,"summary") || get(header,"long_copy") || get(header,"seo_description") || get(header,"description") || "";
const heroImg = get(header,"hero_img");
const seoTitle = get(header,"seo_title") || pageTitle;
const seoDesc  = get(header,"seo_description") || pageSummary;

const SUMMARY_IS_HTML = false;
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc}>
  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={pageTitle}
    containerMax={1200}
    containerPad={12}
    flush={false}
  />

  {pageSummary && (
    <div class="container">
      <div class="summary-card">
        {SUMMARY_IS_HTML
          ? <div class="lead" set:html={pageSummary}></div>
          : <p class="lead">{pageSummary}</p>}
      </div>
    </div>
  )}

  <div class="container">
    {error && <p class="err">{error}</p>}

    {!error && (
      <div class="grid">
        {items.map((it) => {
          const img = it.hero_img ? heroPath(it.hero_img) : "";
          return (
            <a class="card" href={`${PATH_BASE}/${it.slug}`} data-astro-prefetch="hover" aria-label={it.title}>
              <div class="thumb">
                {img ? <img src={img} alt={it.title} loading="lazy" decoding="async" /> : <div class="ph">No image</div>}
              </div>
              <div class="body">
                <h3 class="card-title">{it.title}</h3>
                {it.summary && <p>{it.summary}</p>}
              </div>
            </a>
          );
        })}
      </div>
    )}
  </div>

  <style>
    .container{ max-width:1200px; margin-inline:auto; padding-inline:12px; }

    /* summary container */
    .summary-card{
      background:#fff; border:1px solid #e5e7eb; border-radius:14px;
      padding:20px; margin-top:16px; box-shadow:0 1px 3px rgba(0,0,0,0.05);
    }
    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }

    .err{ color:#b91c1c; background:#fee2e2; padding:.75rem 1rem; border-radius:.5rem; margin-top:12px; }

    .grid{
      display:grid;
      grid-template-columns: repeat(4, minmax(0,1fr));
      gap:16px;
      margin-top:18px;
    }
    @media (max-width:1200px){ .grid{ grid-template-columns: repeat(3, minmax(0,1fr)); } }
    @media (max-width:900px){  .grid{ grid-template-columns: repeat(2, minmax(0,1fr)); } }
    @media (max-width:560px){  .grid{ grid-template-columns: 1fr; } }

    .card{
      display:flex; flex-direction:column;
      background:#fff; border:1px solid #e5e7eb; border-radius:14px;
      overflow:hidden; text-decoration:none; color:inherit;
      box-shadow:0 1px 3px rgba(0,0,0,0.05);
      transform: translateY(0);
      transition: transform .25s ease, box-shadow .25s ease, border-color .15s ease;
    }
    .card:hover{
      transform: translateY(-6px);
      box-shadow: 0 6px 16px rgba(0,0,0,0.12);
      border-color:#d1d5db;
    }

    .thumb{
      position:relative; aspect-ratio:16/9;
      background:#f6f6f6; display:grid; place-items:center; overflow:hidden;
    }
    .thumb img{ width:100%; height:100%; object-fit:cover; display:block; }
    .ph{ font-size:12px; color:#999; }

    /* match xtraarea card body padding */
    .card .body{
      padding: 12px;
    }

    /* remove UA default heading margins so spacing is identical */
    .card .body h1,
    .card .body h2,
    .card .body h3{
      margin:0;
      padding:0;
    }

    /* âœ… card titles now match xtraarea exactly */
    .card .body .card-title{
      margin-top: 4px;
      margin-bottom: 6px;
      font-size: clamp(1rem, 1.7vw, 1.1rem);
      font-weight: 700;
      line-height: 1.25;
      color:#111827;
      letter-spacing: -0.2px;
    }

    .card .body p{
      margin:0;
      color:#555;
      font-size:0.925rem;
      line-height:1.4;
      display:-webkit-box;
      -webkit-line-clamp:2;
      -webkit-box-orient:vertical;
      overflow:hidden;
    }
  </style>
</Site>
