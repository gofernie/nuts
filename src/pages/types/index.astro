---
// File: src/pages/types/index.astro
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

const url = import.meta.env.PUBLIC_TYPES_JSON;

type Row = {
  raw_slug?: string;
  title?: string;
  summary?: string;
  hero_img?: string;
  status?: string;
  seo_title?: string;
  seo_description?: string;
  slug?: string;
};

let items: Row[] = [];
let header: Row | null = null;
let error: string | null = null;

try {
  if (!url) throw new Error("Missing PUBLIC_TYPES_JSON in .env (restart dev).");
  const raw = await getJson<any>(url);

  const rows: any[] =
    Array.isArray(raw) ? raw :
    Array.isArray(raw?.data) ? raw.data :
    Array.isArray(raw?.rows) ? raw.rows :
    [];

  const get = (r:any,k:string)=>
    (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

  const normalize = (r:any): Row => {
    const title = get(r,"title");
    const raw_slug = get(r,"slug");
    const computedSlug = (title||"").toLowerCase()
      .replace(/&/g,"-and-")
      .replace(/[^a-z0-9]+/g,"-")
      .replace(/^-+|-+$/g,"");

    return {
      raw_slug,
      title,
      summary: get(r,"summary"),
      hero_img: get(r,"hero_img"),
      status: get(r,"status"),
      seo_title: get(r,"seo_title"),
      seo_description: get(r,"seo_description"),
      slug: raw_slug || computedSlug,
    };
  };

  const normalized = rows.map(normalize);

  header =
    normalized.find(r => (r.raw_slug ?? "").toLowerCase() === "index") ??
    normalized.find(r => (r.status ?? "").toLowerCase() === "header") ??
    normalized.find(r => !r.raw_slug) ?? null;

  items = normalized.filter((r) => {
    if (!r.slug || !r.title) return false;
    if (header && r === header) return false;
    const s = (r.status ?? "").toLowerCase();
    return !["draft","hidden","inactive"].includes(s);
  });
} catch (e:any) {
  error = e?.message || String(e);
}

const heroSrc = header?.hero_img ? heroPath(header.hero_img) : "";
const pageSeoTitle = header?.seo_title || header?.title || "Property Types";
const pageSeoDesc  = header?.seo_description || header?.summary || "";

/* RealtyVis block id */
const RV_BLOCK_ID = "MQP2VMLT-J7GGZNVR";
---

<Site showHeader={true} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  {heroSrc && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={heroSrc} fetchpriority="high" />
    </Fragment>
  )}

  <section class="hero-bleed">
    {heroSrc && (
      <img
        src={heroSrc}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
      />
    )}
  </section>

  <div class="container intro">
    <h1>{header?.title || pageSeoTitle}</h1>
    {(header?.summary || pageSeoDesc) && <p>{header?.summary || pageSeoDesc}</p>}
  </div>

  <!-- RealtyVis (centered with container, no bg/padding) -->
  <section class="rv-section rv-nopad">
    <div class="container">
      <div id="rv-wrapper" data-rv-block-id={RV_BLOCK_ID}>
        <!-- skeleton -->
        <div id="rv-skeleton" aria-hidden="true" class="rv-skel">
          <div class="bar" style="width:45%"></div>
          <div class="card"></div>
          <div class="card"></div>
        </div>
        <!-- mount point -->
        <div id="rv-mount"></div>
      </div>
    </div>
  </section>

  <!-- ðŸ”§ Keep RV aligned across all breakpoints -->
  <style is:global>
    /* zero any theme spacing variables RV might use */
    #rv-wrapper {
      --rv-page-padding: 0px;
      --rv-container-padding: 0px;
      --rv-gutter-x: 0px;
      --rv-gutter-inline: 0px;
      overflow-x: clip; /* avoid subpixel nudges */
    }

    /* kill section/wrapper spacing/bg */
    .rv-section.rv-nopad { background: transparent !important; padding: 0 !important; margin: 0 !important; }
    .rv-section.rv-nopad #rv-wrapper {
      background: transparent !important;
      border: 0 !important;
      box-shadow: none !important;
      border-radius: 0 !important;
      padding: 0 !important;
      margin: 0 !important;
      min-height: 0 !important;
    }
    .rv-section.rv-nopad .container { /* keep your page container padding; remove this to go edge-to-edge */
      padding-left: 1rem;
      padding-right: 1rem;
    }

    /* nuke RV inner gutters so edges align with .container text */
    #rv-wrapper .rv-block,
    #rv-wrapper .rv-block :is(.rv-gridView, .rv-filterView, .rv-results, .rv-content, .rv-items, .rv-root, .rv-container) {
      margin-inline: 0 !important;
      padding-inline: 0 !important;
    }

    /* ensure top is snug under the intro */
    #rv-wrapper .rv-block:first-child { margin-top: 0 !important; padding-top: 0 !important; }
  </style>

  <!-- Cards grid -->
  <div class="container">
    <section class="grid-wrap">
      {error ? (
        <p class="error">Error: {error}</p>
      ) : items.length === 0 ? (
        <p>No property types yet.</p>
      ) : (
        <div class="grid">
          {items.map((n) => {
            const primary = n.hero_img ? heroPath(n.hero_img) : "";
            return (
              <a class="card" href={`/types/${n.slug}`}>
                <div class="thumb">
                  {primary ? (
                    <img src={primary} alt={n.title} loading="lazy" decoding="async" />
                  ) : (
                    <div class="ph" aria-hidden="true">No image</div>
                  )}
                </div>
                <div class="body">
                  <strong>{n.title}</strong>
                  {n.summary && <p>{n.summary.split(/\s+/).slice(0,10).join(" ") + (n.summary.split(/\s+/).length>10 ? "â€¦" : "")}</p>}
                </div>
              </a>
            );
          })}
        </div>
      )}
    </section>
  </div>

  <!-- Lazy load the embed -->
  <script is:inline>
    (() => {
      const WRAP_ID = "rv-wrapper";
      const SCRIPT_ID = "rv-script";
      const CDN = "https://cdn.realtyvis.com/js/embed.js";

      const wrap = document.getElementById(WRAP_ID);
      if (!wrap) return;

      const blockId = wrap.getAttribute("data-rv-block-id");
      const mount = document.getElementById("rv-mount");
      const skeleton = document.getElementById("rv-skeleton");

      const init = () => {
        if (!mount || !blockId) return;
        if (mount.querySelector("[data-rv-block]")) return; // already injected

        mount.innerHTML = `<div data-rv-block="${blockId}"></div>`;

        const done = () => skeleton?.remove();

        if (!document.getElementById(SCRIPT_ID)) {
          const s = document.createElement("script");
          s.id = SCRIPT_ID;
          s.src = CDN;
          s.async = true;
          s.onload = () => setTimeout(done, 50);
          s.onerror = done;
          document.body.appendChild(s);
        } else {
          setTimeout(done, 200);
        }
      };

      if ("IntersectionObserver" in window) {
        const io = new IntersectionObserver((es) => {
          es.forEach(e => { if (e.isIntersecting) { init(); io.disconnect(); } });
        }, { rootMargin: "300px 0px" });
        io.observe(wrap);
      } else {
        setTimeout(init, 800);
      }
    })();
  </script>

  <!-- Page styles -->
  <style>
    .container { max-width: 1200px; margin: 0 auto; padding: 0 1rem; }

    .intro { margin-top: 24px; margin-bottom: 16px; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin: 0 0 8px; color:#111827; }
    .intro p  { font-size: 1rem; line-height: 1.6; margin: 0; color:#1f2937; }

    .grid-wrap { margin-top: 24px; }
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 16px;
    }
    .card {
      display:flex; flex-direction:column; background:#fff; border-radius:12px; overflow:hidden;
      border:1px solid #eee; text-decoration:none; color:inherit;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      transform: translateY(0);
      transition: transform .25s ease, box-shadow .25s ease;
    }
    .card:hover { transform: translateY(-6px); box-shadow: 0 6px 16px rgba(0,0,0,0.12); }
    .thumb { aspect-ratio: 16/9; background:#f6f6f6; display:grid; place-items:center; }
    .thumb img { width:100%; height:100%; object-fit:cover; display:block; }
    .ph { font-size:12px; color:#999; }
    .body { padding:12px; }
    .body p { margin:.4rem 0 0 0; color:#555; font-size:.95rem; line-height:1.35; }
    .error { color:#b00; }

    /* simple skeleton */
    .rv-skel { display:grid; gap:14px; }
    .rv-skel .bar  { height:18px; border-radius:6px; background:#eef2f7; }
    .rv-skel .card { height:220px; border-radius:12px; background:#f1f5f9; }
  </style>
  <style is:global id="rv-fix-css">
  /* zero out RV spacing vars just in case */
  #rv-wrapper {
    --rv-page-padding: 0 !important;
    --rv-container-padding: 0 !important;
    --rv-gutter-x: 0 !important;
    --rv-gutter-inline: 0 !important;
  }

  /* nuke section/wrapper spacing/bg */
  .rv-section.rv-nopad { background: transparent !important; padding: 0 !important; margin: 0 !important; }
  .rv-section.rv-nopad #rv-wrapper {
    background: transparent !important;
    border: 0 !important;
    box-shadow: none !important;
    border-radius: 0 !important;
    padding: 0 !important;
    margin: 0 !important;
    min-height: 0 !important;
  }

  /* kill inner gutters across breakpoints (high specificity + !important) */
  #rv-wrapper .rv-block,
  #rv-wrapper .rv-block .rv-gridView,
  #rv-wrapper .rv-block .rv-filterView,
  #rv-wrapper .rv-block .rv-results,
  #rv-wrapper .rv-block .rv-content,
  #rv-wrapper .rv-block .rv-items,
  #rv-wrapper .rv-block .rv-root,
  #rv-wrapper .rv-block .rv-container {
    margin-left: 0 !important;
    margin-right: 0 !important;
    padding-left: 0 !important;
    padding-right: 0 !important;
  }

  /* ensure first child hugs the intro */
  #rv-wrapper .rv-block:first-child { margin-top: 0 !important; padding-top: 0 !important; }

  /* avoid subpixel overflow nudges */
  #rv-wrapper { overflow-x: clip; }
</style>

</Site>
