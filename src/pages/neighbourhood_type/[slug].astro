---
// File: src/pages/neighbourhood_type/[slug].astro
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";
import RealtyVis from "../../components/RealtyVis.astro";

/* --------------- helpers (define BEFORE any use) --------------- */
const getField = (r:any, k:string) =>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const slugify = (s:string) =>
  s.toLowerCase()
    .replace(/&/g, "-and-")
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "");

/* --------------- data --------------- */
export async function getStaticPaths() {
  // Keep SOURCE_URL here so it's always in scope
  const SOURCE_URL =
    import.meta.env.PUBLIC_NEIGHBOURHOOD_TYPE_JSON ||
    import.meta.env.PUBLIC_CITY_TYPES_JSON ||
    import.meta.env.PUBLIC_TYPES_JSON ||
    import.meta.env.PUBLIC_SHEET_JSON ||
    "";

  if (!SOURCE_URL) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(SOURCE_URL);
    rows = Array.isArray(raw)
      ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows
      : [];
  } catch {
    return [];
  }

  const items = rows
    .map((r:any) => {
      const rawSlug = getField(r, "slug");
      const title = getField(r, "title");
      const slug = rawSlug || (title ? slugify(title) : "");
      if (!slug) return null;
      return { params: { slug }, props: { row: r } };
    })
    .filter(Boolean);

  return items;
}

export async function get({ props }) {
  const row = props?.row || {};
  const title = getField(row, "title") || "Neighbourhood Type";
  const summary = getField(row, "summary");

  // RealtyVis config from row/env
  const rvBlock =
    getField(row, "rv_block") ||
    getField(row, "rv_block_id") ||
    getField(row, "rvblock") ||
    getField(row, "block_id");

  const rvScript =
    getField(row, "rv_script") ||
    (import.meta.env.PUBLIC_RV_SCRIPT || "");

  const maybeUrl =
    getField(row, "rv_url") ||
    getField(row, "embed_url") ||
    getField(row, "spare_1");

  const rvEmbedUrl = /^https?:\/\//i.test(maybeUrl) ? maybeUrl : "";

  return { props: { row, title, summary, rvBlock, rvScript, rvEmbedUrl } };
}
---

<Site title={title} seo_title={title} seo_description={summary}>
  <!-- HERO -->
  <div slot="hero" class="hero">
    <picture>
      <img
        src={heroPath(Astro.props.row?.hero_img)}
        alt={title}
        loading="eager"
        fetchpriority="high"
        style="width:100%;height:50vh;object-fit:cover;object-position:center;"
      />
    </picture>
    <div class="hero-overlay">
      <h1 class="hero-title">{title}</h1>
      {summary && <p class="hero-summary">{summary}</p>}
    </div>
  </div>

  <main class="wrap">
    {summary && (
      <section class="prose mb-10">
        <p>{summary}</p>
      </section>
    )}

    <!-- REALTYVIS (lazy hydration on scroll) -->
    {(Astro.props.rvEmbedUrl || Astro.props.rvBlock) ? (
      <section id="listings" class="mb-16">
        <h2 class="h2 mb-4">Current Listings</h2>
        <RealtyVis
          client:visible
          blockId={Astro.props.rvBlock}
          scriptUrl={Astro.props.rvScript}
          embedUrl={Astro.props.rvEmbedUrl}
          minHeight="900px"
        />
      </section>
    ) : (
      <section class="mb-16">
        <div class="note">
          <strong>No RealtyVis config found.</strong>
          Add <code>rv_block</code> (or <code>rv_url</code>) to this row, or set <code>PUBLIC_RV_SCRIPT</code> in your <code>.env</code>.
        </div>
      </section>
    )}
  </main>
</Site>

<style>
  .wrap { max-width: var(--container-max, 1250px); margin-inline: auto; padding-inline: var(--container-pad, 20px); }

  .hero { position: relative; }
  .hero-overlay {
    position: absolute; inset: 0;
    display: grid; place-items: end start;
    padding: clamp(12px, 3vw, 28px);
    background: linear-gradient(180deg, rgba(0,0,0,0.0) 30%, rgba(0,0,0,0.35) 75%);
  }
  .hero-title {
    color: white; font-size: clamp(24px, 4vw, 44px); line-height: 1.05; margin: 0 0 6px 0;
  }
  .hero-summary { color: #eef0f2; max-width: 70ch; margin: 0; }

  .note {
    background: #fff8e1; border: 1px solid #ffe19c; color: #7c5b00;
    padding: 12px 14px; border-radius: 10px;
  }
</style>
