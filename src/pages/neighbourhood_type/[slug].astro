---
// File: src/pages/neighbourhood_type/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";
import ListingButtons from "../../components/ListingButtons.astro";

/* ---------- tiny util ---------- */
const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

/* ---------- static paths ---------- */
export async function getStaticPaths() {
  const url =
    import.meta.env.PUBLIC_NEIGHBOURHOOD_TYPE_JSON ||
    import.meta.env.PUBLIC_TYPES_JSON ||
    import.meta.env.PUBLIC_SHEET_JSON || "";

  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch {}

  const items = rows.map((r:any) => {
    const status  = String(r?.status ?? "").trim().toLowerCase();
    const rawSlug = String(r?.slug ?? "").trim().toLowerCase();
    if (status === "hidden" || status === "inactive" || rawSlug === "index") return null;

    const title  = String(r?.title ?? "").trim();
    const nhType = String(r?.neighbourhood_type ?? "").trim();
    const typ    = String(r?.type ?? "").trim();
    const cat    = String(r?.category ?? "").trim();
    const slug = rawSlug || slugify(title || nhType || typ || cat);
    return slug ? { params: { slug } } : null;
  }).filter(Boolean);

  return items;
}

/* ---------- page data ---------- */
const slugParam = (Astro.params.slug || "").toString().trim().toLowerCase();
const url =
  import.meta.env.PUBLIC_NEIGHBOURHOURHOOD_TYPE_JSON ||
  import.meta.env.PUBLIC_NEIGHBOURHOOD_TYPE_JSON ||
  import.meta.env.PUBLIC_TYPES_JSON ||
  import.meta.env.PUBLIC_SHEET_JSON || "";

let row:any = null;
if (url) {
  try {
    const raw = await getJson<any>(url);
    const rows:any[] = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
    row = rows.find((r:any) => {
      const rawSlug = String(r?.slug ?? "").trim().toLowerCase();
      const title   = String(r?.title ?? "").trim();
      const nhType  = String(r?.neighbourhood_type ?? "").trim();
      const typ     = String(r?.type ?? "").trim();
      const cat     = String(r?.category ?? "").trim();
      return (rawSlug || slugify(title || nhType || typ || cat)).toLowerCase() === slugParam;
    });
  } catch (e) { console.error(e); }
}
if (!row) throw new Error(`Neighbourhood Type slug not found: ${slugParam}`);

const title    = String(row?.title ?? "Neighbourhood Type").trim();
const summary  = String(row?.summary ?? "").trim();
const body     = String(row?.long_copy ?? "").trim();
const heroImg  = String(row?.hero_img ?? "").trim();
const seoTitle = String(row?.seo_title ?? title).trim();
const seoDesc  = String(row?.seo_description ?? summary ?? "").trim();

// buttons from sheet
const buttonsCell = String(row?.spare_2 ?? "").trim();

// listings
const rawCta =
  String(row?.cta1 ?? row?.rv_block ?? "").trim() ||
  String(import.meta.env.PUBLIC_DEFAULT_RV_BLOCK ?? "").trim();
const isRvId    = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i.test(rawCta);
const RV_SCRIPT = import.meta.env.PUBLIC_RV_SCRIPT || "https://cdn.realtyvis.com/js/embed.js";
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc}>
  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    containerPad={12}
    flush={false}
    preload={false}
  />

  {summary && (
    <div class="container summary-wrap">
      <p class="lead">{summary}</p>
    </div>
  )}

  {buttonsCell && (
    <div class="container" style="margin-top:8px;">
      <ListingButtons raw={buttonsCell} />
    </div>
  )}

  {rawCta && (
    <div class="container listings-wrap">
      <h2 class="h2">Current {title} For Sale</h2>
      {isRvId ? (
        <div id="rv-block" data-rv-block={rawCta}></div>
      ) : (
        <div class="rv-html" set:html={rawCta}></div>
      )}
      <script is:inline>
        (function(){
          const RV_URL = "{RV_SCRIPT}";
          function scan(){ try { window.RealtyVis?.scan?.(); } catch(e){} }
          if (!window.__rvScriptLoading && !window.__rvScriptLoaded) {
            window.__rvScriptLoading = true;
            var s = document.createElement('script');
            s.src = RV_URL;
            s.async = true; s.defer = true;
            s.onload = function(){ window.__rvScriptLoaded = true; scan(); };
            document.head.appendChild(s);
          } else if (window.__rvScriptLoaded) scan();
          else setTimeout(scan, 250);
        })();
      </script>
    </div>
  )}

  <!-- âœ… Inline CTA BELOW the listing cards -->
  <div class="container rv-cta-inline" id="rv-cta-inline">
    <div class="rv-cta-inline__copy">
      <h3>Get alerts for new {title}</h3>
      <p>Save this search to receive email updates when matching properties hit the market.</p>
    </div>
    <button type="button" class="rv-cta-inline__btn" id="rv-save-inline">
      ðŸ”” Save This Search
    </button>
  </div>

  <script is:inline>
    (function(){
      const save = document.getElementById('rv-save-inline');
      if (!save) return;

      let tries = 0, max = 40;
      const tick = setInterval(() => {
        tries++;
        if (window.RealtyVis && typeof window.RealtyVis.openSaveSearch === 'function') {
          clearInterval(tick);
          save.addEventListener('click', () => window.RealtyVis.openSaveSearch());
        } else if (tries >= max) {
          clearInterval(tick);
          save.addEventListener('click', () => alert('Still loadingâ€”please try again in a moment.'));
        }
      }, 250);
    })();
  </script>

  {body && (
    <div class="container body-wrap">
      <div class="lead" set:html={body}></div>
    </div>
  )}

  <style>
    .container{ max-width:1200px; margin-inline:auto; padding-inline:12px; }
    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }
    .listings-wrap{ padding-top:16px; padding-bottom:8px; }
    .h2{ font-size: clamp(20px,2.6vw,28px); margin: 0 0 10px; }
    .body-wrap{ padding-top:12px; }

    /* CTA box */
    .rv-cta-inline {
      display: grid;
      grid-template-columns: 1fr auto;
      gap: 14px;
      align-items: center;
      margin-top: 18px;
      padding: 16px;
      border: 1px solid var(--color-border, #e5e7eb);
      background: var(--color-bg, #fafafa);
      border-radius: 10px;
    }
    .rv-cta-inline__copy h3 {
      margin: 0 0 4px;
      font-size: clamp(16px, 2.2vw, 18px);
      color: #111827;
    }
    .rv-cta-inline__copy p {
      margin: 0;
      color: #4b5563;
      font-size: 0.95rem;
    }
    .rv-cta-inline__btn {
      padding: 0.65rem 1rem;
      border-radius: 8px;
      border: 1px solid var(--color-primary-border, #111);
      background: var(--color-primary-bg, #111);
      color: var(--color-on-primary, #fff);
      font-weight: 600;
      cursor: pointer;
      transition: background .2s, transform .06s;
      white-space: nowrap;
    }
    .rv-cta-inline__btn:hover { background: #333; }
    .rv-cta-inline__btn:active { transform: translateY(1px); }

    @media (max-width: 640px) {
      .rv-cta-inline { grid-template-columns: 1fr; text-align: center; }
      .rv-cta-inline__btn { justify-self: center; width: 100%; }
    }
  </style>
</Site>
