---
/* File: src/pages/neighbourhood_type/[slug].astro] */
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* ---------------- getStaticPaths ---------------- */
export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_NEIGHBOURHOOD_TYPE_JSON; // ➜ view_neighbourhood_type
  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows
      : [];
  } catch {
    return [];
  }

  const get = (r:any, k:string) =>
    (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "")
      .toString()
      .trim();

  const slugify = (s:string) =>
    String(s || "")
      .toLowerCase()
      .replace(/&/g, "-and-")
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/^-+|-+$/g, "");

  const items = rows
    .map((r:any) => {
      const explicit = get(r, "slug");
      const fallback = slugify(
        [get(r,"city"), get(r,"area"), get(r,"type")].filter(Boolean).join(" ")
      );
      const slug = explicit || fallback;
      const title = get(r, "title") || [get(r,"area"), get(r,"type"), get(r,"city")].filter(Boolean).join(" • ");
      if (!slug || !title) return null;
      return { params: { slug }, props: { row: r } };
    })
    .filter(Boolean);

  return items;
}

/* ---------------- page props/helpers ---------------- */
const { row } = Astro.props;
const get = (k:string) =>
  (row?.[k] ?? row?.[k?.toLowerCase?.()] ?? row?.[k?.toUpperCase?.()] ?? "")
    .toString()
    .trim();

const title          = get("title") || [get("area"), get("type"), get("city")].filter(Boolean).join(" • ");
const summary        = get("summary");
const hero_img       = heroPath(get("hero_img"));
const seo_title      = get("seo_title") || title;
const seo_description= get("seo_description") || summary;

/* IDX embed support:
   - If you store a RealtyVis block id in `embed_id`, we render <div class="rv-block" data-id="...">
   - If you store a full embed script/iframe in `embed_code` or `spare_1`, we safely inject it.
*/
const embed_id       = get("embed_id");
const embed_code     = get("embed_code") || get("spare_1");

/* Optional quick facts cards: pipe format "Title|Body|Image|Href"
   Put in `card_1`, `card_2`, `card_3` columns if you like.
*/
function parseCard(raw="") {
  const [title="", body="", img="", href=""] = raw.split("|").map(s => s.trim());
  return { title, body, img: heroPath(img), href };
}
const cards = ["card_1","card_2","card_3"]
  .map(k => get(k))
  .filter(Boolean)
  .map(parseCard);
---

<Site title={seo_title} seo_title={seo_title} seo_description={seo_description}>
  <!-- full-bleed hero driven by your <Hero> component -->
  <Hero slot="hero" row={{ ...row, hero_img }} />

  <section class="container page">
    <header class="lead">
      <h1 class="h1">{title}</h1>
      {summary && <p class="summary">{summary}</p>}
    </header>

    {/* IDX / Listings */}
    {(embed_id || embed_code) && (
      <section aria-label="Listings" class="mb-12">
        <h2 class="h2">Listings</h2>
        {embed_id && <div class="rv-block" data-id={embed_id}></div>}
        {!embed_id && embed_code && (
          <div class="embed" set:html={embed_code}></div>
        )}
      </section>
    )}

    {/* Optional quick facts / CTAs */}
    {cards.length > 0 && (
      <section aria-label="Highlights" class="cards">
        {cards.map(({title,body,img,href}) => (
          <a class="card" href={href || "#"} aria-label={title}>
            {img && <img src={img} alt={title} loading="lazy" />}
            <div class="card-body">
              <h3 class="h3">{title}</h3>
              {body && <p>{body}</p>}
            </div>
          </a>
        ))}
      </section>
    )}
  </section>

  <style>
    .page { margin-block: 2rem 3rem; }
    .lead .h1 { font-size: clamp(1.8rem, 1.2rem + 2vw, 2.4rem); margin: 0 0 .5rem; }
    .lead .summary { font-size: 1.125rem; opacity: .9; margin: 0 0 1.5rem; }

    .h2 { font-size: 1.5rem; margin: 0 0 .75rem; }
    .h3 { font-size: 1.125rem; margin: 0 0 .25rem; }

    .cards {
      display: grid;
      grid-template-columns: repeat(1, minmax(0,1fr));
      gap: 20px;
      margin-top: 1.25rem;
    }
    @media (min-width: 720px) {
      .cards { grid-template-columns: repeat(3, minmax(0,1fr)); }
    }
    .card {
      display: grid;
      grid-template-rows: auto 1fr;
      text-decoration: none;
      border-radius: 14px;
      overflow: clip;
      box-shadow: 0 6px 18px rgba(0,0,0,.08);
      background: #fff;
    }
    .card img { width: 100%; height: 200px; object-fit: cover; display: block; }
    .card-body { padding: 14px; color: inherit; }
  </style>
</Site>
