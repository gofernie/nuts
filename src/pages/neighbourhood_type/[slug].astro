---
// File: src/pages/neighbourhood_type/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";
import ListingButtons from "../../components/ListingButtons.astro";

/* ---------- utils ---------- */
const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

/* ---------- static paths ---------- */
export async function getStaticPaths() {
  const url =
    import.meta.env.PUBLIC_NEIGHBOURHOOD_TYPE_JSON ||
    import.meta.env.PUBLIC_TYPES_JSON ||
    import.meta.env.PUBLIC_SHEET_JSON || "";

  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch {}

  const items = rows.map((r:any) => {
    const status  = String(r?.status ?? "").trim().toLowerCase();
    const rawSlug = String(r?.slug ?? "").trim().toLowerCase();
    if (status === "hidden" || status === "inactive" || rawSlug === "index") return null;

    const title  = String(r?.title ?? "").trim();
    const nhType = String(r?.neighbourhood_type ?? "").trim();
    const typ    = String(r?.type ?? "").trim();
    const cat    = String(r?.category ?? "").trim();
    const slug = rawSlug || slugify(title || nhType || typ || cat);
    return slug ? { params: { slug } } : null;
  }).filter(Boolean);

  return items;
}

/* ---------- page data ---------- */
const slugParam = (Astro.params.slug || "").toString().trim().toLowerCase();
const url =
  import.meta.env.PUBLIC_NEIGHBOURHOOD_TYPE_JSON ||
  import.meta.env.PUBLIC_TYPES_JSON ||
  import.meta.env.PUBLIC_SHEET_JSON || "";

let row:any = null;
if (url) {
  try {
    const raw = await getJson<any>(url);
    const rows:any[] = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
    row = rows.find((r:any) => {
      const rawSlug = String(r?.slug ?? "").trim().toLowerCase();
      const title   = String(r?.title ?? "").trim();
      const nhType  = String(r?.neighbourhood_type ?? "").trim();
      const typ     = String(r?.type ?? "").trim();
      const cat     = String(r?.category ?? "").trim();
      return (rawSlug || slugify(title || nhType || typ || cat)).toLowerCase() === slugParam;
    });
  } catch (e) { console.error(e); }
}
if (!row) throw new Error(`Neighbourhood Type slug not found: ${slugParam}`);

/* ---------- content ---------- */
const title    = String(row?.title ?? "Neighbourhood Type").trim();
const summary  = String(row?.summary ?? "").trim();
const body     = String(row?.long_copy ?? "").trim();
const heroImg  = String(row?.hero_img ?? "").trim();
const seoTitle = String(row?.seo_title ?? title).trim();
const seoDesc  = String(row?.seo_description ?? summary ?? "").trim();

const buttonsCell = String(row?.spare_2 ?? "").trim();

/* ---------- RV embed ---------- */
const rawCta =
  String(row?.cta1 ?? row?.rv_block ?? "").trim() ||
  String(import.meta.env.PUBLIC_DEFAULT_RV_BLOCK ?? "").trim();

const isRvId = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i.test(rawCta);
const RV_SCRIPT = import.meta.env.PUBLIC_RV_SCRIPT || "https://cdn.realtyvis.com/js/embed.js";

/* sanitize & extract */
function stripScripts(html:string) {
  return html.replace(/<script\b[^>]*>[\s\S]*?<\/script>/gi, "");
}
function extractRvContainer(html:string) {
  const clean = stripScripts(html);
  const m = clean.match(
    /<div[^>]*\sdata-rv-block=["']?([A-Z0-9]{8}-[A-Z0-9]{8})["']?[^>]*>\s*<\/div>/i
  );
  return m?.[0] || "";
}
const containerHtml = isRvId
  ? `<div data-rv-block="${rawCta}"></div>`
  : extractRvContainer(rawCta);
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc}>
  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    containerPad={12}
    flush={false}
    preload={false}
  />

  {summary && (
    <div class="container summary-wrap">
      <p class="lead">{summary}</p>
    </div>
  )}

  {buttonsCell && (
    <div class="container" style="margin-top:8px;">
      <ListingButtons raw={buttonsCell} />
    </div>
  )}

  {rawCta && (
    <div class="container listings-wrap">
      <h2 class="h2">Current {title} Listings</h2>
      {isRvId ? (
        <div id="rv-block" data-rv-block={rawCta}></div>
      ) : (
        <div id="rv-block" class="rv-html" set:html={containerHtml}></div>
      )}
      <script is:inline>
        (function(){
          const RV_URL = {JSON.stringify(RV_SCRIPT)};
          function scan(){ try { window.RealtyVis?.init?.(); window.RealtyVis?.scan?.(); } catch(e){} }

          if (!window.__rvScriptLoading && !window.__rvScriptLoaded && !window.RealtyVis) {
            window.__rvScriptLoading = true;
            var s = document.createElement('script');
            s.src = RV_URL;
            s.async = true;
            s.onload = function(){ window.__rvScriptLoaded = true; scan(); };
            s.onerror = function(e){ console.error('RealtyVis failed to load', e); window.__rvScriptLoading = false; };
            document.head.appendChild(s);
          } else {
            setTimeout(scan, 250);
          }

          document.addEventListener('astro:after-swap', scan);
          document.addEventListener('astro:page-load', scan);
          window.addEventListener('pageshow', (e)=>{ if (e.persisted) scan(); });
          document.addEventListener('visibilitychange', ()=>{ if (!document.hidden) scan(); });
        })();
      </script>
    </div>
  )}

  {body && (
    <div class="container body-wrap">
      <div class="lead" set:html={body}></div>
    </div>
  )}

  <style>
    .container{ max-width:1200px; margin-inline:auto; padding-inline:12px; }
    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }
    .listings-wrap{ padding-top:16px; padding-bottom:8px; }
    .h2{ font-size: clamp(20px,2.6vw,28px); margin: 0 0 10px; }
    .body-wrap{ padding-top:12px; }
  </style>
</Site>
