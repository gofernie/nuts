---
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* ---------- getStaticPaths ---------- */
export async function getStaticPaths() {
  const URL =
    import.meta.env.PUBLIC_NEIGHBOURHOOD_TYPE_JSON ||
    import.meta.env.PUBLIC_SHEET_JSON ||
    "";
  if (!URL) return [];

  const get = (r:any, k:string) =>
    (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();
  const slugify = (s:string) =>
    s.toLowerCase().replace(/&/g,"-and-").replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"");

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(URL);
    rows = Array.isArray(raw) ? raw : raw?.data || raw?.rows || [];
  } catch { return []; }

  return rows
    .map((r:any) => {
      const rawSlug = get(r, "slug");
      const title = get(r, "title");
      const slug = rawSlug || (title ? slugify(title) : "");
      if (!slug) return null;
      return { params: { slug }, props: { row: r } };
    })
    .filter(Boolean);
}

/* ---------- get ---------- */
export async function get({ props }) {
  const get = (r:any, k:string) =>
    (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

  const row = props?.row || {};
  const title = get(row, "title") || "Neighbourhood Type";
  const summary = get(row, "summary") || "";
  const heroImg = get(row, "hero_img") || "/img/hero/fallback-1600x800.jpg";

  // âœ… block id from your sheet, with a safe default
  const rvBlock =
    get(row, "cta1") ||
    get(row, "rv_block") ||
    import.meta.env.PUBLIC_DEFAULT_RV_BLOCK || ""; // set in .env to guarantee output

  return { props: { title, summary, heroImg, rvBlock } };
}

const { title, summary, heroImg, rvBlock } = Astro.props;
---

<Site title={title} seo_title={title} seo_description={summary}>
  <!-- HERO (eager for solid LCP ~80) -->
  <div slot="hero" class="hero">
    <picture>
      <img
        src={heroPath(heroImg)}
        alt={title}
        loading="eager"
        fetchpriority="high"
        decoding="sync"
        style="width:100%;height:50vh;object-fit:cover;object-position:center;"
      />
    </picture>
    <div class="hero-overlay">
      <h1 class="hero-title">{title}</h1>
      {summary && <p class="hero-summary">{summary}</p>}
    </div>
  </div>

  <main class="wrap">
    {summary && (
      <section class="prose mb-10">
        <p>{summary}</p>
      </section>
    )}

    {rvBlock && (
      <section id="listings" class="mb-16">
        <h2 class="h2 mb-4">Current Listings</h2>

        <!-- ðŸ”µ the exact eager embed (pre-lazy), with Astro-safe init -->
        <div data-rv-block={rvBlock}></div>
        <script is:inline>
          (function(){
            const SRC="https://cdn.realtyvis.com/js/embed.js";
            function init(){ try{ window.RealtyVis && window.RealtyVis.init && window.RealtyVis.init(); }catch(e){ console.error("RV init error", e); } }
            if(!document.querySelector('script[src="'+SRC+'"]')){
              const s=document.createElement("script");
              s.src=SRC; s.async=true; s.onload=init;
              s.onerror=()=>console.error("Failed to load RealtyVis script");
              document.body.appendChild(s);
            } else {
              init();
            }
          })();
        </script>

        <!-- (optional) temporary debug: shows the block id youâ€™re rendering -->
        <!-- <p style="color:#888;font-size:12px">rvBlock: {rvBlock}</p> -->
      </section>
    )}
  </main>
</Site>

<style>
  .wrap { max-width: 1250px; margin-inline: auto; padding-inline: 20px; }
  .hero { position: relative; }
  .hero-overlay {
    position: absolute; inset: 0; display: grid; place-items: end start;
    padding: clamp(12px,3vw,28px);
    background: linear-gradient(180deg, rgba(0,0,0,0) 30%, rgba(0,0,0,.35) 75%);
  }
  .hero-title { color: #fff; font-size: clamp(24px,4vw,44px); margin: 0 0 6px; text-shadow: 0 1px 2px rgba(0,0,0,.35); }
  .hero-summary { color: #eef0f2; max-width: 70ch; margin: 0; }
</style>
