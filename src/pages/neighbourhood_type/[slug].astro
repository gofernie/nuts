---
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";
import RealtyVis from "../../components/RealtyVis.astro";

/* =======================
   getStaticPaths
======================= */
export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_NEIGHBOURHOOD_TYPE_JSON;
  if (!url) {
    console.warn("[neighbourhood_type] Missing PUBLIC_NEIGHBOURHOOD_TYPE_JSON");
    return [];
  }

  let rows: any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows =
      Array.isArray(raw) ? raw :
      Array.isArray(raw?.data) ? raw.data :
      Array.isArray(raw?.rows) ? raw.rows :
      [];
  } catch (e) {
    console.error("[neighbourhood_type] fetch error", e);
    return [];
  }

  const get = (r: any, k: string) =>
    (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "")
      .toString()
      .trim();

  const items = rows
    .map((r: any) => {
      const title = get(r, "title");
      if (!title) return null;

      const explicitSlug = get(r, "slug");
      const computedSlug = title
        .toLowerCase()
        .replace(/&/g, "-and-")
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/^-+|-+$/g, "");

      const slug = (explicitSlug || computedSlug).toLowerCase();

      return {
        slug,
        title,
        summary: get(r, "summary"),
        hero_img: get(r, "hero_img"),
        long_copy: get(r, "long_copy"),
        cta1: get(r, "cta1"),
        map_embed: get(r, "map_embed"),
        status: get(r, "status"),
        seo_title: get(r, "seo_title"),
        seo_description: get(r, "seo_description"),
      };
    })
    .filter(
      (r) =>
        r &&
        r.slug &&
        r.title &&
        r.slug !== "index" &&
        !/^draft$/i.test(r.status || "") &&
        !/^hidden$/i.test(r.status || "") &&
        !/^inactive$/i.test(r.status || "")
    );

  console.log(
    `[neighbourhood_type] built ${items.length} paths`,
    items.slice(0, 5).map((x) => x.slug)
  );

  return items.map((n: any) => ({
    params: { slug: n.slug },
    props: {
      title: n.title,
      summary: n.summary || "",
      hero: heroPath(n.hero_img),
      long_copy: n.long_copy || "",
      cta1: n.cta1 || "",
      map_embed: (() => {
        const v = (n.map_embed || "").trim();
        if (!v) return "";
        const m = v.match(/src="([^"]+)"/i);
        if (m?.[1]) return m[1];
        if (v.includes("google.com/maps") && v.includes("embed")) return v;
        if (v.includes("google.com/maps")) {
          try {
            const u = new URL(v);
            const q = u.search ? `${u.search}&output=embed` : "?output=embed";
            return `https://www.google.com/maps${q}`;
          } catch {}
        }
        return `https://www.google.com/maps?q=${encodeURIComponent(v)}&output=embed`;
      })(),
      seo_title: n.seo_title || "",
      seo_description: n.seo_description || "",
    },
  }));
}

/* =======================
   Props
======================= */
const {
  title,
  summary,
  hero,
  long_copy,
  cta1,
  map_embed,
  seo_title,
  seo_description,
} = Astro.props as any;

const pageSeoTitle = (seo_title || title || "Neighbourhood Type").toString();
const pageSeoDesc = (seo_description || summary || "").toString();
---

<Site
  showHeader={true}
  title={title}
  seo_title={pageSeoTitle}
  seo_description={pageSeoDesc}
>
  <!-- Preload hero -->
  <Fragment slot="head">
    <meta name="x-debug-seo-title" content={pageSeoTitle} />
    <meta name="x-debug-seo-desc" content={pageSeoDesc} />
    {hero && <link rel="preload" as="image" href={hero} fetchpriority="high" />}
  </Fragment>

  <!-- HERO -->
  <section class="hero-bleed">
    {hero && (
      <img
        src={hero}
        alt={title}
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
        style="width:100%;height:100%;object-fit:cover;object-position:center"
      />
    )}
  </section>

  <!-- INTRO -->
  <div class="container intro">
    <h1>{title}</h1>
    {summary && <div class="copy-base summary" set:html={summary}></div>}
  </div>

  <!-- LISTINGS -->
  <RealtyVis blockId={cta1} />

  <!-- MAP -->
  {map_embed && (
    <div class="container map-wrap">
      <h2>Explore on the Map</h2>
      <div class="map-card">
        <iframe
          src={map_embed}
          title={`Map of ${title}`}
          loading="lazy"
          allowfullscreen
          referrerpolicy="no-referrer-when-downgrade"
          style="width:100%; height: var(--map-h, 520px); border:0; display:block;"
        ></iframe>
      </div>
    </div>
  )}

  <!-- LONG COPY -->
  {long_copy && (
    <div class="container">
      <article class="copy-base long-copy" set:html={long_copy}></article>
    </div>
  )}

  <style>
    .intro { margin: 24px auto 20px; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin: 0 0 8px; color:#111827; }

    .copy-base { 
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
      font-weight: 400;
      letter-spacing: 0;
      font-size: 1.05rem;
      line-height: 1.8;
      color: #1f2937;
    }
    .copy-base p { margin: 0 0 1.25em; }
    .copy-base h2, .copy-base h3 {
      font-weight: 700;
      color:#111827;
      line-height: 1.3;
      margin:2em 0 .75em;
    }
    .copy-base h2 { font-size: 1.5rem; border-left: 4px solid #0a7bff; padding-left: .5rem; }
    .copy-base h3 { font-size: 1.25rem; }

    .ski-hill-buttons {
      display: flex;
      gap: 16px;
      justify-content: center;
      flex-wrap: wrap;
      margin-top: 20px;
    }

    .ski-hill-buttons .btn-link {
      display: inline-block;
      background: #0a7bff;
      color: #fff;
      padding: 14px 28px;
      border-radius: 999px;
      font-size: 1.125rem;
      font-weight: 600;
      text-decoration: none;
      transition: background 0.2s ease, box-shadow 0.2s ease;
    }

    .ski-hill-buttons .btn-link:hover {
      background: #065aa3;
      box-shadow: 0 4px 10px rgba(0,0,0,0.15);
    }

    .map-wrap h2 { font-size:1.25rem; margin:8px 0 12px; color:#111827; }
    .map-card { border:1px solid #eee; border-radius:12px; overflow:hidden; box-shadow:0 1px 6px rgba(0,0,0,0.1); }

    .long-copy { margin:40px 0 48px; }
  </style>
</Site>
