---
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_SHEET_JSON;
  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw : Array.isArray(raw?.data) ? raw.data : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch { return []; }

  const items = rows.map((r:any) => {
    const get=(k:string)=>(r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();
    const title = get("title"); if (!title) return null;

    const computedSlug = title.toLowerCase()
      .replace(/&/g,"-and-")
      .replace(/[^a-z0-9]+/g,"-")
      .replace(/^-+|-+$/g,"");

    return {
      slug: get("slug") || computedSlug,
      title,
      summary: get("summary"),
      hero_img: get("hero_img"),
      map_embed: get("map_embed"),
      long_copy: get("long_copy"),
      cta1: get("cta1"),
      status: get("status"),
      seo_title: get("seo_title"),
      seo_description: get("seo_description"),
    };
  }).filter((r)=> r && r.slug && r.title && r.slug.toLowerCase()!=="index" && !/^draft$/i.test(r.status||""));

  return items.map((n:any)=>({
    params:{ slug:n.slug },
    props:{
      title: n.title,
      summary: n.summary || "",
      hero: heroPath(n.hero_img),
      cta1: n.cta1 || "",
      map_embed: (() => {
        const v = (n.map_embed || "").trim();
        if (!v) return "";
        const m = v.match(/src="([^"]+)"/i);
        if (m?.[1]) return m[1];
        if (v.includes("google.com/maps") && v.includes("embed")) return v;
        if (v.includes("google.com/maps")) {
          try {
            const u = new URL(v);
            const q = u.search ? `${u.search}&output=embed` : "?output=embed";
            return `https://www.google.com/maps${q}`;
          } catch {}
        }
        return `https://www.google.com/maps?q=${encodeURIComponent(v)}&output=embed`;
      })(),
      long_copy: n.long_copy || "",
      seo_title: n.seo_title || "",
      seo_description: n.seo_description || "",
    }
  }));
}

const {
  title, summary, hero, map_embed, long_copy, cta1,
  seo_title, seo_description
} = Astro.props as any;

/* ---------- helpers for summary/meta ---------- */
function unescapeHtml(s: string = "") {
  return s
    .replaceAll("&lt;","<").replaceAll("&gt;",">")
    .replaceAll("&amp;","&").replaceAll("&quot;",'"').replaceAll("&#39;","'");
}
function stripTags(s: string = "") {
  return s.replace(/<[^>]*>/g, " ").replace(/\s+/g, " ").trim();
}
const summaryHtml = unescapeHtml(summary);

// ✅ SEO fallbacks (strip tags so meta doesn't include HTML)
const pageSeoTitle = (seo_title || title || "Neighbourhood").toString();
const pageSeoDesc  = (seo_description || stripTags(summaryHtml) || "").slice(0, 160);

// ✅ Optional: RealtyVis script URL from env (for lazy loader below)
const RV_SCRIPT = import.meta.env.PUBLIC_RV_SCRIPT || "";
const rawCta = (cta1 || "").trim();
const isRvId = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i.test(rawCta);
const isHtml = !!rawCta && !isRvId;
---

<Site
  showHeader={true}
  title={title}
  seo_title={pageSeoTitle}
  seo_description={pageSeoDesc}
>

  {hero && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={hero} fetchpriority="high" />
    </Fragment>
  )}

  <!-- HERO -->
  <section class="hero-bleed">
    {hero && (
      <img
        src={hero}
        alt={title}
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000" height="1000"
      />
    )}
  </section>

  <!-- INTRO -->
  <div class="container intro">
    <h1>{title}</h1>
    {summaryHtml && <div class="copy-base summary" set:html={summaryHtml}></div>}
  </div>

  <!-- =========================
       LAZY RealtyVis embed
       ========================= -->
  {rawCta && (
    <div class="container cta">
      <div
        class="rv-lazy-shell"
        data-rv-ready="false"
        {...(RV_SCRIPT ? { 'data-rv-script': RV_SCRIPT } : {})}
        {...(isRvId ? { 'data-rv-id': rawCta } : {})}
        {...(isHtml ? { 'data-rv-html': rawCta } : {})}
      >
        <div class="rv-skeleton">
          <div class="rv-skel-bar"></div>
          <div class="rv-skel-grid">
            <div class="rv-skel-card"></div>
            <div class="rv-skel-card"></div>
            <div class="rv-skel-card"></div>
          </div>
          <button class="rv-load-btn" type="button">Load listings</button>
        </div>
      </div>
    </div>
  )}

  {long_copy && (
    <div class="container">
      <article class="long-copy" set:html={long_copy}></article>
    </div>
  )}

  <!-- Client-side lazy loader -->
  <script is:inline>
    (() => {
      const shells = Array.from(document.querySelectorAll('.rv-lazy-shell'));
      if (!shells.length) return;

      const loadShell = (el) => {
        if (!el || el.dataset.rvReady === "true") return;
        const scriptUrl = (el.getAttribute('data-rv-script') || "").trim();
        const rvId = el.getAttribute('data-rv-id');
        const rvHtml = el.getAttribute('data-rv-html');

        if (rvId) {
          el.innerHTML = `<div data-rv-block="${rvId}"></div>`;
          if (scriptUrl && !window.__rvScriptLoading) {
            window.__rvScriptLoading = true;
            const s = document.createElement('script');
            s.src = scriptUrl;
            s.async = true;
            s.onload = () => {
              window.__rvScriptLoaded = true;
              try { window.RealtyVis && window.RealtyVis.scan && window.RealtyVis.scan(); } catch {}
            };
            document.head.appendChild(s);
          } else if (window.__rvScriptLoaded) {
            try { window.RealtyVis && window.RealtyVis.scan && window.RealtyVis.scan(); } catch {}
          }
        } else if (rvHtml) {
          el.innerHTML = rvHtml; // raw HTML mode
        }

        el.dataset.rvReady = "true";
      };

      document.addEventListener('click', (e) => {
        const btn = e.target.closest('.rv-load-btn');
        if (!btn) return;
        const shell = btn.closest('.rv-lazy-shell');
        loadShell(shell);
      });

      if ('IntersectionObserver' in window) {
        const io = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              loadShell(entry.target);
              io.unobserve(entry.target);
            }
          });
        }, { rootMargin: '200px 0px' });
        shells.forEach((el) => io.observe(el));
      } else {
        shells.forEach((el) => {
          const btn = el.querySelector('.rv-load-btn');
          if (btn) btn.style.display = 'inline-flex';
        });
      }
    })();
  </script>

  <style>
    .intro { margin: 24px auto 20px; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin: 0 0 8px; color:#111827; }

    .copy-base {
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
      font-weight: 400; letter-spacing: 0; font-size: 1.05rem;
      line-height: 1.8; color: #1f2937;
    }
    .copy-base p { margin: 0 0 1.25em; }
    .copy-base h2, .copy-base h3 { font-weight: 700; color:#111827; line-height: 1.3; margin:2em 0 .75em; }
    .copy-base h2 { font-size: 1.5rem; border-left: 4px solid #0a7bff; padding-left: .5rem; }
    .copy-base h3 { font-size: 1.25rem; }

    .long-copy{ margin:20px 0 48px; font-size:1.05rem; line-height:1.8; color:#1f2937; }
    .long-copy p{ margin:0 0 1.25em; }
    .long-copy h2,.long-copy h3{ font-weight:700; color:#111827; line-height:1.3; margin:2em 0 .75em; }
    .long-copy h2{ font-size:1.5rem; border-left:4px solid #0a7bff; padding-left:.5rem; }
    .long-copy h3{ font-size:1.25rem; }

    /* --- Lazy RV skeleton & button --- */
    .rv-lazy-shell{ position:relative; padding:0px; border:0px dashed #e5e7eb; border-radius:14px; min-height:180px; }
    .rv-skeleton{ display:flex; flex-direction:column; gap:14px; align-items:flex-start; }
    .rv-skel-bar{ width:180px; height:16px; border-radius:6px; background:linear-gradient(90deg,#eee,#f6f6f6,#eee); animation: skel 1.2s infinite linear; }
    .rv-skel-grid{ display:grid; grid-template-columns: repeat(3,minmax(0,1fr)); gap:12px; width:100%; }
    .rv-skel-card{ height:120px; border-radius:12px; background:linear-gradient(90deg,#eee,#f6f6f6,#eee); animation: skel 1.2s infinite linear; }
    .rv-load-btn{ display:none; padding:10px 16px; border-radius:999px; border:1px solid #d1d5db; background:#fff; font-weight:600; cursor:pointer; }
    @keyframes skel { 0%{background-position:-200px 0} 100%{background-position:200px 0} }
    @media (max-width: 900px){
      .rv-skel-grid{ grid-template-columns: repeat(2,minmax(0,1fr)); }
    }
  </style>
</Site>
