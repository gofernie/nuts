---
// File: src/pages/neighbourhood_type/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";
import ListingButtons from "../../components/ListingButtons.astro";
import RVEmbed from "../../components/RVEmbed.astro";

/* ---------- utils ---------- */
const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

/* ---------- static paths: return props to avoid refetch mismatch ---------- */
export async function getStaticPaths() {
  const url =
    import.meta.env.PUBLIC_NEIGHBOURHOOD_TYPE_JSON ||
    import.meta.env.PUBLIC_TYPES_JSON ||
    import.meta.env.PUBLIC_SHEET_JSON || "";

  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch {
    return [];
  }

  const items = rows.map((r:any) => {
    const status  = String(r?.status ?? "").trim().toLowerCase();
    const rawSlug = String(r?.slug ?? "").trim().toLowerCase();
    if (status === "hidden" || status === "inactive" || rawSlug === "index") return null;

    const title  = String(r?.title ?? "").trim();
    const nhType = String(r?.neighbourhood_type ?? "").trim();
    const typ    = String(r?.type ?? "").trim();
    const cat    = String(r?.category ?? "").trim();

    const slug = (rawSlug || slugify(title || nhType || typ || cat)).toLowerCase();
    return slug ? { params: { slug }, props: { row: r } } : null;
  }).filter(Boolean) as any[];

  return items;
}

/* ---------- page data: use the row from props; never throw ---------- */
type Row = {
  title?: string; summary?: string; long_copy?: string; hero_img?: string;
  seo_title?: string; seo_description?: string; spare_2?: string;
  cta1?: string; rv_block?: string; slug?: string; status?: string;
  neighbourhood_type?: string; type?: string; category?: string;
};
const { row: rowIn } = Astro.props as { row?: Row };
const row = rowIn ?? ({} as Row);   // fail-soft if somehow missing

/* ---------- content ---------- */
const title    = String(row?.title ?? "Neighbourhood Type").trim();
const summary  = String(row?.summary ?? "").trim();
const body     = String(row?.long_copy ?? "").trim();
const heroImg  = String(row?.hero_img ?? "").trim();
const seoTitle = String(row?.seo_title ?? title).trim();
const seoDesc  = String(row?.seo_description ?? summary ?? "").trim();

const buttonsCell = String(row?.spare_2 ?? "").trim();

/* ---------- RV embed input ---------- */
const rawCta =
  String(row?.cta1 ?? row?.rv_block ?? "").trim() ||
  String(import.meta.env.PUBLIC_DEFAULT_RV_BLOCK ?? "").trim();

const ID_RE = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i;
function stripScripts(html:string) {
  return html.replace(/<script\b[^>]*>[\s\S]*?<\/script>/gi, "");
}
function extractRvId(html:string) {
  const clean = stripScripts(html);
  const m = clean.match(/data-rv-block=["']?([A-Z0-9]{8}-[A-Z0-9]{8})["']?/i);
  return m?.[1] || "";
}
const rvBlockId = ID_RE.test(rawCta) ? rawCta : extractRvId(rawCta);
const hasValidBlock = ID_RE.test(rvBlockId);
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc}>
  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    containerPad={12}
    flush={false}
    preload={false}
  />

  {summary && (
    <div class="container summary-wrap">
      <p class="lead">{summary}</p>
    </div>
  )}

  {buttonsCell && (
    <div class="container" style="margin-top:8px;">
      <ListingButtons raw={buttonsCell} />
    </div>
  )}

  <div class="container listings-wrap">
    <h2 class="h2">Current {title} Listings</h2>

    {hasValidBlock ? (
      <div class="rv-host">
        <RVEmbed block={rvBlockId} minHeight="1000px" showSkeleton={false} />
      </div>
    ) : (
      <div class="rv-fallback">
        <p><strong>Heads-up:</strong> Listings are unavailable for this page right now.</p>
      </div>
    )}

    {/* Hover-to-warm connections for RV */}
    {hasValidBlock && (
      <script is:inline>
{`(function(){
  let warmed=false;
  function warm(){
    if(warmed) return; warmed=true;
    new Image().src="https://app.realtyvis.com/favicon.ico";
    new Image().src="https://cdn.realtyvis.com/favicon.ico";
    try{
      fetch("https://app.realtyvis.com/css/site.min.css",{mode:"no-cors"}).catch(()=>{});
      fetch("https://app.realtyvis.com/js/site.min.js",{mode:"no-cors"}).catch(()=>{});
    }catch(e){}
  }
  const host=document.querySelector(".rv-host")||document.querySelector(".listings-wrap");
  if(!host) return;
  ["pointerover","touchstart","focusin"].forEach(ev=>{
    host.addEventListener(ev,warm,{once:true,passive:true});
  });
})();`}
      </script>
    )}
  </div>

  {body && (
    <div class="container body-wrap">
      <div class="lead" set:html={body}></div>
    </div>
  )}

  <style>
    .container{ max-width:1200px; margin-inline:auto; padding-inline:12px; }
    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }
    .listings-wrap{ padding-top:16px; padding-bottom:8px; }
    .h2{ font-size: clamp(20px,2.6vw,28px); margin: 0 0 10px; }
    .body-wrap{ padding-top:12px; }
    .rv-fallback{ padding:12px 16px; background:#fff3cd; border:1px solid #ffe69c; border-radius:10px; color:#924; }

    /* Kill shimmer/skeletons coming from RV */
    .rv-host [class*="skeleton"],
    .rv-host [class*="Skeleton"],
    .rv-host [class*="loading"],
    .rv-host [data-skeleton],
    .rv-host .rv-skeleton,
    .rv-host .loading-skeleton,
    .rv-host .rv-loading {
      animation: none !important;
      background: none !important;
      background-image: none !important;
      box-shadow: none !important;
      opacity: 0 !important;
      pointer-events: none !important;
    }
    .rv-host * { animation-duration: 0s !important; transition: none !important; }
  </style>
</Site>
