---
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";
import RealtyVisLazy from "../../components/RealtyVisLazy.astro";

export async function getStaticPaths() {
  const SOURCE_URL = import.meta.env.PUBLIC_NEIGHBOURHOOD_TYPE_JSON || import.meta.env.PUBLIC_SHEET_JSON || "";
  if (!SOURCE_URL) return [];

  const getField = (r:any, k:string) =>
    (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();
  const slugify = (s:string) =>
    s.toLowerCase().replace(/&/g,"-and-").replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"");

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(SOURCE_URL);
    rows = Array.isArray(raw) ? raw : raw?.data || raw?.rows || [];
  } catch { return []; }

  return rows.map((r:any) => {
    const rawSlug = getField(r, "slug");
    const title = getField(r, "title");
    const slug = rawSlug || (title ? slugify(title) : "");
    if (!slug) return null;
    return { params: { slug }, props: { row: r } };
  }).filter(Boolean);
}

export async function get({ props }) {
  const getField = (r:any, k:string) =>
    (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();
  const row = props?.row || {};

  const title = getField(row, "title") || "Neighbourhood Type";
  const summary = getField(row, "summary") || "";
  const heroImg = getField(row, "hero_img") || "/img/hero/fallback-1600x800.jpg";

  const rvBlock = getField(row, "rv_block");
  const rvScript = import.meta.env.PUBLIC_RV_SCRIPT || "";
  const rvEmbedUrl = getField(row, "rv_url") || getField(row, "embed_url") || getField(row, "spare_1");

  return { props: { title, summary, heroImg, rvBlock, rvScript, rvEmbedUrl } };
}

const { title, summary, heroImg, rvBlock, rvScript, rvEmbedUrl } = Astro.props;
---

<Site title={title} seo_title={title} seo_description={summary}>
  <div slot="hero" class="hero">
    <picture>
      <img
        src={heroPath(heroImg)}
        alt={title}
        loading="eager"
        fetchpriority="high"
        decoding="sync"
        style="width:100%;height:50vh;object-fit:cover;object-position:center;"
      />
    </picture>
    <div class="hero-overlay">
      <h1 class="hero-title">{title}</h1>
      {summary && <p class="hero-summary">{summary}</p>}
    </div>
  </div>

  <main class="wrap">
    {summary && (
      <section class="prose mb-10">
        <p>{summary}</p>
      </section>
    )}

    {(rvEmbedUrl || rvBlock) && (
      <section id="listings" class="mb-16">
        <h2 class="h2 mb-4">Current Listings</h2>
        <RealtyVisLazy
          client:visible
          blockId={rvBlock}
          scriptUrl={rvScript}
          embedUrl={rvEmbedUrl}
          minHeight="900px"
        />
      </section>
    )}
  </main>
</Site>

<style>
  .wrap {
    max-width: var(--container-max, 1250px);
    margin-inline: auto;
    padding-inline: var(--container-pad, 20px);
  }
  .hero { position: relative; }
  .hero-overlay {
    position: absolute; inset: 0;
    display: grid; place-items: end start;
    padding: clamp(12px, 3vw, 28px);
    background: linear-gradient(180deg, rgba(0,0,0,0) 30%, rgba(0,0,0,0.35) 75%);
  }
  .hero-title {
    color: white;
    font-size: clamp(24px, 4vw, 44px);
    line-height: 1.05;
    margin: 0 0 6px 0;
    text-shadow: 0 1px 2px rgba(0,0,0,.35);
  }
  .hero-summary { color: #eef0f2; max-width: 70ch; margin: 0; }
</style>
