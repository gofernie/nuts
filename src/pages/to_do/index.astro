---
// File: src/pages/to_do/index.astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

const PATH_BASE = "/to_do";

/* ---------- helpers ---------- */
const RESERVED = new Set(["index","page","pages","all","view","list"]);
const get = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

const visible = (r:any) => {
  const s = get(r,"status").toLowerCase();
  const rawSlug = get(r,"slug").toLowerCase();
  return s !== "hidden" && s !== "inactive" && rawSlug !== "index" && !RESERVED.has(rawSlug);
};

/* Detect season from common fields; default "all" */
function detectSeason(r:any): "summer"|"winter"|"all" {
  const direct = get(r,"season").toLowerCase();
  if (direct === "summer" || direct === "winter") return direct as any;

  const tagsRaw = [
    get(r,"tags"), get(r,"tag"), get(r,"category"), get(r,"categories"),
    get(r,"type"), get(r,"types")
  ].filter(Boolean).join(" ").toLowerCase();

  if (/winter|ski|snow|ice|sled|x-?country|nordic|snowshoe/.test(tagsRaw)) return "winter";
  if (/summer|hike|bike|swim|lake|golf|paddle|camp|trail/.test(tagsRaw)) return "summer";

  return "all";
}

type Row = {
  slug?: string;
  title?: string;
  summary?: string;
  long_copy?: string;
  hero_img?: string;
  status?: string;
  seo_title?: string;
  seo_description?: string;
  sort?: number|string;
  season?: "summer"|"winter"|"all";
};

let itemsSorted: Row[] = [];
let items: Row[] = [];
let header: Row | null = null;
let error: string | null = null;

try {
  const url = import.meta.env.PUBLIC_TODO_JSON;
  if (!url) throw new Error("Missing PUBLIC_TODO_JSON in .env (restart dev).");

  const raw = await getJson<any>(url);
  const rows:any[] =
    Array.isArray(raw) ? raw :
    Array.isArray(raw?.data) ? raw.data :
    Array.isArray(raw?.rows) ? raw.rows : [];

  const headerCandidates = rows.filter((r:any) => {
    const slug = get(r,"slug").toLowerCase();
    const status = get(r,"status").toLowerCase();
    const hasSummary =
      !!get(r,"summary") ||
      !!get(r,"long_copy") ||
      !!get(r,"seo_description") ||
      !!get(r,"description");
    return slug === "index" || status === "header" || hasSummary;
  });

  header =
    headerCandidates.find(r => get(r,"slug").toLowerCase() === "index") ??
    headerCandidates.find(r => get(r,"status").toLowerCase() === "header") ??
    headerCandidates[0] ?? null;

  // ✅ Always-sorted master list
  itemsSorted = rows
    .filter(r => visible(r))
    .map(r => {
      const season = detectSeason(r);
      return {
        slug: get(r,"slug") || slugify(get(r,"title")),
        title: get(r,"title"),
        summary: get(r,"summary"),
        hero_img: get(r,"hero_img"),
        sort: +get(r,"sort") || Number.MAX_SAFE_INTEGER,
        seo_title: get(r,"seo_title"),
        seo_description: get(r,"seo_description"),
        season,
      };
    })
    .filter(r => r.slug && r.title)
    .sort((a,b) => (Number(a.sort) - Number(b.sort)) || a.title!.localeCompare(b.title!));

} catch (e:any) {
  error = e?.message || "Failed to load data.";
}

const pageTitle = get(header,"title") || "Things To Do in Fernie";
const pageSummary =
  get(header,"summary") ||
  get(header,"long_copy") ||
  get(header,"seo_description") ||
  get(header,"description") ||
  "";
const heroImg = get(header,"hero_img");
const seoTitle = get(header,"seo_title") || pageTitle;
const seoDesc  = get(header,"seo_description") || pageSummary;

const SUMMARY_IS_HTML = false;

// initial season (from query)
const initialSeason = (Astro.url?.searchParams?.get("season") || "all").toLowerCase();
const VALID = new Set(["all","summer","winter"]);
const seasonStart = (VALID.has(initialSeason) ? initialSeason : "all") as "all"|"summer"|"winter";

// ⛔️ Do NOT randomize on the server — we randomize "All" once per session on the client
items = itemsSorted;
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc}>
  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={pageTitle}
    containerMax={1200}
    flush={false}
    containerPad={12}
  />

  {pageSummary && (
    <div class="container summary-wrap">
      {SUMMARY_IS_HTML
        ? <div class="lead" set:html={pageSummary}></div>
        : <p class="lead">{pageSummary}</p>}
    </div>
  )}

  <div class="container">
    {error && <p class="err">{error}</p>}

    {!error && (
      <>
        <!-- Season filter controls -->
        <div class="controls" role="tablist" aria-label="Filter activities by season">
          <button class="pill" data-filter="all" aria-selected={seasonStart==="all"}>All</button>
          <button class="pill" data-filter="summer" aria-selected={seasonStart==="summer"}>Summer</button>
          <button class="pill" data-filter="winter" aria-selected={seasonStart==="winter"}>Winter</button>
        </div>

        <div class="grid" data-season={seasonStart}>
          {items.map((it) => (
            <a
              class="card"
              href={`${PATH_BASE}/${it.slug}`}
              data-astro-prefetch="hover"
              data-season={it.season}
              data-sort={Number(it.sort) || 9007199254740991}
              data-title={it.title}
              aria-label={it.title}
            >
              {it.hero_img && (
                <img src={heroPath(it.hero_img)} alt={it.title} loading="lazy" decoding="async" />
              )}
              <div class="body">
                <h2>{it.title}</h2>
                {it.summary && <p>{it.summary}</p>}
              </div>
            </a>
          ))}
        </div>
      </>
    )}
  </div>

  <script>
    function shuffleInPlace(arr){ for(let i=arr.length-1;i>0;i--){ const j=Math.floor(Math.random()*(i+1)); [arr[i],arr[j]]=[arr[j],arr[i]]; } return arr; }

    function reorder(grid, mode){
      const cards = Array.from(grid.querySelectorAll('.card'));

      if (mode === 'all') {
        // ✅ Use cached shuffle if available (one shuffle per session)
        const KEY = 'todo-shuffle-order';
        let order = sessionStorage.getItem(KEY);

        if (order) {
          const hrefOrder = JSON.parse(order);
          cards.sort((a,b) => hrefOrder.indexOf(a.getAttribute('href')) - hrefOrder.indexOf(b.getAttribute('href')));
        } else {
          shuffleInPlace(cards);
          const hrefOrder = cards.map(c => c.getAttribute('href'));
          sessionStorage.setItem(KEY, JSON.stringify(hrefOrder));
        }
      } else {
        // Summer/Winter: sort by sort value then title (stable, predictable)
        cards.sort((a, b) => {
          const sa = +a.dataset.sort || Number.MAX_SAFE_INTEGER;
          const sb = +b.dataset.sort || Number.MAX_SAFE_INTEGER;
          if (sa !== sb) return sa - sb;
          const ta = (a.dataset.title || '').toLowerCase();
          const tb = (b.dataset.title || '').toLowerCase();
          return ta.localeCompare(tb);
        });
      }

      // Re-append in the new order
      cards.forEach(c => grid.appendChild(c));
    }

    function applyFilter(next){
      const grid = document.querySelector('.grid');
      const pills = Array.from(document.querySelectorAll('.controls .pill'));
      if (!grid) return;

      const wanted = (next || 'all').toLowerCase();
      grid.setAttribute('data-season', wanted);

      // Update selected state
      pills.forEach(btn => btn.setAttribute('aria-selected', String(btn.dataset.filter === wanted)));

      // Reorder DOM to match desired order
      reorder(grid, wanted);

      // Update query param without scrolling
      const url = new URL(location.href);
      if (wanted === 'all') url.searchParams.delete('season');
      else url.searchParams.set('season', wanted);
      history.replaceState({}, "", url);
    }

    function initSeasonFilter(){
      const pills = Array.from(document.querySelectorAll('.controls .pill'));
      if (!pills.length) return;

      pills.forEach(btn => btn.addEventListener('click', () => applyFilter(btn.dataset.filter || 'all'), { passive: true }));

      // Ensure initial state and ordering on load
      const start = document.querySelector('.grid')?.getAttribute('data-season') || 'all';
      applyFilter(start);
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initSeasonFilter, { once: true });
    } else {
      initSeasonFilter();
    }
    window.addEventListener('pageshow', (e) => { if (e.persisted) initSeasonFilter(); });
  </script>

  <style>
    .container{ max-width:1200px; margin-inline:auto; padding-inline:12px; }
    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .lead{ margin: 0; font-size: 1.075rem; line-height: 1.6; color:#111827; }
    .err{ color:#b91c1c; background:#fee2e2; padding:.75rem 1rem; border-radius:.5rem; margin-top:12px; }

    /* Controls */
    .controls{
      display:flex; gap:8px; align-items:center;
      margin-top: 10px; margin-bottom: 10px;
      flex-wrap: wrap;
    }
    .pill{
      appearance:none; border:1px solid #e5e7eb; background:#fff;
      padding:8px 12px; border-radius:9999px; cursor:pointer;
      font-weight:700; font-size:.9rem; letter-spacing:.2px;
      transition: transform .12s ease, box-shadow .12s ease, border-color .12s ease, background-color .12s ease;
    }
    .pill[aria-selected="true"]{
      border-color:#111827; background:#111827; color:#fff; box-shadow:0 4px 12px rgba(0,0,0,.08);
    }
    .pill:hover{ transform: translateY(-1px); }
    .pill:active{ transform: translateY(0); }

    /* Grid + cards */
    .grid{
      display:grid;
      grid-template-columns: repeat(4, minmax(0,1fr));
      gap: 16px;
      margin-top: 8px;
    }
    @media (max-width:1200px){ .grid{ grid-template-columns: repeat(3, minmax(0,1fr)); } }
    @media (max-width:900px){  .grid{ grid-template-columns: repeat(2, minmax(0,1fr)); } }
    @media (max-width:560px){  .grid{ grid-template-columns: 1fr; } }

    .card{
      display:flex; flex-direction:column;
      background:#fff; border:1px solid #e5e7eb; border-radius:14px;
      overflow:hidden; text-decoration:none; color:inherit;
      transition: transform .08s ease, box-shadow .12s ease, border-color .12s ease;
    }
    .card:hover{ transform: translateY(-2px); box-shadow:0 6px 14px rgba(0,0,0,.08); border-color:#d1d5db; }
    .card img{ width:100%; aspect-ratio:16/9; object-fit: cover; display:block; }
    .card .body{ padding:12px; }
    .card .body h2{ margin:0 0 6px; font-size:1.05rem; line-height:1.3; }

    /* 2-line clamp */
    .card .body p{
      margin:0; color:#374151; line-height:1.35;
      display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical; overflow:hidden; text-overflow:ellipsis;
    }

    /* Visibility (ordering handled in JS) */
    .grid[data-season="summer"] .card:not([data-season="summer"]):not([data-season="all"]) { display:none; }
    .grid[data-season="winter"] .card:not([data-season="winter"]):not([data-season="all"]) { display:none; }
    .grid[data-season="all"]    .card { display:flex; }
  </style>
</Site>
