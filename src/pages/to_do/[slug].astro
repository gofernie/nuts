---
// src/pages/to_do/[slug].astro
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

export async function getStaticPaths() {
  // Set in .env e.g. PUBLIC_TODO_JSON="https://...&tab=view_todo"
  const url = import.meta.env.PUBLIC_TODO_JSON;
  if (!url) return [];

  let rows: any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw)
      ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows
      : [];
  } catch { return []; }

  const items = rows.map((r: any) => {
    const get = (k: string) =>
      (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "")
        .toString()
        .trim();

    const title = get("title"); if (!title) return null;

    const computedSlug = title
      .toLowerCase()
      .replace(/&/g, "-and-")
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/^-+|-+$/g, "");

    return {
      slug: get("slug") || computedSlug,
      title,
      summary: get("summary"),
      hero_img: get("hero_img"),
      long_copy: get("long_copy"),
      cta1: get("cta1"),
      status: get("status"),
      seo_title: get("seo_title"),
      seo_description: get("seo_description"),
      // ðŸ”½ read the three card cells
      card_1: get("card_1"),
      card_2: get("card_2"),
      card_3: get("card_3"),
    };
  }).filter((r) =>
    r && r.slug && r.title &&
    r.slug.toLowerCase() !== "index" &&
    !/^draft$/i.test(r.status || "")
  );

  // card parser: "Title | Subtitle | Body | /img.webp | /href"
  const parseCard = (raw = "") => {
    const [title, subtitle, body, img, href] = (raw || "").split("|").map(s => s.trim());
    if (!title) return null;
    const normImg =
      img ? (img.startsWith("http") ? img : img.startsWith("/") ? img : "/heroes/" + img) : "";
    return { title, subtitle, body, img: normImg, href };
  };

  return items.map((n: any) => ({
    params: { slug: n.slug },
    props: {
      title: n.title,
      summary: n.summary || "",
      hero: heroPath(n.hero_img),
      long_copy: n.long_copy || "",
      cta1: n.cta1 || "",
      // build cards array
      cards: [n.card_1, n.card_2, n.card_3].map(parseCard).filter(Boolean),
      // SEO
      seo_title: n.seo_title || "",
      seo_description: n.seo_description || "",
    },
  }));
}

const {
  title,
  summary,
  hero,
  long_copy,
  cta1,
  cards = [],
  seo_title,
  seo_description,
} = Astro.props as any;

const pageSeoTitle = seo_title || title || "To Do";
const pageSeoDesc  = seo_description || summary || "";
---

<Site showHeader={true} title={title} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  {hero && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={hero} fetchpriority="high" />
    </Fragment>
  )}

  <!-- LCP hero -->
  <section class="hero-bleed">
    {hero && (
      <img
        src={hero}
        alt={title}
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
        style="width:100%;height:100%;object-fit:cover;object-position:center"
      />
    )}
  </section>

  <div class="container intro">
    <h1>{title}</h1>
    {summary && <article class="long-copy" set:html={summary}></article>}
  </div>

  <!-- ðŸ”™ three cards right after summary -->
  {cards.length > 0 && (
    <div class="container">
      <div class="card-grid">
        {cards.map((c:any) => (
          <article class="tease">
            {c.img && <img class="tease-img" src={c.img} alt={c.title} width="1200" height="800" loading="lazy" decoding="async" />}
            <div class="tease-body">
              <h3 class="tease-title">{c.title}</h3>
              {c.subtitle && <p class="tease-sub">{c.subtitle}</p>}
              {c.body && <p class="tease-copy">{c.body}</p>}
              {c.href && <a class="tease-cta" href={c.href} aria-label={`Open ${c.title}`}>Learn more â†’</a>}
            </div>
          </article>
        ))}
      </div>
    </div>
  )}

  {cta1 && (
    <div class="container">
      <div class="cta-card">
        <h2>Plan your {title}</h2>
        <p>See routes, tips, and the best times to go.</p>
        <a href={cta1} class="cta-btn"><span class="cta-text">Start planning</span></a>
      </div>
    </div>
  )}

  {long_copy && (
    <div class="container">
      <article class="long-copy" set:html={long_copy}></article>
    </div>
  )}

  <style>
    .container { max-width: 1200px; margin-inline: auto; padding: 0 1rem; }
    .intro { margin: 24px auto 20px; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin: 0 0 8px; color:#111827; }

    .long-copy { margin: 12px 0 28px; font-size:1.05rem; line-height:1.8; color:#1f2937; }
    .long-copy p { margin: 0 0 1.25em; }
    .long-copy h2, .long-copy h3 { font-weight:700; color:#111827; line-height:1.3; margin:2em 0 .75em; }
    .long-copy h2 { font-size:1.5rem; border-left:4px solid #0a7bff; padding-left:.5rem; }
    .long-copy h3 { font-size:1.25rem; }

    /* Cards */
    .card-grid {
      display: grid;
      grid-template-columns: repeat(12, minmax(0, 1fr));
      gap: 20px;
      margin: 6px 0 24px;
    }
    .tease {
      grid-column: span 12;
      background:#fff; border:1px solid #e5e7eb; border-radius:16px; overflow:hidden;
      box-shadow:0 2px 10px rgba(0,0,0,0.06);
      display:flex; flex-direction:column;
    }
    .tease-img { width:100%; height:240px; object-fit:cover; display:block; }
    .tease-body { padding:16px 16px 18px; }
    .tease-title { margin:0 0 6px; font-size:1.25rem; color:#111827; }
    .tease-sub { margin:0 0 8px; color:#374151; font-weight:600; }
    .tease-copy { margin:0 0 12px; color:#374151; }
    .tease-cta { display:inline-flex; gap:6px; font-weight:700; text-decoration:none; color:#0a7bff; border-bottom:2px solid transparent; }
    .tease-cta:hover { border-bottom-color:#0a7bff; }

    @media (min-width: 720px){ .tease { grid-column: span 6; } }
    @media (min-width: 1024px){ .tease { grid-column: span 4; } .tease-img { height:220px; } }

    /* CTA card */
    .cta-card{
      background:#fff; color:#111827; border:2px solid #e5e7eb; border-radius:16px;
      padding:28px 20px; margin:36px 0; text-align:center;
      box-shadow:0 6px 18px rgba(0,0,0,0.08);
    }
    .cta-card h2{ margin:0 0 10px; font-size:1.75rem; font-weight:700; }
    .cta-card p{ font-size:1rem; color:#374151; margin-bottom:18px; }
    .cta-btn{
      display:inline-flex; align-items:center; justify-content:center; gap:8px;
      background:#0a7bff; color:#fff; text-decoration:none; font-weight:700; font-size:1.125rem;
      padding:12px 28px; border-radius:999px; box-shadow:0 4px 10px rgba(0,0,0,0.15);
      transition: background .15s ease, box-shadow .15s ease;
    }
    .cta-btn:hover{ background:#065aa3; box-shadow:0 6px 14px rgba(0,0,0,0.25); }
  </style>
</Site>
