---
// File: src/pages/to_do/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* ---------- utils ---------- */
const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_TODO_JSON;
  if (!url) return [];
  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch { return []; }

  const items = rows.map((r:any) => {
    const status  = String(r?.status ?? r?.Status ?? r?.STATUS ?? "").trim().toLowerCase();
    const rawSlug = String(r?.slug   ?? r?.Slug   ?? r?.SLUG   ?? "").trim().toLowerCase();
    const hidden = status === "hidden" || status === "inactive" || rawSlug === "index";
    if (hidden) return null;
    const title  = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    const slug   = rawSlug || slugify(title);
    return slug ? { params: { slug } } : null;
  }).filter(Boolean) as { params: { slug: string } }[];

  return items;
}

/* ---------- page data ---------- */
const slugParam = (Astro.params.slug || "").toString().trim().toLowerCase();
const url = import.meta.env.PUBLIC_TODO_JSON;
if (!url) throw new Error("Missing PUBLIC_TODO_JSON in .env (restart dev).");

let rows:any[] = [];
let row:any = null;
let indexRow:any = null;

try {
  const raw = await getJson<any>(url);
  rows = Array.isArray(raw) ? raw
    : Array.isArray(raw?.data) ? raw.data
    : Array.isArray(raw?.rows) ? raw.rows : [];

  row = rows.find((r:any) => {
    const rawSlug = String(r?.slug ?? r?.Slug ?? r?.SLUG ?? "").trim().toLowerCase();
    const title   = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    return (rawSlug || slugify(title)).toLowerCase() === slugParam;
  });

  // Use INDEX row's CTA1 for the embed after body
  indexRow = rows.find((r:any) =>
    String(r?.slug ?? r?.Slug ?? r?.SLUG ?? "index").trim().toLowerCase() === "index"
  ) || null;
} catch (e) {
  console.error("[to_do slug] JSON fetch failed:", e);
}

if (!row) throw new Error(`To Do slug not found: ${slugParam}`);

/* ---------- fields ---------- */
const title    = String(row?.title ?? row?.Title ?? row?.TITLE ?? "Things To Do in Fernie").trim();
const summary  = String(row?.summary ?? row?.Summary ?? row?.SUMMARY ?? "").trim();
const body     = String(row?.long_copy ?? row?.longcopy ?? row?.LongCopy ?? "").trim();
const heroImg  = String(row?.hero_img ?? row?.heroImg ?? row?.HeroImg ?? "").trim();
const seoTitle = String(row?.seo_title ?? row?.seoTitle ?? title).trim();
const seoDesc  = String(row?.seo_description ?? row?.seoDescription ?? summary ?? "").trim();

const SUMMARY_IS_HTML = false;
const BODY_IS_HTML    = true;

/* ---------- embed from INDEX row's cta1 (or env fallback) ---------- */
const rawCta =
  String(indexRow?.cta1 ?? indexRow?.rv_block ?? "").trim() ||
  String(import.meta.env.PUBLIC_DEFAULT_RV_BLOCK ?? "").trim();

const isRvId = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i.test(rawCta);

/* sanitize & extract container-only */
function stripScripts(html:string) {
  return html.replace(/<script\b[^>]*>[\s\S]*?<\/script>/gi, "");
}
function extractRvContainer(html:string) {
  const clean = stripScripts(html);
  const m = clean.match(
    /<div[^>]*\sdata-rv-block=["']?([A-Z0-9]{8}-[A-Z0-9]{8})["']?[^>]*>\s*<\/div>/i
  );
  return m?.[0] || "";
}
const containerHtml = isRvId
  ? `<div data-rv-block="${rawCta}"></div>`
  : extractRvContainer(rawCta);

const RV_URL = import.meta.env.PUBLIC_RV_SCRIPT || "https://cdn.realtyvis.com/js/embed.js";

/* hero preload hook */
const heroPreload = heroImg ? { href: heroPath(heroImg) } : null;
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc} heroPreload={heroPreload}>
  <!-- ðŸ”Œ Optional safety: load RV once here if layout isn't doing conditional load -->
  <Fragment slot="head">
    <script is:inline>
      (function(){
        if (window.RealtyVis || window.__rvScriptLoaded || window.__rvScriptLoading) return;
        window.__rvScriptLoading = true;
        var s = document.createElement('script');
        s.src = {JSON.stringify(RV_URL)};
        s.async = true;
        s.onload = function(){ window.__rvScriptLoaded = true; try { window.RealtyVis?.init?.(); window.RealtyVis?.scan?.(); } catch(_){} };
        s.onerror = function(e){ console.error("RealtyVis script failed to load", e); window.__rvScriptLoading = false; };
        document.head.appendChild(s);
      })();
    </script>
  </Fragment>

  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    containerPad={12}
    flush={false}
    preload={false}
  />

  {summary && (
    <div class="container summary-wrap">
      {SUMMARY_IS_HTML ? <div class="lead" set:html={summary}></div> : <p class="lead">{summary}</p>}
    </div>
  )}

  {body && (
    <div class="container body-wrap">
      {BODY_IS_HTML ? <div class="lead" set:html={body}></div> : <p class="lead">{body}</p>}
    </div>
  )}

  {rawCta && (
    <div class="container listings-wrap">
      <h2 class="h2">Current Fernie Listings</h2>

      <div id="rv-root" class="rv-slot" set:html={containerHtml}></div>

      <script is:inline>
        (function(){
          const root = document.getElementById('rv-root');
          const rescan = ()=> { try { window.RealtyVis?.init?.(); window.RealtyVis?.scan?.(); } catch(_){} };
          const mounted = ()=> !!root.querySelector('[data-rv-card], .rv-card, [data-rv-mounted]');
          const count = ()=> root.querySelectorAll('[data-rv-card], .rv-card').length;

          function maybeEmpty(){
            if (!mounted()) return;
            if (count() === 0 && !document.getElementById('rv-empty')) {
              root.insertAdjacentHTML('afterend',
                `<div id="rv-empty" class="rv-empty">
                   <div class="rv-empty__card">
                     <div class="rv-empty__title">No active listings right now</div>
                     <p class="rv-empty__text">Try a broader search or check back soon.</p>
                     <a class="btn-secondary" href="/search">Browse all listings</a>
                   </div>
                 </div>`);
            }
          }

          const mo = new MutationObserver(()=> mounted() && setTimeout(maybeEmpty, 200));
          mo.observe(root, { childList:true, subtree:true });

          document.addEventListener('astro:page-load', ()=>{ rescan(); setTimeout(maybeEmpty,200); });
          document.addEventListener('astro:after-swap', ()=>{ rescan(); setTimeout(maybeEmpty,200); });
          window.addEventListener('pageshow', e=>{ if (e.persisted) { rescan(); setTimeout(maybeEmpty,200); }});
          document.addEventListener('visibilitychange', ()=>{ if(!document.hidden){ rescan(); setTimeout(maybeEmpty,200); }});

          // Safety retries (covers late script loads)
          setTimeout(rescan, 1200);
          setTimeout(rescan, 4000);
        })();
      </script>
    </div>
  )}

  {!rawCta && (
    <div class="container note">
      <p><strong>Heads-up:</strong> No <code>index!cta1</code> (or <code>PUBLIC_DEFAULT_RV_BLOCK</code>) was found for the To-Do embeds.</p>
    </div>
  )}

  <style>
    .container{ max-width:1200px; margin-inline:auto; padding-inline:12px; }
    .summary-wrap{ padding-top:16px; }
    .body-wrap{ padding-top:12px; }
    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }

    .listings-wrap{ padding-top:16px; padding-bottom:8px; }
    .h2{ font-size: clamp(20px,2.6vw,28px); margin: 0 0 10px; }

    /* shimmer while RV mounts */
    .rv-slot { min-height: 200px; }
    .rv-slot:empty::before{
      content:""; display:block; height:180px; border-radius:10px;
      background:linear-gradient(90deg,#eee 25%,#f6f6f6 37%,#eee 63%);
      background-size:400% 100%; animation:shimmer 1.2s infinite linear;
      border:1px solid #eee;
    }
    @keyframes shimmer { 0%{background-position:100% 0} 100%{background-position:0 0} }

    /* empty-state card */
    .rv-empty { margin-top: 12px; }
    .rv-empty__card { border:1px solid #e5e7eb; background:#fff; border-radius:14px; padding:16px; box-shadow:0 1px 4px rgba(0,0,0,.05); }
    .rv-empty__title { font-weight:700; margin-bottom:6px; font-size:1.05rem; color:#111827; }
    .rv-empty__text { margin:0 0 12px; color:#374151; line-height:1.5; }
    .btn-secondary {
      display:inline-flex; align-items:center; justify-content:center;
      padding:.65rem 1rem; border-radius:10px; border:1px solid #e5e7eb; background:#fff;
      color:#111827; font-weight:600; text-decoration:none;
    }
    .btn-secondary:hover{ background:#f9fafb; }

    .note{ color:#666; background:#fafafa; border:1px solid #eee; padding:12px 14px; border-radius:8px; margin-top:16px; }
  </style>
</Site>
