---
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

export async function getStaticPaths() {
  // ðŸ”§ Set this in your .env (e.g. PUBLIC_TODO_JSON="https://...&tab=view_todo")
  const url = import.meta.env.PUBLIC_TODO_JSON;
  if (!url) return [];

  let rows: any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw)
      ? raw
      : Array.isArray(raw?.data)
        ? raw.data
        : Array.isArray(raw?.rows)
          ? raw.rows
          : [];
  } catch {
    return [];
  }

  const items = rows
    .map((r: any) => {
      const get = (k: string) =>
        (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "")
          .toString()
          .trim();

      const title = get("title");
      if (!title) return null;

      const computedSlug = title
        .toLowerCase()
        .replace(/&/g, "-and-")
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/^-+|-+$/g, "");

      return {
        slug: get("slug") || computedSlug,
        title,
        summary: get("summary"),
        hero_img: get("hero_img"),
        map_embed: get("map_embed"),
        long_copy: get("long_copy"),
        cta1: get("cta1"),
        status: get("status"),
        seo_title: get("seo_title"),
        seo_description: get("seo_description"),
      };
    })
    .filter(
      (r) =>
        r &&
        r.slug &&
        r.title &&
        r.slug.toLowerCase() !== "index" &&
        !/^draft$/i.test(r.status || "")
    );

  return items.map((n: any) => ({
    params: { slug: n.slug },
    props: {
      title: n.title,
      summary: n.summary || "",
      hero: heroPath(n.hero_img),
      cta1: n.cta1 || "",
      map_embed: (() => {
        const v = (n.map_embed || "").trim();
        if (!v) return "";
        const m = v.match(/src="([^"]+)"/i);
        if (m?.[1]) return m[1];
        if (v.includes("google.com/maps") && v.includes("embed")) return v;
        if (v.includes("google.com/maps")) {
          try {
            const u = new URL(v);
            const q = u.search ? `${u.search}&output=embed` : "?output=embed";
            return `https://www.google.com/maps${q}`;
          } catch {}
        }
        return `https://www.google.com/maps?q=${encodeURIComponent(v)}&output=embed`;
      })(),
      long_copy: n.long_copy || "",
      // âœ… SEO props
      seo_title: n.seo_title || "",
      seo_description: n.seo_description || "",
    },
  }));
}

const {
  title,
  summary,
  hero,
  map_embed,
  long_copy,
  cta1,
  seo_title,
  seo_description,
} = Astro.props as any;

// âœ… Compute SEO fallbacks
const pageSeoTitle = seo_title || title || "To Do";
const pageSeoDesc = seo_description || summary || "";
---

<Site
  showHeader={true}
  title={title}
  seo_title={pageSeoTitle}
  seo_description={pageSeoDesc}
>
  {hero && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={hero} fetchpriority="high" />
    </Fragment>
  )}

  <!-- LCP hero -->
  <section class="hero-bleed">
    {hero && (
      <img
        src={hero}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
      />
    )}
  </section>

  <div class="container">
    <h1>{title}</h1>
    <article class="long-copy" set:html={summary}></article>
  </div>


  {long_copy && (
    <div class="container">
      {/* Your long_copy can contain <h2 id="summer">, <h2 id="winter">, etc. */}
      <article class="long-copy" set:html={long_copy}></article>
    </div>
  )}

  <style>
    .intro { margin: 24px auto 20px; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin: 0 0 8px; color:#111827; }
    .intro p { font-size: 1rem; line-height:1.6; color:#1f2937; }

    .map-wrap h2{ font-size:1.25rem; margin:8px 0 12px; color:#111827; }
    .map-card{ border:1px solid #eee; border-radius:12px; overflow:hidden; box-shadow:0 1px 6px rgba(0,0,0,0.1); }

    .cta-card{ background:#fff; color:#111827; border:2px solid #e5e7eb; border-radius:16px; padding:28px 20px; margin:36px 0; text-align:center; box-shadow:0 6px 18px rgba(0,0,0,0.08); }
    .cta-card h2{ margin:0 0 10px; font-size:1.75rem; font-weight:700; }
    .cta-card p{ font-size:1rem; color:#374151; margin-bottom:18px; }
    .cta-btn{ display:inline-flex; align-items:center; justify-content:center; gap:8px; background:#0a7bff; color:#fff; text-decoration:none; font-weight:700; font-size:1.125rem; padding:12px 28px; border-radius:999px; box-shadow:0 4px 10px rgba(0,0,0,0.15); transition: background .15s ease, box-shadow .15s ease; }
    .cta-btn .cta-text{ text-decoration:none; }
    .cta-btn:hover{ background:#065aa3; box-shadow:0 6px 14px rgba(0,0,0,0.25); }

    .long-copy{ margin:20px 0 48px; font-size:1.05rem; line-height:1.8; color:#1f2937; }
    .long-copy p{ margin:0 0 1.25em; }
    .long-copy h2,.long-copy h3{ font-weight:700; color:#111827; line-height:1.3; margin:2em 0 .75em; }
    .long-copy h2{ font-size:1.5rem; border-left:4px solid #0a7bff; padding-left:.5rem; }
    .long-copy h3{ font-size:1.25rem; }
  </style>
</Site>
