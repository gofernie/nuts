---
// src/pages/to_do/[slug].astro
export const prerender = false;

import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

const slugParam = (Astro.params.slug || "").toString().trim().toLowerCase();

// ENV
const url = import.meta.env.PUBLIC_TODO_JSON;
if (!url) {
  throw new Error("Missing PUBLIC_TODO_JSON in .env (restart dev).");
}

/* ---------- helpers ---------- */
const get = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

const parseCard = (raw = "") => {
  // "Title | Subtitle | Body | /img.webp | /href"
  const [title, subtitle, body, img, href] = (raw || "").split("|").map(s => s.trim());
  if (!title) return null;
  const normImg = img
    ? (img.startsWith("http") ? img : img.startsWith("/") ? img : "/heroes/" + img)
    : "";
  return { title, subtitle, body, img: normImg, href };
};

/* ---------- load & pick row ---------- */
let row:any = null;
let debug:any = { slugParam };

try {
  const raw = await getJson<any>(url);
  const rows: any[] =
    Array.isArray(raw) ? raw :
    Array.isArray(raw?.data) ? raw.data :
    Array.isArray(raw?.rows) ? raw.rows : [];

  const normalized = rows.map((r:any) => {
    const title = get(r,"title");
    const explicitSlug = get(r,"slug").toLowerCase();
    const computedSlug = slugify(title || "");
    const status = get(r,"status");
    return {
      _raw: r,
      title,
      slug: explicitSlug || computedSlug,
      summary: get(r,"summary"),
      long_copy: get(r,"long_copy"),
      hero_img: get(r,"hero_img"),
      cta1: get(r,"cta1"),
      seo_title: get(r,"seo_title"),
      seo_description: get(r,"seo_description"),
      status,
      cards: [get(r,"card_1"), get(r,"card_2"), get(r,"card_3")].map(parseCard).filter(Boolean),
    };
  }).filter(n =>
    n.slug &&
    n.title &&
    n.slug !== "index" &&
    !/^draft$/i.test(n.status || "") &&
    !/^hidden$/i.test(n.status || "") &&
    !/^inactive$/i.test(n.status || "")
  );

  // try direct match first, then tolerant match
  row =
    normalized.find(n => n.slug === slugParam) ||
    normalized.find(n => slugify(n.title) === slugParam) ||
    null;

  debug.count = normalized.length;
  debug.found = !!row;
  debug.sampleSlugs = normalized.slice(0,8).map(n=>n.slug);
} catch (e:any) {
  throw new Error("Failed to load to_do row: " + (e?.message || String(e)));
}

if (!row) {
  // Helpful 404-style message in dev
  throw new Error(`to_do slug not found: "${slugParam}". Check your sheet's "slug" or "title".`);
}

const title          = row.title;
const summary        = row.summary || "";
const long_copy      = row.long_copy || "";
const hero           = row.hero_img ? heroPath(row.hero_img) : "";
const cta1           = row.cta1 || "";
const cards          = row.cards || [];
const pageSeoTitle   = row.seo_title || title || "To Do";
const pageSeoDesc    = row.seo_description || summary || "";
---

<Site showHeader={true} title={title} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  {hero && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={hero} fetchpriority="high" />
    </Fragment>
  )}

  <!-- LCP hero -->
  <section class="hero-bleed">
    {hero && (
      <img
        src={hero}
        alt={title}
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
        style="width:100%;height:100%;object-fit:cover;object-position:center"
      />
    )}
  </section>

  <div class="container intro">
    <h1>{title}</h1>
    {summary && <article class="long-copy" set:html={summary}></article>}
  </div>

  {cards.length > 0 && (
    <div class="container">
      <div class="card-grid">
        {cards.map((c:any) => (
          <article class="tease">
            {c.img && <img class="tease-img" src={c.img} alt={c.title} width="1200" height="800" loading="lazy" decoding="async" />}
            <div class="tease-body">
              <h3 class="tease-title">{c.title}</h3>
              {c.subtitle && <p class="tease-sub">{c.subtitle}</p>}
              {c.body && <p class="tease-copy">{c.body}</p>}
              {c.href && <a class="tease-cta" href={c.href} aria-label={`Open ${c.title}`}>Learn more →</a>}
            </div>
          </article>
        ))}
      </div>
    </div>
  )}

  {cta1 && (
    <div class="container">
      <div class="cta-card">
        <h2>Plan your {title}</h2>
        <p>See routes, tips, and the best times to go.</p>
        <a href={cta1} class="cta-btn"><span class="cta-text">Start planning</span></a>
      </div>
    </div>
  )}

  {long_copy && (
    <div class="container">
      <article class="long-copy" set:html={long_copy}></article>
    </div>
  )}

  <style>
    .container { max-width: 1300px; margin-inline: auto; padding: 0 1rem; }

    .intro { margin: 24px auto 20px; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin: 0 0 8px; color:#111827; }

    .long-copy { margin: 12px 0 28px; font-size:1.05rem; line-height:1.8; color:#1f2937; }
    .long-copy p { margin: 0 0 1.25em; }
    .long-copy h2, .long-copy h3 { font-weight:700; color:#111827; line-height:1.3; margin:2em 0 .75em; }
    .long-copy h2 { font-size:1.5rem; border-left:4px solid #0a7bff; padding-left:.5rem; }
    .long-copy h3 { font-size:1.25rem; }

    /* ✅ 4-up card grid on desktop */
    .card-grid {
      display: grid;
      grid-template-columns: repeat(4, minmax(0, 1fr));
      gap: 20px;
      margin: 6px 0 24px;
    }
    @media (max-width: 1200px) { .card-grid { grid-template-columns: repeat(3, minmax(0, 1fr)); } }
    @media (max-width: 900px)  { .card-grid { grid-template-columns: repeat(2, minmax(0, 1fr)); } }
    @media (max-width: 640px)  { .card-grid { grid-template-columns: 1fr; } }

    .tease {
      background:#fff; border:1px solid #e5e7eb; border-radius:16px; overflow:hidden;
      box-shadow:0 2px 10px rgba(0,0,0,0.06);
      display:flex; flex-direction:column;
    }
    .tease-img { width:100%; height:220px; object-fit:cover; display:block; }
    .tease-body { padding:16px 16px 18px; }
    .tease-title { margin:0 0 6px; font-size:1.15rem; color:#111827; }
    .tease-sub { margin:0 0 8px; color:#374151; font-weight:600; }
    .tease-copy { margin:0 0 12px; color:#374151; }
    .tease-cta { display:inline-flex; gap:6px; font-weight:700; text-decoration:none; color:#0a7bff; border-bottom:2px solid transparent; }
    .tease-cta:hover { border-bottom-color:#0a7bff; }

    /* Page hero */
    .hero-bleed {
      position:relative; left:50%; right:50%;
      margin-left:-50vw; margin-right:-50vw;
      width:100vw; max-width:100vw;
      height: clamp(300px, 38vw, 520px);
      overflow:hidden; background:#e5e7eb;
    }
    .hero-bleed img { width:100%; height:100%; display:block; object-fit:cover; object-position:center; }
  </style>
</Site>
