---
// File: src/pages/to_do/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import RVEmbed from "../../components/RVEmbed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";
import sanitizeHtml from "sanitize-html";

/* ---------- utils ---------- */
const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

/* ---------- config ---------- */
const SUMMARY_IS_HTML = true;
const BODY_IS_HTML    = true;

/* ---------- allowed HTML ---------- */
const ALLOWED = {
  allowedTags: ["p","h2","h3","h4","ul","ol","li","a","strong","em","br","hr","span"],
  allowedAttributes: { a: ["href","target","rel"] },
};

/* ---------- build static paths ---------- */
export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_TODO_JSON;
  if (!url) return [];
  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch { return []; }

  const indexRow =
    rows.find((r:any) =>
      (String(r?.slug ?? r?.Slug ?? r?.SLUG ?? "").trim().toLowerCase()) === "index"
    ) || null;

  const items = rows.map((r:any) => {
    const status  = (String(r?.status ?? r?.Status ?? r?.STATUS ?? "").trim().toLowerCase());
    const rawSlug = (String(r?.slug   ?? r?.Slug   ?? r?.SLUG   ?? "").trim().toLowerCase());
    const hidden  = status === "hidden" || status === "inactive" || rawSlug === "index";
    if (hidden) return null;
    const title   = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    const slug    = (rawSlug || slugify(title)).toLowerCase();
    return slug ? { params: { slug }, props: { row: r, indexRow } } : null;
  }).filter(Boolean) as any[];

  return items;
}

/* ---------- page data ---------- */
type Row = {
  title?: string; Title?: string; TITLE?: string;
  summary?: string; Summary?: string; SUMMARY?: string;
  long_copy?: string; longcopy?: string; LongCopy?: string;
  hero_img?: string; heroImg?: string; HeroImg?: string;
  seo_title?: string; seoTitle?: string;
  seo_description?: string; seoDescription?: string;
  cta1?: string; rv_block?: string; slug?: string;
  spare_1?: string; spare_2?: string; spare_3?: string;
  spare_1_caption?: string; spare_2_caption?: string; spare_3_caption?: string;
};

const { row: rowIn, indexRow: indexRowIn } = Astro.props as { row?: Row; indexRow?: Row | null };
const row = rowIn ?? ({} as Row);
const indexRow = indexRowIn ?? null;

/* ---------- fields ---------- */
const title    = String(row?.title ?? row?.Title ?? row?.TITLE ?? "Things To Do in Fernie").trim();
const summary  = String(row?.summary ?? row?.Summary ?? row?.SUMMARY ?? "").trim();
const body     = String(row?.long_copy ?? row?.longcopy ?? row?.LongCopy ?? "").trim();
const heroImg  = String(row?.hero_img ?? row?.heroImg ?? row?.HeroImg ?? "").trim();
const seoTitle = String(row?.seo_title ?? row?.seoTitle ?? title).trim();
const seoDesc  = String(row?.seo_description ?? row?.seoDescription ?? summary ?? "").trim();

/* ---------- sanitize ---------- */
const safeSummary = SUMMARY_IS_HTML ? sanitizeHtml(summary, ALLOWED) : summary;
const safeBody    = BODY_IS_HTML    ? sanitizeHtml(body, ALLOWED)    : body;

/* ---------- gallery (spare_1..3) with automatic pathing ---------- */
// filename only  -> /img/hero/activity/<file>
// subpath        -> /img/hero/<subpath>
// /img/hero/...  -> used as-is
// http(s) URL    -> used as-is
function resolveImgFromCell(v:string): string {
  const s = String(v ?? "").trim();
  if (!s) return "";
  if (/^https?:\/\//i.test(s)) return s;
  if (s.startsWith("/img/hero/")) return s;
  const rel = s.includes("/") ? s : `activity/${s}`;
  return heroPath(rel);
}

const gallery = [1,2,3].map(n => {
  const raw = (row as any)[`spare_${n}`];
  const src = resolveImgFromCell(raw);
  const cap = String((row as any)[`spare_${n}_caption`] ?? "").trim();
  return src ? { src, cap } : null;
}).filter(Boolean) as {src:string; cap:string}[];

/* ---------- RealtyVis embeds ---------- */
const rawCta =
  String(indexRow?.cta1 ?? (indexRow as any)?.rv_block ?? "").trim() ||
  String(import.meta.env.PUBLIC_DEFAULT_RV_BLOCK ?? "").trim();

const ID_RE = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i;
function stripScripts(html:string) {
  return html.replace(/<script\b[^>]*>[\s\S]*?<\/script>/gi, "");
}
function extractRvId(html:string) {
  const clean = stripScripts(html);
  const m = clean.match(/data-rv-block=["']?([A-Z0-9]{8}-[A-Z0-9]{8})["']?/i);
  return m?.[1] || "";
}
const rvBlockId = ID_RE.test(rawCta) ? rawCta : extractRvId(rawCta);
const hasValidBlock = ID_RE.test(rvBlockId);

const heroPreload = heroImg ? { href: heroPath(heroImg) } : null;
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc} heroPreload={heroPreload}>
  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    containerPad={12}
    flush={false}
    preload={false}
  />

  {summary && (
    <div class="container summary-wrap">
      <div class="lead prose prose-neutral max-w-none" set:html={safeSummary}></div>
    </div>
  )}

  {gallery.length > 0 && (
    <div class="container gallery-wrap">
      <div class="gallery">
        {gallery.map(({src,cap}) => (
          <figure class="tile">
            <img loading="lazy" decoding="async" src={src} alt={cap || title} />
            {cap && <figcaption>{cap}</figcaption>}
          </figure>
        ))}
      </div>
    </div>
  )}

  {body && (
    <div class="container body-wrap">
      {/* ✅ Make long copy exactly same font as summary */}
      <div class="lead prose prose-neutral max-w-none" set:html={safeBody}></div>
    </div>
  )}

  {rawCta && (
    <div class="container listings-wrap">
      <h2 class="h2">Current Fernie Listings</h2>

      {hasValidBlock ? (
        <div class="rv-host">
          <RVEmbed block={rvBlockId} minHeight="1000px" showSkeleton={false} />
        </div>
      ) : (
        <div class="rv-fallback">
          <p>Listings are unavailable right now.</p>
          <p><a href="/search">Browse all listings</a></p>
        </div>
      )}

      {/* Hover-to-warm RealtyVis */}
      {hasValidBlock && (
        <script is:inline>
{`(function(){
  let warmed=false;
  function warm(){
    if(warmed) return; warmed=true;
    new Image().src="https://app.realtyvis.com/favicon.ico";
    new Image().src="https://cdn.realtyvis.com/favicon.ico";
    try{
      fetch("https://app.realtyvis.com/css/site.min.css",{mode:"no-cors"}).catch(()=>{});
      fetch("https://app.realtyvis.com/js/site.min.js",{mode:"no-cors"}).catch(()=>{});
    }catch(e){}
  }
  const host=document.querySelector(".rv-host")||document.querySelector(".listings-wrap");
  if(!host) return;
  ["pointerover","touchstart","focusin"].forEach(ev=>{
    host.addEventListener(ev,warm,{once:true,passive:true});
  });
})();`}
        </script>
      )}
    </div>
  )}

  {!rawCta && (
    <div class="container note">
      <p><strong>Heads-up:</strong> No <code>index!cta1</code> (or <code>PUBLIC_DEFAULT_RV_BLOCK</code>) was found for the To-Do embeds.</p>
    </div>
  )}

  <style>
    .container{ max-width:1200px; margin-inline:auto; padding-inline:12px; }
    .summary-wrap{ padding-top:16px; }
    .body-wrap{ padding-top:12px; }

    /* Shared font for summary & long copy */
    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }

    /* Ensure Tailwind Typography doesn’t shrink body text */
    .lead.prose p, .lead.prose li {
      font-size:1.075rem !important;
      line-height:1.6 !important;
      color:#111827;
    }
    .lead.prose :where(h2,h3){ margin-top:1.2em; }

    /* --- Gallery strip --- */
    .gallery-wrap{ padding-top:14px; padding-bottom:6px; }
    .gallery{
      display:grid; gap:10px;
      grid-template-columns: repeat(auto-fit,minmax(220px,1fr));
    }
    .tile{ position:relative; overflow:hidden; border-radius:14px; background:#f4f4f5; }
    .tile img{
      width:100%; height:220px; object-fit:cover;
      transform: scale(1.02); transition: transform .4s ease, filter .4s ease;
    }
    .tile:hover img{ transform: scale(1.06); filter: saturate(1.1) contrast(1.05); }
    .tile figcaption{
      position:absolute; left:10px; bottom:10px; padding:4px 8px;
      background:rgba(0,0,0,.55); color:#fff; font-size:.85rem; border-radius:8px;
    }

    .listings-wrap{ padding-top:16px; padding-bottom:8px; }
    .h2{ font-size: clamp(20px,2.6vw,28px); margin: 0 0 10px; }

    .rv-fallback{
      margin-top: 12px; padding:12px 16px; background:#fff3cd;
      border:1px solid #ffe69c; border-radius:10px; color:#5c3c00;
    }

    .note{
      color:#666; background:#fafafa; border:1px solid #eee;
      padding:12px 14px; border-radius:8px; margin-top:16px;
    }

    /* Kill shimmer/skeletons from RV */
    .rv-host [class*="skeleton"],
    .rv-host [class*="Skeleton"],
    .rv-host [class*="loading"],
    .rv-host [data-skeleton],
    .rv-host .rv-skeleton,
    .rv-host .loading-skeleton,
    .rv-host .rv-loading {
      animation: none !important;
      background: none !important;
      background-image: none !important;
      box-shadow: none !important;
      opacity: 0 !important;
      pointer-events: none !important;
    }
    .rv-host * { animation-duration: 0s !important; transition: none !important; }
  </style>
</Site>
