---
// File: src/pages/to_do/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import RVEmbed from "../../components/RVEmbed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";
import sanitizeHtml from "sanitize-html";
import CTAForm from "../../components/CTAForm.astro"; // ← NEW

/* ---------- sanitize config (arrays for allowedAttributes) ---------- */
const ALLOWED = {
  allowedTags: [
    "p","h2","h3","h4","ul","ol","li","a","strong","em","br","hr","span",
    "blockquote","code","pre","figure","figcaption","img","div"
  ],
  allowedAttributes: {
    a: ["href","target","rel"],
    img: ["src","alt","title","loading","decoding"]
  },
  transformTags: {
    a: (_tag: any, attr: any) => ({
      tagName: "a",
      attribs: { ...attr, rel: "noopener nofollow ugc" }
    })
  }
};

/* ---------- STATIC PATHS ---------- */
export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_TODO_JSON;
  if (!url) return [];

  const getField = (r:any, k:string) =>
    (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "")
      .toString().trim();

  const slugifyLocal = (v:string) =>
    (v ?? "").toLowerCase().trim()
      .replace(/&/g,"-and-")
      .replace(/[^a-z0-9]+/g,"-")
      .replace(/^-+|-+$/g,"");

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch { return []; }

  const indexRow =
    rows.find((r:any) => getField(r,"slug").toLowerCase() === "index") || null;

  const items = rows.map((r:any) => {
    const status  = getField(r,"status").toLowerCase();
    const rawSlug = getField(r,"slug").toLowerCase();
    const hidden  = status === "hidden" || status === "inactive" || rawSlug === "index";
    if (hidden) return null;

    const title = getField(r,"title");
    const slug  = (rawSlug || slugifyLocal(title)).toLowerCase();
    return slug ? { params: { slug }, props: { row: r, indexRow } } : null;
  }).filter(Boolean) as any[];

  return items;
}

/* ---------- PAGE HELPERS ---------- */
const get = (r:any, ...keys:string[]) => {
  for (const k of keys) {
    const v = r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()];
    if (v !== undefined && v !== null && String(v).trim() !== "") return String(v).trim();
  }
  return "";
};
const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

/* ---------- PAGE DATA ---------- */
type Row = Record<string, any>;
const { row: rowIn, indexRow: indexRowIn } = Astro.props as { row?: Row; indexRow?: Row | null };
const row = rowIn ?? {};
const indexRow = indexRowIn ?? null;

/* basic fields */
const title    = get(row, "title") || "Things To Do in Fernie";
const subhead  = get(row, "subhead","kicker");
const kicker   = subhead || get(row,"Kicker","KICKER");
const heroImg  = get(row, "hero_img","heroImg","HeroImg");
const seoTitle = get(row, "seo_title","seoTitle") || title;

/* content fields */
const summaryRaw = get(row, "summary","Summary","SUMMARY","excerpt","description");
const bodyRaw    = get(row, "long_copy","longcopy","LongCopy","body","content","longtext","Long Text");

/* sanitize as HTML */
const safeSummary = sanitizeHtml(summaryRaw, ALLOWED);
const safeBody    = sanitizeHtml(bodyRaw, ALLOWED);

/* gallery from spare_1..3 (auto-path filenames to /img/hero/activity/) */
function resolveImgFromCell(v:string): string {
  const s = (v ?? "").trim();
  if (!s) return "";
  if (/^https?:\/\//i.test(s)) return s;
  if (s.startsWith("/img/hero/")) return s;
  const rel = s.includes("/") ? s : `activity/${s}`;
  return heroPath(rel);
}
const gallery = [1,2,3].map(n => {
  const src = resolveImgFromCell(get(row, `spare_${n}`));
  const cap = get(row, `spare_${n}_caption`);
  return src ? { src, cap } : null;
}).filter(Boolean) as {src:string; cap:string}[];

/* RealtyVis embed (from INDEX row cta1 or env fallback) */
const rawCta =
  get(indexRow ?? {}, "cta1","rv_block") ||
  String(import.meta.env.PUBLIC_DEFAULT_RV_BLOCK ?? "").trim();

const ID_RE = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i;
const stripScripts = (html:string) => html.replace(/<script\b[^>]*>[\s\S]*?<\/script>/gi, "");
const extractRvId  = (html:string) => {
  const m = stripScripts(html).match(/data-rv-block=["']?([A-Z0-9]{8}-[A-Z0-9]{8})["']?/i);
  return m?.[1] || "";
};
const rvBlockId     = ID_RE.test(rawCta) ? rawCta : extractRvId(rawCta);
const hasValidBlock = ID_RE.test(rvBlockId);

/* meta + debug */
const heroPreload = heroImg ? { href: heroPath(heroImg) } : null;
const seoDesc     = (summaryRaw || "").slice(0, 160);
const debug       = Astro.url?.searchParams?.get("debug") === "1";

/* ---------- Formspree ---------- */
const formspreeId = String(import.meta.env.PUBLIC_FORMSPREE_ID ?? "f/yourFormIdHere");
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc} heroPreload={heroPreload}>
  {debug && (
    <pre style="max-width:1200px;margin:8px auto;padding:8px 12px;border:1px solid #eee;background:#fafafa;overflow:auto">
      {JSON.stringify(row, null, 2)}
    </pre>
  )}

  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    kicker={kicker}
    containerMax={1200}
    containerPad={12}
    flush={false}
    preload={false}
  />

  {safeSummary && (
    <div class="container summary-wrap">
      <div class="lead prose prose-neutral max-w-none" set:html={safeSummary}></div>
    </div>
  )}

  {gallery.length > 0 && (
    <div class="container gallery-wrap">
      <div class="gallery">
        {gallery.map(({src,cap}) => (
          <figure class="tile">
            <img loading="lazy" decoding="async" src={src} alt={cap || title} />
            {cap && <figcaption>{cap}</figcaption>}
          </figure>
        ))}
      </div>
    </div>
  )}

  {safeBody && (
    <div class="container body-wrap">
      <div class="lead prose prose-neutral max-w-none" set:html={safeBody}></div>
    </div>
  )}

  {rawCta && (
    <div class="container listings-wrap">
      <h2 class="h2">New Fernie Listings</h2>

      {hasValidBlock ? (
        <div class="rv-host">
          <!-- ✅ fixed prop name -->
          <RVEmbed blockId={rvBlockId} minHeight="560px" showSkeleton={false} />
        </div>
      ) : (
        <div class="rv-fallback">
          <p>Listings are unavailable right now.</p>
          <p><a href="/search">Browse all listings</a></p>
        </div>
      )}

      {hasValidBlock && (
        <script is:inline>
{`(function(){
  let warmed=false;
  function warm(){
    if(warmed) return; warmed=true;
    new Image().src="https://app.realtyvis.com/favicon.ico";
    new Image().src="https://cdn.realtyvis.com/favicon.ico";
    try{
      fetch("https://app.realtyvis.com/css/site.min.css",{mode:"no-cors"}).catch(()=>{});
      fetch("https://app.realtyvis.com/js/site.min.js",{mode:"no-cors"}).catch(()=>{});
    }catch(e){}
  }
  const host=document.querySelector(".rv-host")||document.querySelector(".listings-wrap");
  if(!host) return;
  ["pointerover","touchstart","focusin"].forEach(ev=>{
    host.addEventListener(ev,warm,{once:true,passive:true});
  });
})();`}
        </script>
      )}
    </div>
  )}

  {!rawCta && (
    <div class="container note">
      <p><strong>Heads-up:</strong> No <code>index!cta1</code> (or <code>PUBLIC_DEFAULT_RV_BLOCK</code>) was found for the To-Do embeds.</p>
    </div>
  )}

  <!-- ===== Bottom CTA ===== -->
  <div class="container cta-bottom-wrap">
    <CTAForm
      formId={formspreeId}
      title="Plan the perfect Fernie day"
      subtitle="Share your dates and interests—I'll send a quick, personalized plan with local picks."
      pageSlug={Astro.params.slug}
      pageTitle={title}
    />
  </div>

  <style>
    .container{ max-width:1200px; margin-inline:auto; padding-inline:12px; }
    .summary-wrap{ padding-top:10px; }
    .body-wrap{ padding-top:12px; }

    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }
    .lead.prose p, .lead.prose li {
      font-size:1.075rem !important; line-height:1.6 !important; color:#111827;
    }
    .lead.prose :where(h2,h3){ margin-top:1.2em; }

    .gallery-wrap{ padding-top:14px; padding-bottom:6px; }
    .gallery{
      display:grid; gap:10px;
      grid-template-columns: repeat(auto-fit,minmax(220px,1fr));
    }
    .tile{ position:relative; overflow:hidden; border-radius:14px; background:#f4f4f5; }
    .tile img{
      width:100%; height:220px; object-fit:cover;
      transform: scale(1.02); transition: transform .4s ease, filter .4s ease;
    }
    .tile:hover img{ transform: scale(1.06); filter: saturate(1
