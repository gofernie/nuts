---
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_TODO_JSON;
  if (!url) return [];

  let rows: any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw)
      ? raw
      : Array.isArray(raw?.data)
        ? raw.data
        : Array.isArray(raw?.rows)
          ? raw.rows
          : [];
  } catch {
    return [];
  }

  const items = rows
    .map((r: any) => {
      const get = (k: string) =>
        (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "")
          .toString()
          .trim();

      const title = get("title");
      if (!title) return null;

      const computedSlug = title
        .toLowerCase()
        .replace(/&/g, "-and-")
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/^-+|-+$/g, "");

      return {
        slug: get("slug") || computedSlug,
        title,
        summary: get("summary"),
        hero_img: get("hero_img"),
        map_embed: get("map_embed"),
        long_copy: get("long_copy"),
        cta1: get("cta1"),
        card_1: get("card_1"),
        card_2: get("card_2") || get("crad_2"),
        card_3: get("card_3"),
        status: get("status"),
        seo_title: get("seo_title"),
        seo_description: get("seo_description"),
      };
    })
    .filter(
      (r) =>
        r &&
        r.slug &&
        r.title &&
        r.slug.toLowerCase() !== "index" &&
        !/^draft$/i.test(r.status || "")
    );

  return items.map((n: any) => ({
    params: { slug: n.slug },
    props: {
      title: n.title,
      summary: n.summary || "",
      hero: heroPath(n.hero_img),
      cta1: n.cta1 || "",
      map_embed: (() => {
        const v = (n.map_embed || "").trim();
        if (!v) return "";
        const m = v.match(/src="([^"]+)"/i);
        if (m?.[1]) return m[1];
        if (v.includes("google.com/maps") && v.includes("embed")) return v;
        if (v.includes("google.com/maps")) {
          try {
            const u = new URL(v);
            const q = u.search ? `${u.search}&output=embed` : "?output=embed";
            return `https://www.google.com/maps${q}`;
          } catch {}
        }
        return `https://www.google.com/maps?q=${encodeURIComponent(v)}&output=embed`;
      })(),
      long_copy: n.long_copy || "",
      card_1: n.card_1 || "",
      card_2: n.card_2 || "",
      card_3: n.card_3 || "",
      seo_title: n.seo_title || "",
      seo_description: n.seo_description || "",
    },
  }));
}

type RawCard = string;

const {
  title,
  summary,
  hero,
  map_embed,
  long_copy,
  cta1,
  card_1,
  card_2,
  card_3,
  seo_title,
  seo_description,
} = Astro.props as any;

const pageSeoTitle = seo_title || title || "To Do";
const pageSeoDesc = seo_description || summary || "";

const searchUrl = `/search/?q=${encodeURIComponent(title || "")}`;
const contactUrl = `/contact/`;
const primaryCtaUrl = (cta1 || "").trim() || searchUrl;

function parseCard(
  raw: RawCard,
  fallback: { title: string; href: string; copy?: string; img?: string }
) {
  const clean = (raw || "").trim();
  if (!clean) return { ...fallback };

  if (clean.startsWith("{")) {
    try {
      const obj = JSON.parse(clean);
      return {
        title: (obj.title ?? fallback.title).toString(),
        href: (obj.href ?? fallback.href).toString(),
        copy: (obj.copy ?? fallback.copy ?? "").toString(),
        img: obj.img ? obj.img.toString() : (fallback.img || ""),
      };
    } catch {}
  }

  if (clean.includes("|")) {
    const [t, h, c, i] = clean.split("|").map((s) => s.trim());
    return {
      title: t || fallback.title,
      href: h || fallback.href,
      copy: c || fallback.copy || "",
      img: i || fallback.img || "",
    };
  }

  try {
    const u = new URL(clean);
    return { title: fallback.title, href: u.toString(), copy: fallback.copy || "", img: fallback.img || "" };
  } catch {
    return { title: clean, href: fallback.href, copy: fallback.copy || "", img: fallback.img || "" };
  }
}

const cardA = parseCard(card_1, {
  title: `Start ${title}`,
  href: primaryCtaUrl,
  copy: "Open the main action and get moving.",
  img: "",
});

const cardB = parseCard(card_2, {
  title: "Explore the Map",
  href: map_embed || searchUrl,
  copy: map_embed ? "View the area on an interactive map." : "Jump into listings search.",
  img: "",
});

const cardC = parseCard(card_3, {
  title: "Talk to Chris",
  href: contactUrl,
  copy: `Questions about ${title}? Get quick answers.`,
  img: "",
});

const isExternal = (href: string) => /^https?:\/\//i.test(href);

/* ðŸ‘‡ CHOOSE THIS PAGEâ€™S HERO HEIGHT (local, bulletproof) */
const HERO_H   = "50vh";
const HERO_HSM = "38vh";
---
<Site showHeader={true} title={title} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  {hero && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={hero} fetchpriority="high" />
    </Fragment>
  )}

  <!-- LCP hero: inline CSS vars override everything -->
  <section class="hero-bleed" style={`--hero-h:${HERO_H}; --hero-h-sm:${HERO_HSM};`}>
    {hero && <img src={hero} alt="" fetchpriority="high" loading="eager" decoding="async" width="2000" height="1000" />}
  </section>

  <!-- INTRO -->
  <div class="container intro">
    <h1>{title}</h1>
    {summary && <div class="summary" set:html={summary}></div>}
  </div>

  <!-- Quick Cards -->
  <section class="container quick-cards" aria-label="Quick actions">
    <div class="qc-grid">
      {[cardA, cardB, cardC].map((card) => (
        <a
          class="qc-card"
          href={card.href}
          target={isExternal(card.href) ? "_blank" : undefined}
          rel={isExternal(card.href) ? "noopener" : undefined}
          data-astro-prefetch={!isExternal(card.href) ? true : undefined}
        >
          <div class="qc-media" style={card.img ? `--qc-img:url('${card.img}')` : undefined} aria-hidden="true" />
          <div class="qc-body">
            <h3 class="qc-title">{card.title}</h3>
            {card.copy && <p class="qc-copy">{card.copy}</p>}
          </div>
        </a>
      ))}
    </div>
  </section>

  {long_copy && (
    <div class="container">
      <article class="long-copy" set:html={long_copy}></article>
    </div>
  )}

  <style>
    .intro { margin: 24px auto 20px; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin: 0 0 8px; color:#111827; }
    .intro > p { font-size: 1rem; line-height:1.6; color:#1f2937; }

    .quick-cards { margin: 18px auto 10px; }
    .qc-grid { display: grid; gap: 16px; grid-template-columns: 1fr; }
    @media (min-width: 720px) { .qc-grid { grid-template-columns: repeat(3,1fr); } }

    .qc-card {
      display: grid; grid-template-rows: auto 1fr;
      background:#fff; border:1px solid #e6e6e6; border-radius:16px; overflow:hidden;
      text-decoration:none; color:inherit;
      box-shadow:0 1px 2px rgba(0,0,0,.04);
      transition: transform .22s cubic-bezier(.2,.7,.2,1), box-shadow .22s ease, border-color .22s ease;
    }
    .qc-card:hover { transform:translateY(-6px); box-shadow:0 10px 24px rgba(17,24,39,.08),0 3px 6px rgba(17,24,39,.06); border-color:#e3e7ee; }
    .qc-card:active { transform:translateY(-2px); }

    .qc-media {
      aspect-ratio:16/9;
      background: var(--qc-img) no-repeat center / cover,
                  radial-gradient(120% 120% at 10% 0%,#f1f5f9,#eaeef4);
    }
   .qc-body { padding:14px 16px 16px; }
   .qc-title { margin:0 0 6px; font-size:1.05rem; font-weight:800; color:#0f172a; }
   .qc-copy { margin:0; font-size:.96rem; line-height:1.5; color:#475569;
      display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical; overflow:hidden; }
  </style>
</Site>
