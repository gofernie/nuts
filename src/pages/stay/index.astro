---
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

const url = import.meta.env.PUBLIC_STAY_JSON;

type Row = {
  raw_slug?: string;
  title?: string;
  summary?: string;
  hero_img?: string;
  status?: string;
  seo_title?: string;
  seo_description?: string;
  category?: string;
  slug?: string;
  sort?: number;
  spare_1?: string; // hotels copy
  spare_2?: string; // airbnb copy
};

let items: Row[] = [];
let header: Row | null = null;
let error: string | null = null;
let hotelsCopy: string | null = null;
let airbnbsCopy: string | null = null;

try {
  if (!url) throw new Error("Missing PUBLIC_STAY_JSON in .env (restart dev).");
  const raw = await getJson<any>(url);

  const rows: any[] =
    Array.isArray(raw) ? raw :
    Array.isArray(raw?.data) ? raw.data :
    Array.isArray(raw?.rows) ? raw.rows : [];

  const get = (r:any,k:string)=>
    (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

  const normalize = (r:any): Row => {
    const title = get(r,"title");
    const raw_slug = get(r,"slug");
    const computedSlug = (title||"").toLowerCase()
      .replace(/&/g,"-and-")
      .replace(/[^a-z0-9]+/g,"-")
      .replace(/^-+|-+$/g,"");

    const rawCat = get(r,"category").toLowerCase();
    const cat =
      /^(hotel|hotels)$/.test(rawCat) ? "hotel" :
      /^(air\s*bnb|airbnb|bnb|short[-\s]?term|str|cabin|suite|lodge)$/.test(rawCat) ? "airbnb" :
      "";

    const sort = Number.isFinite(+r?.sort) ? +r.sort : Number.MAX_SAFE_INTEGER;

    return {
      raw_slug,
      title,
      summary: get(r,"summary"),
      hero_img: get(r,"hero_img"),
      status: get(r,"status"),
      seo_title: get(r,"seo_title"),
      seo_description: get(r,"seo_description"),
      category: cat,
      slug: raw_slug || computedSlug,
      sort,
      spare_1: get(r,"spare_1"),
      spare_2: get(r,"spare_2"),
    };
  };

  const normalized = rows.map(normalize);

  header =
    normalized.find(r => (r.raw_slug ?? "").toLowerCase() === "index") ??
    normalized.find(r => (r.status ?? "").toLowerCase() === "header") ??
    normalized.find(r => !r.raw_slug) ?? null;

  items = normalized.filter((r) => {
    if (!r.slug || !r.title) return false;
    if (header && r === header) return false;
    const s = (r.status ?? "").toLowerCase();
    return !["draft","hidden","inactive"].includes(s);
  });

  items.sort((a,b) => (a.sort! - b.sort!) || a.title!.localeCompare(b.title!));

  // take spare_1 and spare_2 from header row
  if (header) {
    hotelsCopy = header.spare_1 || null;
    airbnbsCopy = header.spare_2 || null;
  }
} catch (e:any) {
  error = e?.message || String(e);
}

const heroSrc = header?.hero_img ? heroPath(header.hero_img) : "";
const pageSeoTitle = header?.seo_title || header?.title || "Places to Stay";
const pageSeoDesc  = header?.seo_description || header?.summary || "";

const hotels   = items.filter(i => i.category === "hotel");
const airbnbs  = items.filter(i => i.category === "airbnb");
---

<Site showHeader={true} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  <section class="hero-bleed">
    {heroSrc && (
      <img
        src={heroSrc}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
      />
    )}
  </section>

  <div class="container intro">
    <h1>{header?.title || "Places to Stay in Fernie"}</h1>
    {(header?.summary || pageSeoDesc) && <p>{header?.summary || pageSeoDesc}</p>}
  </div>

   <section class="container listings">
    <!-- RealtyVis Embed -->
    <div data-rv-block="MQP2VMLT-CRO04YLM"></div>
    <script src="https://cdn.realtyvis.com/js/embed.js"></script>
  </section>

  <div class="container">
    {error && <p class="error">Error: {error}</p>}
    {!error && items.length === 0 && (
      <p>No stays yet. Check <code>PUBLIC_STAY_JSON</code> and your sheet’s <code>status</code>/<code>slug</code>/<code>category</code> columns.</p>
    )}

    {hotels.length > 0 && (
      <section class="group anchor-target" id="hotels">
        <h2 class="group-title">Hotels</h2>
        {hotelsCopy && <div class="group-copy" set:html={hotelsCopy}></div>}
        <div class="grid">
          {hotels.map((n) => (
            <a class="card" href={`/stay/${n.slug}`}>
              <div class="thumb">
                {n.hero_img ? (
                  <img src={heroPath(n.hero_img)} alt={n.title} loading="lazy" decoding="async" />
                ) : <div class="ph" aria-hidden="true">No image</div>}
              </div>
              <div class="body">
                <strong>{n.title}</strong>
                {n.summary && <p>{n.summary.split(/\s+/).slice(0,10).join(" ") + (n.summary.split(/\s+/).length>10 ? "…" : "")}</p>}
              </div>
            </a>
          ))}
        </div>
      </section>
    )}

    {airbnbs.length > 0 && (
      <section class="group anchor-target" id="airbnb">
        <h2 class="group-title">Airbnb & Cabins</h2>
        {airbnbsCopy && <div class="group-copy" set:html={airbnbsCopy}></div>}
        <div class={`grid ${airbnbs.length === 1 ? 'single' : ''}`}>
          {airbnbs.map((n) => (
            <a class="card" href={`/stay/${n.slug}`}>
              <div class="thumb">
                {n.hero_img ? (
                  <img src={heroPath(n.hero_img)} alt={n.title} loading="lazy" decoding="async" />
                ) : <div class="ph" aria-hidden="true">No image</div>}
              </div>
              <div class="body">
                <strong>{n.title}</strong>
                {n.summary && <p>{n.summary.split(/\s+/).slice(0,10).join(" ") + (n.summary.split(/\s+/).length>10 ? "…" : "")}</p>}
              </div>
            </a>
          ))}
        </div>
      </section>
    )}
  </div>

  <style>
    .container { max-width: 1200px; margin-left: auto; margin-right: auto; padding: 0 1rem; }
    .intro { margin-top: 24px; margin-bottom: 20px; text-align: left; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin: 0 0 8px 0; color: #111827; }
    .intro p { font-size: 1rem; line-height: 1.6; margin: 0; color: #1f2937; }

    .group { margin: 50px 0; }
    .group-title { margin: 0 0 10px; font-size: 1.4rem; font-weight: 800; color:#111827; }
    .group-copy { margin: 0 0 16px; font-size: 1rem; line-height: 1.6; color: #444; }

    .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 16px; }
    .grid.single { grid-template-columns: clamp(240px, 45vw, 320px); justify-content: start; }
    .grid.single > .card { max-width: 320px; }

    .card {
      display:flex; flex-direction:column; background:#fff; border-radius:12px; overflow:hidden;
      border:1px solid #eee; text-decoration:none; color:inherit; box-shadow:0 1px 3px rgba(0,0,0,0.05);
      transform:translateY(0); transition: transform .25s ease, box-shadow .25s ease;
    }
    .card:hover { transform: translateY(-6px); box-shadow: 0 6px 16px rgba(0,0,0,0.12); }

    .thumb { aspect-ratio:16/9; background:#f6f6f6; display:grid; place-items:center; }
    .thumb img { width:100%; height:100%; object-fit:cover; display:block; }

    .ph { font-size:12px; color:#999; }
    .body { padding:12px; }
    .body p { margin:.4rem 0 0 0; color:#555; font-size:.95rem; line-height:1.35; }

    .error { color:#b00; }
    .anchor-target { scroll-margin-top: calc(var(--header-h) + 25px); }
  </style>
</Site>
