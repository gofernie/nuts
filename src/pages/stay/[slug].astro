/** File: src/pages/stay/[slug].astro */
export const prerender = false;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* ---------- helpers ---------- */
const RESERVED = new Set(["index","page","pages","all","view","list"]);
const get = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

const visible = (r:any) => {
  const s = get(r,"status").toLowerCase();
  const rawSlug = get(r,"slug").toLowerCase();
  return s !== "hidden" && s !== "inactive" && rawSlug !== "index" && !RESERVED.has(rawSlug);
};

/* ---------- static paths ---------- */
export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_STAY_JSON;
  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch {
    return [];
  }

  const items = rows.map((r:any) => {
    if (!visible(r)) return null;
    const title = get(r,"title");
    const rawSlug = get(r,"slug");
    const slug = (rawSlug || slugify(title));
    if (!slug) return null;
    return { params: { slug } };
  }).filter(Boolean) as {params:{slug:string}}[];

  return items;
}

/* ---------- page data ---------- */
const slugParam = (Astro.params.slug || "").toString().trim().toLowerCase();
const url = import.meta.env.PUBLIC_STAY_JSON;
if (!url) throw new Error("Missing PUBLIC_STAY_JSON in .env (restart dev).");

let row:any = null;
try {
  const raw = await getJson<any>(url);
  const rows:any[] = Array.isArray(raw) ? raw
    : Array.isArray(raw?.data) ? raw.data
    : Array.isArray(raw?.rows) ? raw.rows : [];

  row = rows.find((r:any) => {
    const candidate = (get(r,"slug") || slugify(get(r,"title"))).toLowerCase();
    return candidate === slugParam;
  });
} catch (e) {
  console.error("[stay slug] JSON fetch failed:", e);
}

if (!row) {
  throw new Error(`Stay slug not found: ${slugParam}`);
}

const title   = get(row,"title") || "Fernie Real Estate";
const summary = get(row,"summary");
const body    = get(row,"long_copy");
const heroImg = get(row,"hero_img");
---

<Site title={title} seo_title={title} seo_description={summary}>
  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    flush={false}
    containerPad={12}
  />

  <div class="container">
    {summary && <p>{summary}</p>}
    {body && <div set:html={body}></div>}
  </div>
</Site>
