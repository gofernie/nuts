---
// File: src/pages/stay/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* ---------- tiny util kept local ---------- */
const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

/* ---------- static paths (no external helpers) ---------- */
export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_STAY_JSON;
  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch {
    return [];
  }

  const items = rows.map((r:any) => {
    const status  = String(r?.status ?? r?.Status ?? r?.STATUS ?? "").trim().toLowerCase();
    const rawSlug = String(r?.slug   ?? r?.Slug   ?? r?.SLUG   ?? "").trim().toLowerCase();

    const hidden = status === "hidden" || status === "inactive" || rawSlug === "index";
    if (hidden) return null;

    const title  = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    const slug   = rawSlug || slugify(title);
    if (!slug) return null;

    return { params: { slug } };
  }).filter(Boolean) as { params: { slug: string } }[];

  return items;
}

/* ---------- page data (also inline, no helpers) ---------- */
const slugParam = (Astro.params.slug || "").toString().trim().toLowerCase();
const url = import.meta.env.PUBLIC_STAY_JSON;
if (!url) throw new Error("Missing PUBLIC_STAY_JSON in .env (restart dev).");

let row:any = null;
try {
  const raw = await getJson<any>(url);
  const rows:any[] = Array.isArray(raw) ? raw
    : Array.isArray(raw?.data) ? raw.data
    : Array.isArray(raw?.rows) ? raw.rows : [];

  row = rows.find((r:any) => {
    const rawSlug = String(r?.slug ?? r?.Slug ?? r?.SLUG ?? "").trim().toLowerCase();
    const title   = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    const computed = (rawSlug || slugify(title)).toLowerCase();
    return computed === slugParam;
  });
} catch (e) {
  console.error("[stay slug] JSON fetch failed:", e);
}

if (!row) {
  throw new Error(`Stay slug not found: ${slugParam}`);
}

/* ---------- fields ---------- */
const title    = String(row?.title ?? row?.Title ?? row?.TITLE ?? "Where to Stay in Fernie").trim();
const summary  = String(row?.summary ?? row?.Summary ?? row?.SUMMARY ?? "").trim();
const body     = String(row?.long_copy ?? row?.longcopy ?? row?.LongCopy ?? "").trim();
const heroImg  = String(row?.hero_img ?? row?.heroImg ?? row?.HeroImg ?? "").trim();
const seoTitle = String(row?.seo_title ?? row?.seoTitle ?? title).trim();
const seoDesc  = String(row?.seo_description ?? row?.seoDescription ?? summary ?? "").trim();

/* ---------- rendering flags ---------- */
const SUMMARY_IS_HTML = false;
const BODY_IS_HTML    = true;
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc}>
  <!-- Optional (add in Site.astro <head> if desired):
  <link rel="preconnect" href="https://idx.myrealpage.com" crossorigin>
  <link rel="dns-prefetch" href="https://idx.myrealpage.com">
  -->

  <!-- Hero aligned to .container (1200 max / 12px pad) -->
  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    flush={false}
    containerPad={12}
  />

  {summary && (
    <div class="container summary-wrap">
      {SUMMARY_IS_HTML
        ? <div class="lead" set:html={summary}></div>
        : <p class="lead">{summary}</p>}
    </div>
  )}

  {body && (
    <div class="container body-wrap">
      {BODY_IS_HTML
        ? <div class="lead" set:html={body}></div>
        : <p class="lead">{body}</p>}
    </div>
  )}

  <!-- âœ… MRP widget locked inside the same 1200px container as page content -->
  <div id="mrp-wrap" class="container">
    <div id="mrp-shell" class="mrp-shell" aria-busy="true">
      <!-- shimmer while MRP boots -->
      <div id="mrp-skeleton" class="listing-skeleton" aria-hidden="true">
        <div class="sk-card"></div><div class="sk-card"></div>
        <div class="sk-card"></div><div class="sk-card"></div>
      </div>

      <!-- MRP will render here -->
      <div id="mrp-container" class="mrp-container" aria-live="polite"></div>
    </div>
  </div>

  <style>
    .container{
      max-width:1200px;
      margin-inline:auto;
      padding-inline:12px;
    }

    /* spacing to match your other sections */
    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .body-wrap{ padding-top:12px; }

    /* shared copy style */
    .lead{
      margin:0;
      font-size:1.075rem;
      line-height:1.6;
      color:#111827;
    }

    /* ===== MRP container & skeleton ===== */
    .mrp-shell{ margin-top:32px; position:relative; min-height:180px; }
    .mrp-container{ isolation:isolate; }

    .listing-skeleton {
      display:grid;
      grid-template-columns: repeat(auto-fit, minmax(280px,1fr));
      gap:12px;
    }
    .sk-card {
      height:180px;
      border-radius:12px;
      background: linear-gradient(90deg,#f4f4f4 25%,#ececec 37%,#f4f4f4 63%);
      background-size:400% 100%;
      animation: shimmer 1.4s infinite;
      border:1px solid #eee;
    }
    @keyframes shimmer {
      0% { background-position: 100% 0 }
      100% { background-position: -100% 0 }
    }

    /* Hard clamp any MRP iframe to the container width */
    #mrp-container iframe{
      width:100% !important;
      max-width:100% !important;
      display:block !important;
      margin:0 auto !important;
      inset:auto !important;
      left:auto !important;
      right:auto !important;
      border:0;
    }
  </style>

  <script>
    (function(){
      // Your MRP embed script (no-frame variant)
      const SRC = "https://idx.myrealpage.com/wps/rest/66350/l/idx2/recip/tmpl~v2,noframe~true/-/search-1425920.def/in.js";

      const shell = document.getElementById("mrp-shell");
      const container = document.getElementById("mrp-container");
      const skeleton = document.getElementById("mrp-skeleton");
      if (!shell || !container) return;

      let loaded = false;

      function clampIframe(el){
        try{
          el.style.width = "100%";
          el.style.maxWidth = "100%";
          el.style.display = "block";
          el.style.margin = "0 auto";
          el.style.left = "auto";
          el.style.right = "auto";
          el.removeAttribute("width");
        }catch{}
      }

      function moveIntoContainer(node){
        if (!node) return;
        if (!container.contains(node)) {
          try { container.appendChild(node); } catch {}
        }
        if (node.tagName === "IFRAME") clampIframe(node);
      }

      function watchForMRP(){
        // Watch whole document in case MRP injects at body level
        const docObs = new MutationObserver((muts)=>{
          muts.forEach(m=>{
            m.addedNodes.forEach(n=>{
              if (n.nodeType !== 1) return;
              const el = n;

              // direct iframe
              if (el.tagName === "IFRAME" && /myrealpage\.com/i.test(el.src || "")) {
                moveIntoContainer(el);
                skeleton?.remove();
                shell.setAttribute("aria-busy","false");
              }

              // nested iframes inside wrappers
              if (el.querySelector){
                el.querySelectorAll('iframe').forEach((ifr)=>{
                  if (/myrealpage\.com/i.test(ifr.src || "")) {
                    moveIntoContainer(ifr);
                    skeleton?.remove();
                    shell.setAttribute("aria-busy","false");
                  }
                });
              }
            });
          });
        });
        docObs.observe(document.documentElement, { childList:true, subtree:true });

        // Stop watching after 20s to avoid overhead
        setTimeout(()=> docObs.disconnect(), 20000);
      }

      function inject(){
        if (loaded) return; loaded = true;
        watchForMRP();

        // Observe local container too (best case MRP writes right here)
        const localObs = new MutationObserver(()=>{
          const ifr = container.querySelector("iframe");
          if (ifr){
            clampIframe(ifr);
            skeleton?.remove();
            shell.setAttribute("aria-busy","false");
            localObs.disconnect();
          }
        });
        localObs.observe(container, { childList:true, subtree:true });

        const s = document.createElement("script");
        s.src = SRC;
        s.async = true;

        // Put script *inside* our container to encourage in-place rendering
        container.appendChild(s);

        // Safety timeout
        setTimeout(()=>{
          skeleton?.remove();
          shell.setAttribute("aria-busy","false");
        }, 9000);
      }

      // Lazy load when near viewport for better LCP
      if ("IntersectionObserver" in window){
        const io = new IntersectionObserver((es)=>{
          es.forEach(e=>{ if (e.isIntersecting){ inject(); io.disconnect(); } });
        }, { rootMargin:"400px 0px" });
        io.observe(shell);
      } else {
        inject();
      }
    })();
  </script>
</Site>
