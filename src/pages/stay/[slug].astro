---
// File: src/pages/stay/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* ---------- tiny util ---------- */
const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

/* ---------- static paths ---------- */
export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_STAY_JSON;
  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw)
      ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows
      : [];
  } catch { return []; }

  const items = rows.map((r:any) => {
    const status  = String(r?.status ?? r?.Status ?? r?.STATUS ?? "").trim().toLowerCase();
    const rawSlug = String(r?.slug   ?? r?.Slug   ?? r?.SLUG   ?? "").trim().toLowerCase();
    const hidden  = status === "hidden" || status === "inactive" || rawSlug === "index";
    if (hidden) return null;
    const title  = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    const slug   = rawSlug || slugify(title);
    return slug ? { params: { slug } } : null;
  }).filter(Boolean) as { params: { slug: string } }[];

  return items;
}

/* ---------- page data ---------- */
const slugParam = (Astro.params.slug || "").toString().trim().toLowerCase();
const url = import.meta.env.PUBLIC_STAY_JSON;
if (!url) throw new Error("Missing PUBLIC_STAY_JSON in .env (restart dev).");

let row:any = null;
try {
  const raw = await getJson<any>(url);
  const rows:any[] = Array.isArray(raw)
    ? raw
    : Array.isArray(raw?.data) ? raw.data
    : Array.isArray(raw?.rows) ? raw.rows
    : [];
  row = rows.find((r:any) => {
    const rawSlug = String(r?.slug ?? r?.Slug ?? r?.SLUG ?? "").trim().toLowerCase();
    const title   = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    return (rawSlug || slugify(title)) === slugParam;
  });
} catch (e) {
  console.error("[stay slug] JSON fetch failed:", e);
}

if (!row) throw new Error(`Stay slug not found: ${slugParam}`);

/* ---------- fields ---------- */
const title    = String(row?.title ?? row?.Title ?? row?.TITLE ?? "Where to Stay in Fernie").trim();
const summary  = String(row?.summary ?? row?.Summary ?? row?.SUMMARY ?? "").trim();
const body     = String(row?.long_copy ?? row?.longcopy ?? row?.LongCopy ?? "").trim();
const heroImg  = String(row?.hero_img ?? row?.heroImg ?? row?.HeroImg ?? "").trim();
const seoTitle = String(row?.seo_title ?? row?.seoTitle ?? title).trim();
const seoDesc  = String(row?.seo_description ?? row?.seoDescription ?? summary ?? "").trim();

const SUMMARY_IS_HTML = false;
const BODY_IS_HTML    = true;

/* ---------- hero preload ---------- */
const heroPreload = heroImg ? { href: heroPath(heroImg) } : null;
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc} heroPreload={heroPreload}>
  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    flush={false}
    containerPad={12}
  />

  {summary && (
    <div class="container summary-wrap">
      {SUMMARY_IS_HTML
        ? <div class="lead" set:html={summary}></div>
        : <p class="lead">{summary}</p>}
    </div>
  )}

  {body && (
    <div class="container body-wrap">
      {BODY_IS_HTML
        ? <div class="lead" set:html={body}></div>
        : <p class="lead">{body}</p>}
    </div>
  )}

  <!-- ðŸ§­ RealtyNinja embed -->
  <div id="rn-wrap" class="container">
    <div id="rn-shell" class="rn-shell" aria-busy="true">
      <!-- skeleton shimmer -->
      <div id="rn-skeleton" class="listing-skeleton" aria-hidden="true">
        <div class="sk-card"></div><div class="sk-card"></div>
        <div class="sk-card"></div><div class="sk-card"></div>
      </div>

      <div
        class="rn-embed"
        data-name="chriscrump8"
        data-path="555"
        style="min-height:95vh;"
      ></div>
      <script src="https://s.realtyninja.com/static/js/prod/embed.min.js" type="module" defer></script>
    </div>
  </div>

  <style>
    .container{ max-width:1200px; margin-inline:auto; padding-inline:12px; }
    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .body-wrap{ padding-top:12px; }
    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }

    /* skeleton */
    .rn-shell{ margin-top:32px; position:relative; min-height:180px; }
    .listing-skeleton {
      display:grid;
      grid-template-columns: repeat(auto-fit, minmax(280px,1fr));
      gap:12px;
    }
    .sk-card {
      height:180px;
      border-radius:12px;
      background:linear-gradient(90deg,#f4f4f4 25%,#ececec 37%,#f4f4f4 63%);
      background-size:400% 100%;
      animation:shimmer 1.4s infinite linear;
      border:1px solid #eee;
    }
    @keyframes shimmer {
      0% { background-position: 100% 0 }
      100% { background-position: -100% 0 }
    }

    /* lock iframe to container */
    #rn-wrap iframe {
      width: 100% !important;
      max-width: 100% !important;
      display: block !important;
      margin: 0 auto !important;
      border: 0;
    }
  </style>

  <script>
    (function(){
      const shell = document.getElementById("rn-shell");
      const skeleton = document.getElementById("rn-skeleton");

      const obs = new MutationObserver(()=>{
        const iframe = shell.querySelector("iframe");
        if (iframe) {
          iframe.style.width = "100%";
          iframe.style.maxWidth = "100%";
          iframe.style.display = "block";
          iframe.style.margin = "0 auto";
          skeleton?.remove();
          obs.disconnect();
        }
      });

      obs.observe(shell, { childList: true, subtree: true });
      // fallback cleanup after 12s
      setTimeout(()=> skeleton?.remove(), 12000);
    })();
  </script>
</Site>
