---
// File: src/pages/neighbourhoods/index.astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";
import SnowReport from "../../components/SnowReport.astro";
const PATH_BASE = "/neighbourhoods";
import WeatherReport from "../../components/WeatherReport.astro";
import EndlessRunner from "../../components/EndlessRunner";


/* ---------- helpers ---------- */
const RESERVED = new Set(["index","page","pages","all","view","list"]);

const get = (r:any, k:string) =>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

const visible = (r:any) => {
  const s = get(r,"status").toLowerCase();
  const rawSlug = get(r,"slug").toLowerCase();
  return s !== "hidden" && s !== "inactive" && rawSlug !== "index" && !RESERVED.has(rawSlug);
};

type Row = {
  slug?: string;
  title?: string;
  summary?: string;
  long_copy?: string;
  hero_img?: string;
  status?: string;
  seo_title?: string;
  seo_description?: string;
  sort?: number|string;
};

let items: Row[] = [];
let header: Row | null = null;
let error: string | null = null;

try {
  const url = import.meta.env.PUBLIC_SHEET_JSON;
  if (!url) throw new Error("Missing PUBLIC_SHEET_JSON in .env (restart dev).");

  const raw = await getJson<any>(url);
  const rows:any[] =
    Array.isArray(raw) ? raw :
    Array.isArray(raw?.data) ? raw.data :
    Array.isArray(raw?.rows) ? raw.rows : [];

  // ðŸª„ flexible header detection
  const headerCandidates = rows.filter((r:any) => {
    const slug = get(r,"slug").toLowerCase();
    const status = get(r,"status").toLowerCase();
    const hasSummary =
      !!get(r,"summary") ||
      !!get(r,"long_copy") ||
      !!get(r,"seo_description") ||
      !!get(r,"description");
    return slug === "index" || status === "header" || hasSummary;
  });

  header =
    headerCandidates.find(r => get(r,"slug").toLowerCase() === "index") ??
    headerCandidates.find(r => get(r,"status").toLowerCase() === "header") ??
    headerCandidates[0] ??
    null;

  items = rows
    .filter(r => visible(r))
    .map(r => ({
      slug: get(r,"slug") || slugify(get(r,"title")),
      title: get(r,"title"),
      summary: get(r,"summary"),
      hero_img: get(r,"hero_img"),
      sort: +get(r,"sort") || Number.MAX_SAFE_INTEGER,
      seo_title: get(r,"seo_title"),
      seo_description: get(r,"seo_description"),
    }))
    .filter(r => r.slug && r.title)
    .sort((a,b) => (Number(a.sort) - Number(b.sort)) || a.title!.localeCompare(b.title!));

} catch (e:any) {
  error = e?.message || "Failed to load data.";
}

/* ---------- derived meta ---------- */
const pageTitle = get(header,"title") || "Fernie Neighbourhoods";
const pageSummary =
  get(header,"summary") ||
  get(header,"long_copy") ||
  get(header,"seo_description") ||
  get(header,"description") ||
  "";
const heroImg = get(header,"hero_img");
const seoTitle = get(header,"seo_title") || pageTitle;
const seoDesc  = get(header,"seo_description") || pageSummary;

// set to true if your summary text contains HTML markup
const SUMMARY_IS_HTML = false;
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc}>
  <HeroBleed
    src={heroImg ? heroPath(heroImg) : ""}
    title={pageTitle}
    containerMax={1200}
    containerPad={12}
    flush={false}
  />

  {pageSummary && (
    <div class="container summary-wrap">
      {SUMMARY_IS_HTML
        ? <div class="lead" set:html={pageSummary}></div>
        : <p class="lead">{pageSummary}</p>}
    </div>
  )}

  <div class="container">
    {error && <p class="err">{error}</p>}

    {!error && (
      <div class="grid">
        {items.map((it) => (
          <a class="card" href={`${PATH_BASE}/${it.slug}`} data-astro-prefetch="hover">
            {it.hero_img && (
              <img src={heroPath(it.hero_img)} alt={it.title} loading="lazy" decoding="async" />
            )}
            <div class="body">
              <h2>{it.title}</h2>
              {it.summary && <p>{it.summary}</p>}
            </div>
          </a>
        ))}
      </div>
    )}
  </div>

  

<section class="container">
  <h2 class="sr-only">Fernie Snow Report</h2>
  <SnowReport />
</section>

<section class="container" style="margin-top:1rem">
    <h2 class="sr-only">Fernie Weather Report</h2>
  <WeatherReport />
</section>






  <style>
    .container{
      max-width:1200px;
      margin-inline:auto;
      padding-inline:12px;
    }
    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .lead{ margin: 0; font-size: 1.075rem; line-height: 1.6; color:#111827; }
    .err{ color:#b91c1c; background:#fee2e2; padding:.75rem 1rem; border-radius:.5rem; margin-top:12px; }

    .grid{
      display:grid;
      grid-template-columns: repeat(4, minmax(0,1fr));
      gap: 16px;
      margin-top: 18px;
    }
    @media (max-width:1200px){ .grid{ grid-template-columns: repeat(3, minmax(0,1fr)); } }
    @media (max-width:900px){  .grid{ grid-template-columns: repeat(2, minmax(0,1fr)); } }
    @media (max-width:560px){  .grid{ grid-template-columns: 1fr; } }

    .card{
      display:flex; flex-direction:column;
      background:#fff; border:1px solid #e5e7eb; border-radius:14px;
      overflow:hidden; text-decoration:none; color:inherit;
      transition: transform .08s ease, box-shadow .12s ease, border-color .12s ease;
    }
    .card:hover{ transform: translateY(-2px); box-shadow:0 6px 14px rgba(0,0,0,.08); border-color:#d1d5db; }
    .card img{ width:100%; aspect-ratio: 16/9; object-fit: cover; display:block; }
    .card .body{ padding:12px; }
    .card .body h2{ margin:0 0 6px; font-size:1.05rem; line-height:1.3; }
    .card .body p{
      margin:0; color:#374151; line-height:1.35;
      display:-webkit-box; -webkit-line-clamp:3; -webkit-box-orient:vertical; overflow:hidden;
    }
  </style>
</Site>
