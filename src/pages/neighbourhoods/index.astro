---
// src/pages/neighbourhoods/index.astro
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";

const url = import.meta.env.PUBLIC_SHEET_JSON;

type Row = {
  slug?: string;
  title?: string;
  summary?: string;
  hero_img?: string;
  status?: string;
};

let items: Row[] = [];
let header: Row | null = null;
let error: string | null = null;

try {
  if (!url) throw new Error("Missing PUBLIC_SHEET_JSON in .env (restart dev after editing).");
  const raw = await getJson<any>(url);

  const rows: any[] =
    Array.isArray(raw) ? raw :
    Array.isArray(raw?.data) ? raw.data :
    Array.isArray(raw?.rows) ? raw.rows :
    [];

  const normalize = (r: any): Row => {
    const get = (k: string) =>
      (r?.[k] ?? r?.[k.toLowerCase()] ?? r?.[k.toUpperCase()] ?? "")
        .toString()
        .trim();

    const title = get("title");
    const computedSlug = title
      .toLowerCase()
      .replace(/&/g, "-and-")
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/^-+|-+$/g, "");

    return {
      slug: get("slug") || computedSlug,
      title,
      summary: get("summary"),
      hero_img: get("hero_img"),
      status: get("status"),
    };
  };

  const normalized = rows.map(normalize);

  header = normalized.find((r) => (r.slug ?? "").toLowerCase() === "index") ?? null;

  items = normalized.filter(
    (r) =>
      r.slug &&
      r.title &&
      (r.slug ?? "").toLowerCase() !== "index" &&
      !/^draft$/i.test(r.status ?? "")
  );
} catch (e: any) {
  error = e?.message || String(e);
}

const heroPath = (s?: string) => {
  const v = (s ?? "").trim();
  if (!v) return "";
  if (v.startsWith("http")) return v;
  if (v.startsWith("/")) return v;
  if (/^img\//i.test(v)) return `/${v}`;
  if (/^hero\//i.test(v)) return `/img/${v}`;
  return `/img/hero/${v}`;
};

const wordClip = (s?: string, limit = 10) => {
  const txt = (s ?? "").replace(/\s+/g, " ").trim();
  if (!txt) return "";
  const parts = txt.split(" ");
  return parts.length <= limit ? txt : parts.slice(0, limit).join(" ") + "…";
};

const heroImage = header?.hero_img ? heroPath(header.hero_img) : "";
---
<Site showHeader={true}>
  <!-- HERO WITH NO TEXT -->
  <section
    class="hero-bleed"
    style={`${
      heroImage
        ? `background:url('${heroImage}') center/cover no-repeat`
        : "background:#f6f6f6"
    }`}
  ></section>

  <!-- H1 + intro copy BELOW hero -->
  <div class="container intro">
    <h1>Fernie Neighbourhoods</h1>
    {header?.summary && <p>{header.summary}</p>}
  </div>

  <div class="container">
    <section class="grid-wrap">
      {error ? (
        <p class="error">Error: {error}</p>
      ) : items.length === 0 ? (
        <p>No neighbourhoods yet. Check your <code>PUBLIC_SHEET_JSON</code> URL or add rows to your sheet.</p>
      ) : (
        <div class="grid">
          {items.map((n) => {
            const thumb = n.hero_img ? heroPath(n.hero_img) : "";
            return (
              <a class="card" href={`/neighbourhoods/${n.slug}`}>
                <div class="thumb">
                  {thumb ? (
                    <img src={thumb} alt={n.title} loading="lazy" />
                  ) : (
                    <div class="ph" aria-hidden="true">No image</div>
                  )}
                </div>
                <div class="body">
                  <strong>{n.title}</strong>
                  {n.summary && <p>{wordClip(n.summary, 10)}</p>}
                </div>
              </a>
            );
          })}
        </div>
      )}
    </section>
  </div>

  <style>
    .container {
      max-width: 1200px;
      margin-left: auto;
      margin-right: auto;
      padding: 0 1rem;
    }

    .hero-bleed {
      width: 100vw;
      margin-left: calc(50% - 50vw);
      margin-right: calc(50% - 50vw);
      min-height: 48vh; /* slightly taller hero */
      border-bottom: 1px solid #eee;
      padding-top: var(--header-h);
    }

    .intro {
      margin-top: 24px;
      margin-bottom: 20px;
      text-align: left;
    }

    .intro h1 {
      font-size: 2.25rem;
      font-weight: 700;
      margin: 0 0 8px 0;
      color: #111827;
    }

    /* ✅ Body copy updated to gray-800 */
    .intro p {
      font-size: 1rem;
      line-height: 1.6;
      margin: 0;
      color: #1f2937; /* Tailwind gray-800 */
    }

    .grid-wrap { margin-top: 24px; }
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 16px;
    }

    .card {
      display: flex;
      flex-direction: column;
      background: #fff;
      border-radius: 12px;
      overflow: hidden;
      border: 1px solid #eee;
      text-decoration: none;
      color: inherit;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      transform: translateY(0);
      transition: transform 0.25s ease, box-shadow 0.25s ease;
    }
    .card:hover {
      transform: translateY(-6px);
      box-shadow: 0 6px 16px rgba(0,0,0,0.12);
    }

    .thumb {
      aspect-ratio: 16/9;
      background: #f6f6f6;
      display: grid;
      place-items: center;
    }
    .thumb img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    .ph { font-size: 12px; color: #999 }
    .body { padding: 12px }
    .body p {
      margin: .4rem 0 0 0;
      color: #555;
      font-size: .95rem;
      line-height: 1.35;
    }
    .error { color: #b00 }
  </style>
</Site>
