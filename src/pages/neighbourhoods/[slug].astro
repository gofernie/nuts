---
// File: src/pages/neighbourhoods/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";
import ListingButtons from "../../components/ListingButtons.astro";

const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim().replace(/&/g,"-and-").replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"");

export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_SHEET_JSON;
  if (!url) return [];
  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw : Array.isArray(raw?.data) ? raw.data : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch { return []; }

  const items = rows.map((r:any) => {
    const status  = String(r?.status ?? r?.Status ?? r?.STATUS ?? "").trim().toLowerCase();
    const rawSlug = String(r?.slug   ?? r?.Slug   ?? r?.SLUG   ?? "").trim().toLowerCase();
    const hidden = status === "hidden" || status === "inactive" || rawSlug === "index";
    if (hidden) return null;
    const title  = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    const slug   = rawSlug || slugify(title);
    if (!slug) return null;
    return { params: { slug } };
  }).filter(Boolean) as { params: { slug: string } }[];

  return items;
}

const slugParam = (Astro.params.slug || "").toString().trim().toLowerCase();
const url = import.meta.env.PUBLIC_SHEET_JSON;
if (!url) throw new Error("Missing PUBLIC_SHEET_JSON in .env (restart dev).");

let row:any = null;
try {
  const raw = await getJson<any>(url);
  const rows:any[] = Array.isArray(raw) ? raw : Array.isArray(raw?.data) ? raw.data : Array.isArray(raw?.rows) ? raw.rows : [];
  row = rows.find((r:any) => {
    const rawSlug = String(r?.slug ?? r?.Slug ?? r?.SLUG ?? "").trim().toLowerCase();
    const title   = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    const computed = (rawSlug || slugify(title)).toLowerCase();
    return computed === slugParam;
  });
} catch (e) { console.error("[neighbourhoods slug] JSON fetch failed:", e); }

if (!row) throw new Error(`Neighbourhood slug not found: ${slugParam}`);

const title    = String(row?.title ?? row?.Title ?? row?.TITLE ?? "Fernie Neighbourhood").trim();
const summary  = String(row?.summary ?? row?.Summary ?? row?.SUMMARY ?? "").trim();
const body     = String(row?.long_copy ?? row?.longcopy ?? row?.LongCopy ?? "").trim();
const heroImg  = String(row?.hero_img ?? row?.heroImg ?? row?.HeroImg ?? "").trim();
const seoTitle = String(row?.seo_title ?? row?.seoTitle ?? title).trim();
const seoDesc  = String(row?.seo_description ?? row?.seoDescription ?? summary ?? "").trim();

const SUMMARY_IS_HTML = true;
const BODY_IS_HTML    = true;

const buttonsCell = String(row?.spare_2 ?? row?.Spare_2 ?? row?.SPARE_2 ?? "").trim();

const rawCta =
  String(row?.cta1 ?? row?.rv_block ?? "").trim() ||
  String(import.meta.env.PUBLIC_DEFAULT_RV_BLOCK ?? "").trim();

const isRvId = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i.test(rawCta);
const RV_URL = import.meta.env.PUBLIC_RV_SCRIPT || "https://cdn.realtyvis.com/js/embed.js";

const heroPreload = heroImg ? { href: heroPath(heroImg) } : null;
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc} heroPreload={heroPreload}>
  <!-- Force-load RealtyVis script now -->
  <Fragment slot="head">
    <script is:inline>
      (function(){
        if (window.__rvScriptLoaded || window.__rvScriptLoading) return;
        window.__rvScriptLoading = true;
        var s = document.createElement("script");
        s.src = {JSON.stringify(RV_URL)};
        s.async = true; s.defer = true;
        s.onload = function(){ window.__rvScriptLoaded = true; try { window.RealtyVis?.init?.(); window.RealtyVis?.scan?.(); } catch(e){} };
        s.onerror = function(e){ console.error("RealtyVis script failed to load", e); window.__rvScriptLoading = false; };
        document.head.appendChild(s);
      })();
    </script>
  </Fragment>

  <HeroBleed
    slot="hero"
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    containerPad={12}
    flush={false}
    preload={false}
  />

  {summary && (
    <div class="container summary-wrap">
      {SUMMARY_IS_HTML ? <div class="lead" set:html={summary}></div> : <p class="lead">{summary}</p>}
    </div>
  )}

  {buttonsCell && (
    <div class="container" style="margin-top:8px;">
      <ListingButtons raw={buttonsCell} />
    </div>
  )}

  {rawCta && (
    <div class="container listings-wrap">
      <h2 class="h2">Current Listings</h2>

      {isRvId ? (
        <div id="rv-root" data-rv-block={rawCta}></div>
      ) : (
        <div id="rv-root" class="rv-html" set:html={rawCta}></div>
      )}

      <!-- Empty-state only if RV mounts with 0 results -->
      <div id="rv-empty" class="rv-empty" hidden>
        <div class="rv-empty__card">
          <div class="rv-empty__title">No active listings right now</div>
          <p class="rv-empty__text">Save this search to get notified when new listings hit the market.</p>
          <div class="rv-empty__actions">
            <button id="rv-save-search" class="btn-primary" disabled>ðŸ”” Save this search</button>
            <a class="btn-secondary" href="/search">Browse all listings</a>
          </div>
          {buttonsCell && (
            <div class="rv-empty__alt">
              <div class="rv-empty__altlabel">Or jump to:</div>
              <ListingButtons raw={buttonsCell} />
            </div>
          )}
        </div>
      </div>

      <script is:inline>
        (function(){
          const root = document.getElementById('rv-root');
          const empty = document.getElementById('rv-empty');
          const saveBtn = document.getElementById('rv-save-search');

          function mounted(r = document){
            return !!(
              r.querySelector('[data-rv-card]') ||
              r.querySelector('.rv-card') ||
              r.querySelector('.rv-root') ||
              r.querySelector('iframe[src*="realtyvis"]') ||
              r.querySelector('[data-rv-mounted]')
            );
          }
          function count(r = document){
            return (r.querySelectorAll('[data-rv-card], .rv-card') || []).length;
          }
          function rescan(){ try { window.RealtyVis?.init?.(); window.RealtyVis?.scan?.(); } catch(e){} }
          function enableSave(){
            if (saveBtn && window.RealtyVis && typeof window.RealtyVis.openSaveSearch === 'function') {
              saveBtn.disabled = false;
              saveBtn.addEventListener('click', () => { try { window.RealtyVis.openSaveSearch(); } catch(e){} }, { once:true });
            }
          }
          function maybeShowEmpty(){
            if (!mounted(root)) return;
            if (count(root) === 0) { empty.hidden = false; enableSave(); }
          }

          const mo = new MutationObserver(() => { if (mounted(root)) { setTimeout(maybeShowEmpty, 200); } });
          mo.observe(root, { childList:true, subtree:true });

          if (document.visibilityState === 'visible') rescan();
          addEventListener('visibilitychange', () => { if (!document.hidden) { rescan(); setTimeout(maybeShowEmpty, 200); } });
          addEventListener('pageshow', (e) => { if (e.persisted) { rescan(); setTimeout(maybeShowEmpty, 200); } });

          setTimeout(()=> { rescan(); maybeShowEmpty(); }, 2000);
          setTimeout(maybeShowEmpty, 6000);
          setTimeout(maybeShowEmpty, 10000);
        })();
      </script>
    </div>
  )}

  {body && (
    <div class="container body-wrap">
      {BODY_IS_HTML ? <div class="lead" set:html={body}></div> : <p class="lead">{body}</p>}
    </div>
  )}

  {!rawCta && (
    <div class="container note">
      <p><strong>Heads-up:</strong> No <code>cta1</code>/<code>rv_block</code> set, and no <code>PUBLIC_DEFAULT_RV_BLOCK</code>.</p>
    </div>
  )}

  <style>
    .container{ max-width:1200px; margin-inline:auto; padding-inline:12px; }
    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }
    .listings-wrap{ padding-top:16px; padding-bottom:8px; }
    .h2{ font-size: clamp(20px,2.6vw,28px); margin: 0 0 10px; }
    .body-wrap{ padding-top:12px; }
    .note{ color:#666; background:#fafafa; border:1px solid #eee; padding:12px 14px; border-radius:8px; margin-top:16px; }

    .rv-empty { margin-top: 12px; }
    .rv-empty__card { border: 1px solid #e5e7eb; background: #fff; border-radius: 14px; padding: 16px; box-shadow: 0 1px 4px rgba(0,0,0,.05); }
    .rv-empty__title { font-weight: 700; margin-bottom: 6px; font-size: 1.05rem; color: #111827; }
    .rv-empty__text { margin: 0 0 12px; color: #374151; line-height: 1.5; }
    .rv-empty__actions { display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 8px; }
    .btn-primary, .btn-secondary { appearance: none; border-radius: 10px; padding: 10px 14px; font-weight: 600; cursor: pointer; text-decoration: none; display: inline-flex; align-items: center; justify-content: center; border: 1px solid transparent; }
    .btn-primary { background: #111827; color: #fff; border-color: #111827; }
    .btn-primary[disabled] { opacity: .6; cursor: not-allowed; }
    .btn-secondary { background: #fff; color: #111827; border-color: #e5e7eb; }
    .btn-secondary:hover { background: #f9fafb; }
    .rv-empty__alt { margin-top: 8px; }
    .rv-empty__altlabel { font-size: .9rem; color: #6b7280; margin-bottom: 6px; }
  </style>
</Site>
