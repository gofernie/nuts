---
// File: src/pages/neighbourhoods/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import ListingButtons from "../../components/ListingButtons.astro";
import RVEmbed from "../../components/RVEmbed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* ---------- utils ---------- */
const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

/* ---------- static paths ---------- */
export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_SHEET_JSON;
  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch { return []; }

  const items = rows.map((r:any) => {
    const status = String(r?.status ?? r?.Status ?? r?.STATUS ?? "").trim().toLowerCase();
    const rawSlug = String(r?.slug ?? r?.Slug ?? r?.SLUG ?? "").trim().toLowerCase();
    if (status === "hidden" || status === "inactive" || rawSlug === "index") return null;

    const title = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    const slug  = rawSlug || slugify(title);
    return slug ? { params: { slug } } : null;
  }).filter(Boolean);

  return items;
}

/* ---------- page data ---------- */
const slugParam = (Astro.params.slug || "").toString().trim().toLowerCase();
const url = import.meta.env.PUBLIC_SHEET_JSON;
if (!url) throw new Error("Missing PUBLIC_SHEET_JSON in .env (restart dev).");

let row:any = null;
try {
  const raw = await getJson<any>(url);
  const rows:any[] = Array.isArray(raw)
    ? raw
    : Array.isArray(raw?.data) ? raw.data
    : Array.isArray(raw?.rows) ? raw.rows
    : [];
  row = rows.find((r:any) => {
    const rawSlug = String(r?.slug ?? r?.Slug ?? r?.SLUG ?? "").trim().toLowerCase();
    const title   = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    return (rawSlug || slugify(title)) === slugParam;
  });
} catch (e) { console.error("[neighbourhoods slug] JSON fetch failed:", e); }

if (!row) throw new Error(`Neighbourhood slug not found: ${slugParam}`);

/* ---------- fields ---------- */
const title    = String(row?.title ?? "Fernie Neighbourhood").trim();
const summary  = String(row?.summary ?? "").trim();
const body     = String(row?.long_copy ?? "").trim();
const heroImg  = String(row?.hero_img ?? "").trim();
const seoTitle = String(row?.seo_title ?? title).trim();
const seoDesc  = String(row?.seo_description ?? summary ?? "").trim();
const buttonsCell = String(row?.spare_2 ?? "").trim();

const SUMMARY_IS_HTML = true;
const BODY_IS_HTML    = true;

/* ---------- RV block input (ID or pasted HTML) ---------- */
const rawCta =
  String(row?.cta1 ?? row?.rv_block ?? "").trim() ||
  String(import.meta.env.PUBLIC_DEFAULT_RV_BLOCK ?? "").trim();

const ID_RE = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i;
function stripScripts(html:string){ return html.replace(/<script\b[^>]*>[\s\S]*?<\/script>/gi,""); }
function extractRvId(html:string){
  const clean = stripScripts(html);
  const m = clean.match(/data-rv-block=["']?([A-Z0-9]{8}-[A-Z0-9]{8})["']?/i);
  return m?.[1] || "";
}
const rvBlockId = ID_RE.test(rawCta) ? rawCta : extractRvId(rawCta);
const hasValidBlock = ID_RE.test(rvBlockId);

/* ---------- hero preload ---------- */
const heroPreload = heroImg ? { href: heroPath(heroImg) } : null;
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc} heroPreload={heroPreload}>
  <HeroBleed
    slot="hero"
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    containerPad={12}
    flush={false}
    preload={false}
  />

  {summary && (
    <div class="container summary-wrap">
      {SUMMARY_IS_HTML ? <div class="lead" set:html={summary}></div> : <p class="lead">{summary}</p>}
    </div>
  )}

  {buttonsCell && (
    <div class="container" style="margin-top:8px;">
      <ListingButtons raw={buttonsCell} />
    </div>
  )}

  {rawCta && (
    <div class="container listings-wrap">
      <h2 class="h2">Current Listings</h2>

      {hasValidBlock ? (
        <RVEmbed block={rvBlockId} minHeight="1000px" />
      ) : (
        <div class="rv-fallback">
          <p>Listings are unavailable right now.</p>
          <p><a href="/search">Browse all listings</a></p>
        </div>
      )}
    </div>
  )}

  {body && (
    <div class="container body-wrap">
      {BODY_IS_HTML ? <div class="lead" set:html={body}></div> : <p class="lead">{body}</p>}
    </div>
  )}

  {!rawCta && (
    <div class="container note">
      <p><strong>Heads-up:</strong> No <code>cta1</code>/<code>rv_block</code> set, and no <code>PUBLIC_DEFAULT_RV_BLOCK</code>.</p>
    </div>
  )}

  <style>
    .container{ max-width:1200px; margin-inline:auto; padding-inline:12px; }
    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .body-wrap{ padding-top:12px; }
    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }

    .listings-wrap{ padding-top:16px; padding-bottom:8px; }
    .h2{ font-size: clamp(20px,2.6vw,28px); margin: 0 0 10px; }

    .rv-fallback{
      margin-top: 12px; padding:12px 16px; background:#fff3cd;
      border:1px solid #ffe69c; border-radius:10px; color:#5c3c00;
    }

    .note{
      color:#666; background:#fafafa; border:1px solid #eee;
      padding:12px 14px; border-radius:8px; margin-top:16px;
    }
  </style>
</Site>
