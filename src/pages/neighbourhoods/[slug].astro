---
// File: src/pages/neighbourhoods/[slug].astro
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

export async function getStaticPaths() {
  function buildCtaHtmlLocal(v: string): string {
    const s = (v || "").trim();
    if (!s) return "";

    // raw embed markup
    if (/[<](script|iframe)\b/i.test(s) || /data-rv-block=/i.test(s)) return s;

    // RealtyVis block id
    const id = s.match(/^[A-Z0-9]{8}-[A-Z0-9]{8}$/i)?.[0];
    if (id) {
      return `<div data-rv-block="${id}"></div>
<script src="https://cdn.realtyvis.com/js/embed.js" is:inline></script>`;
    }

    // URL â†’ iframe/script
    try {
      const u = new URL(s);
      if (/cdn\.realtyvis\.com$/i.test(u.hostname)) {
        return `<script src="${u.href}" is:inline></script>`;
      }
      if (/(\brealtyvis\.com|app\.realtyvis\.com)$/i.test(u.hostname)) {
        return `<iframe src="${u.href}" loading="lazy" referrerpolicy="no-referrer-when-downgrade" style="width:100%;min-height:900px;border:0;display:block;"></iframe>`;
      }
      return `<iframe src="${u.href}" loading="lazy" style="width:100%;min-height:900px;border:0;display:block;"></iframe>`;
    } catch {
      return s;
    }
  }

  const url = import.meta.env.PUBLIC_SHEET_JSON;
  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw :
           Array.isArray(raw?.data) ? raw.data :
           Array.isArray(raw?.rows) ? raw.rows : [];
  } catch { return []; }

  const items = rows.map((r:any) => {
    const get=(k:string)=>(r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();
    const title = get("title"); if (!title) return null;

    const computedSlug = title.toLowerCase()
      .replace(/&/g,"-and-")
      .replace(/[^a-z0-9]+/g,"-")
      .replace(/^-+|-+$/g,"");

    return {
      slug: get("slug") || computedSlug,
      title,
      summary: get("summary"),
      hero_img: get("hero_img"),
      map_embed: get("map_embed"),
      long_copy: get("long_copy"),
      cta1: get("cta1"),
      status: get("status"),
      seo_title: get("seo_title"),
      seo_description: get("seo_description"),
    };
  }).filter((r)=>
    r && r.slug && r.title &&
    r.slug.toLowerCase()!=="index" &&
    !/^draft$/i.test(r.status||"")
  );

  return items.map((n:any)=>({
    params:{ slug:n.slug },
    props:{
      title: n.title,
      summary: n.summary || "",
      hero: heroPath(n.hero_img),
      cta_html: buildCtaHtmlLocal(n.cta1 || ""),
      map_embed: (() => {
        const v = (n.map_embed || "").trim();
        if (!v) return "";
        const m = v.match(/src="([^"]+)"/i);
        if (m?.[1]) return m[1];
        if (v.includes("google.com/maps") && v.includes("embed")) return v;
        if (v.includes("google.com/maps")) {
          try {
            const u = new URL(v);
            const q = u.search ? `${u.search}&output=embed` : "?output=embed";
            return `https://www.google.com/maps${q}`;
          } catch {}
        }
        return `https://www.google.com/maps?q=${encodeURIComponent(v)}&output=embed`;
      })(),
      long_copy: n.long_copy || "",
      seo_title: n.seo_title || "",
      seo_description: n.seo_description || "",
    }
  }));
}

const {
  title, summary, hero, map_embed, long_copy, cta_html,
  seo_title, seo_description
} = Astro.props as any;

const pageSeoTitle = seo_title || title || "Neighbourhood";
const pageSeoDesc  = seo_description || summary || "";
---

<Site showHeader={true} title={title} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  {hero && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={hero} fetchpriority="high" />
    </Fragment>
  )}

  <!-- HERO -->
  <section class="hero-bleed">
    {hero && (
      <img
        src={hero}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000" height="1000"
      />
    )}
  </section>

  <!-- Intro -->
  <div class="container intro">
    <h1>{title}</h1>
    {summary && <p>{summary}</p>}
  </div>

  <!-- Map -->
  {map_embed && (
    <div class="container map-wrap">
      <h2>Explore on the Map</h2>
      <div class="map-card">
        <iframe
          src={map_embed}
          title={`Map of ${title}`}
          loading="lazy"
          allowfullscreen
          referrerpolicy="no-referrer-when-downgrade"
          style="width:100%; height: min(720px, var(--hero-h)); border:0; display:block;"
        ></iframe>
      </div>
    </div>
  )}

  <div class="container map-wrap">
      <br><br><h2>Browse {title} Listings</h2></div>

  <!-- RV embed from cta1 -->
  {cta_html && (
    <section class="rv-section rv-nopad">
      <div class="container rv-capped">
        <div id="rv-wrap-neigh">
          <div class="rv-mount" set:html={cta_html}></div>
        </div>
      </div>
    </section>
  )}

  <!-- long -->
  <div class="container intro">
    <h2>{title}</h2>
    {summary && <p>{summary}</p>}
  </div>

  <!-- Scroll memory (save y while scrolling; restore on back/BFCache) -->
  <script is:inline>
    (() => {
      const getY = () => Math.max(window.scrollY, document.documentElement.scrollTop || 0);
      const writeState = (y) => {
        try {
          const cur = (history.state && typeof history.state === 'object') ? history.state : {};
          if (cur.y === y) return;
          history.replaceState({ ...cur, y }, document.title, location.href);
        } catch {}
      };

      let raf = 0;
      const onScroll = () => {
        if (raf) return;
        raf = requestAnimationFrame(() => { raf = 0; writeState(getY()); });
      };
      addEventListener('scroll', onScroll, { passive: true });
      writeState(getY());

      const restoreTo = (y) => {
        if (!Number.isFinite(y)) return;
        const html = document.documentElement;
        const prev = html.style.scrollBehavior;
        html.style.scrollBehavior = 'auto';
        let tries = 0, max = 40; // ~650ms
        const tick = () => {
          window.scrollTo(0, y);
          if (++tries < max) requestAnimationFrame(tick);
          else html.style.scrollBehavior = prev || '';
        };
        requestAnimationFrame(tick);
      };

      addEventListener('popstate', (e) => {
        const y = e.state && typeof e.state === 'object' ? e.state.y : undefined;
        if (y != null) restoreTo(y);
      });

      addEventListener('pageshow', (e) => {
        if (e.persisted) {
          const y = history.state && typeof history.state === 'object' ? history.state.y : undefined;
          if (y != null) restoreTo(y);
        }
      });

      if (document.readyState !== 'loading') {
        const y = history.state && typeof history.state === 'object' ? history.state.y : undefined;
        if (y != null) restoreTo(y);
      } else {
        addEventListener('DOMContentLoaded', () => {
          const y = history.state && typeof history.state === 'object' ? history.state.y : undefined;
          if (y != null) restoreTo(y);
        });
      }
    })();
  </script>

  <!-- Inline fixer to re-zero paddings RV may inject -->
  <script is:inline>
    (() => {
      const root = document.getElementById('rv-wrap-neigh');
      if (!root) return;

      const applyInline = (scope = root) => {
        const sels = [
          '.rv-block',
          '.rv-block .rv-gridView',
          '.rv-block .rv-filterView',
          '.rv-block .rv-results',
          '.rv-block .rv-content',
          '.rv-block .rv-items',
          '.rv-block .rv-root',
          '.rv-block .rv-container'
        ];
        scope.querySelectorAll(sels.join(',')).forEach(el => {
          (el as HTMLElement).style.padding = '0px';
          (el as HTMLElement).style.marginLeft  = '0px';
          (el as HTMLElement).style.marginRight = '0px';
        });
        const gv = scope.querySelector('.rv-gridView') as HTMLElement | null;
        if (gv) gv.style.padding = '0px';
        const first = scope.querySelector('.rv-block') as HTMLElement | null;
        if (first) { first.style.marginTop = '0px'; first.style.paddingTop = '0px'; }
      };

      applyInline();
      const mo = new MutationObserver(muts => {
        muts.forEach(m =>
          m.addedNodes && m.addedNodes.forEach(n => n.nodeType === 1 && applyInline(n as Element))
        );
      });
      mo.observe(root, { childList: true, subtree: true });
      setTimeout(() => mo.disconnect(), 5000);
    })();
  </script>

  <style>
    /* Page container */
    .container { max-width: 1200px; margin-left: auto; margin-right: auto; padding: 0 1rem; }

    .intro { margin: 24px auto 20px; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin: 0 0 8px; color:#111827; }
    .intro p  { font-size: 1rem; line-height:1.6; color:#1f2937; }

    .map-wrap h2{ font-size:1.25rem; margin:8px 0 12px; color:#111827; }
    .map-card{ border:1px solid #eee; border-radius:12px; overflow:hidden; box-shadow:0 1px 6px rgba(0,0,0,0.1); }

    /* RV container cap + no section padding */
    .rv-section.rv-nopad { background: transparent; padding: 0; margin-top: 30px; }
    .container.rv-capped { max-width: 1200px; margin: 0 auto; padding: 0 1rem; }

    /* Long copy */
    .long-copy{ margin:40px 0 48px; font-size:1.05rem; line-height:1.8; color:#1f2937; }
    .long-copy p{ margin:0 0 1.25em; }
    .long-copy h2,.long-copy h3{ font-weight:700; color:#111827; line-height:1.3; margin:2em 0 .75em; }
    .long-copy h2{ font-size:1.5rem; border-left:4px solid #0a7bff; padding-left:.5rem; }
    .long-copy h3{ font-size:1.25rem; }
  </style>

  <!-- High-specificity global rules scoped to this embed -->
  <style is:global>
    #rv-wrap-neigh .rv-block,
    #rv-wrap-neigh .rv-block .rv-gridView,
    #rv-wrap-neigh .rv-block .rv-filterView,
    #rv-wrap-neigh .rv-block .rv-results,
    #rv-wrap-neigh .rv-block .rv-content,
    #rv-wrap-neigh .rv-block .rv-items,
    #rv-wrap-neigh .rv-block .rv-root,
    #rv-wrap-neigh .rv-block .rv-container {
      margin-left: 0 !important;
      margin-right: 0 !important;
      padding-left: 0 !important;
      padding-right: 0 !important;
    }
    /* explicit zero for the last 7px */
    #rv-wrap-neigh .rv-block .rv-gridView {
      position: relative;
      display: flex;
      width: 100%;
      flex: none;
      flex-direction: column;
      gap: .5em;
      align-self: center;
      padding: 0 !important;
    }
    #rv-wrap-neigh .rv-block:first-child { margin-top: 0 !important; padding-top: 0 !important; }
  </style>
</Site>
