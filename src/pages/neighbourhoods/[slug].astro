---
// File: src/pages/neighbourhoods/[slug].astro
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* —— helpers —— */
function addMapSpacing(html?: string) {
  if (!html) return "";
  return html.replace(
    /(<iframe[^>]*?(google\.com\/maps|openstreetmap|realtyvis)[^>]*?><\/iframe>)/gi,
    '<div class="map-wrap">$1</div>'
  );
}

function escapeHtml(s: string) {
  return s
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;");
}

/** Turn plain text from Sheets into paragraphs; leave real HTML intact */
function formatLongCopy(input?: string) {
  if (!input) return "";
  if (/<\s*(p|br|ul|ol|li|h[1-6]|iframe|div|section)\b/i.test(input)) {
    return addMapSpacing(input);
  }
  const escaped = escapeHtml(input.trim());
  const linked = escaped.replace(
    /(https?:\/\/[^\s<]+)/g,
    '<a href="$1" target="_blank" rel="noopener">$1</a>'
  );
  const html = linked
    .split(/\r?\n\s*\r?\n/)             // blank line => new paragraph
    .map(p => `<p>${p.replace(/\r?\n/g, "<br>")}</p>`)
    .join("\n");
  return addMapSpacing(html);
}

export async function getStaticPaths() {
  // Build RealtyVis/URL/embed safely from a cell value
  const buildCtaHtmlLocal = (v: string): string => {
    const s = (v || "").trim();
    if (!s) return "";
    if (/[<](script|iframe)\b/i.test(s) || /data-rv-block=/i.test(s)) return s;

    const id = s.match(/^[A-Z0-9]{8}-[A-Z0-9]{8}$/i)?.[0];
    if (id) {
      return `<div data-rv-block="${id}"></div>
<script src="https://cdn.realtyvis.com/js/embed.js" is:inline></script>`;
    }

    try {
      const u = new URL(s);
      if (/cdn\.realtyvis\.com$/i.test(u.hostname)) {
        return `<script src="${u.href}" is:inline></script>`;
      }
      if (/(\brealtyvis\.com|app\.realtyvis\.com)$/i.test(u.hostname)) {
        return `<iframe src="${u.href}" loading="lazy" referrerpolicy="no-referrer-when-downgrade" style="width:100%;min-height:900px;border:0;display:block;"></iframe>`;
      }
      return `<iframe src="${u.href}" loading="lazy" style="width:100%;min-height:900px;border:0;display:block;"></iframe>`;
    } catch {
      return s;
    }
  };

  const url = import.meta.env.PUBLIC_SHEET_JSON;
  if (!url) return [];

  let rows: any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows
      : [];
  } catch {
    return [];
  }

  const items = rows.map((r: any) => {
    const get = (k: string) =>
      (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "")
        .toString()
        .trim();

    const title = get("title");
    if (!title) return null;

    const computedSlug = title
      .toLowerCase()
      .replace(/&/g, "-and-")
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/^-+|-+$/g, "");

    return {
      slug: get("slug") || computedSlug,
      title,
      summary: get("summary"),
      hero_img: get("hero_img"),
      map_embed: get("map_embed"),
      long_copy: get("long_copy"),
      cta1: get("cta1"),
      status: get("status"),
      seo_title: get("seo_title"),
      seo_description: get("seo_description"),
    };
  }).filter((r) =>
    r && r.slug && r.title &&
    r.slug.toLowerCase() !== "index" &&
    !/^draft$/i.test(r.status || "")
  );

  return items.map((n: any) => ({
    params: { slug: n.slug },
    props: {
      title: n.title,
      summary: n.summary || "",
      hero: heroPath(n.hero_img),
      cta_html: buildCtaHtmlLocal(n.cta1 || ""),
      map_embed: (() => {
        const v = (n.map_embed || "").trim();
        if (!v) return "";
        const m = v.match(/src="([^"]+)"/i);
        if (m?.[1]) return m[1];
        if (v.includes("google.com/maps") && v.includes("embed")) return v;
        if (v.includes("google.com/maps")) {
          try {
            const u = new URL(v);
            const q = u.search ? `${u.search}&output=embed` : "?output=embed";
            return `https://www.google.com/maps${q}`;
          } catch {}
        }
        return `https://www.google.com/maps?q=${encodeURIComponent(v)}&output=embed`;
      })(),
      long_copy: n.long_copy || "",
      seo_title: n.seo_title || "",
      seo_description: n.seo_description || "",
    },
  }));
}

/* —— props —— */
const {
  title, summary, hero, map_embed, long_copy, cta_html,
  seo_title, seo_description
} = Astro.props as any;

const pageSeoTitle = seo_title || title || "Neighbourhood";
const pageSeoDesc  = seo_description || summary || "";
---

<Site showHeader={true} title={title} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  <!-- Head: preload hero (if any) + always load font -->
  <Fragment slot="head">
    {hero && <link rel="preload" as="image" href={hero} fetchpriority="high" />}
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap">
  </Fragment>

  <!-- HERO -->
  <section class="hero-bleed">
    {hero && (
      <img
        src={hero}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="1600" height="800"
      />
    )}
  </section>

  <!-- INTRO -->
  <div class="container intro">
    <h1>{title}</h1>
    {summary && <p>{summary}</p>}
  </div>

  <!-- MAP -->
  {map_embed && (
    <div class="container map-wrap">
      <h2>Explore on the Map</h2>
      <div class="map-card">
        <iframe
          src={map_embed}
          title={`Map of ${title}`}
          loading="lazy"
          allowfullscreen
          referrerpolicy="no-referrer-when-downgrade"
          style="width:100%; height: min(720px, var(--hero-h)); border:0; display:block;"
        ></iframe>
      </div>
    </div>
  )}

  <!-- LISTINGS HEADING -->
  <div class="container map-wrap">
    <h2>Browse {title} Listings</h2>
  </div>

<!-- REALTYVIS EMBED -->
{cta_html && (
  <section class="rv-section rv-nopad">
    <div class="container rv-capped">
      <div id="rv-wrap-types" class="rv-wrap">
        <div class="rv-mount" set:html={cta_html}></div>
      </div>
    </div>
  </section>
)}

 
  <!-- LONG COPY -->
  {long_copy && (
    <section class="long-wrap">
      <div class="container long">
        <div class="long-copy" set:html={formatLongCopy(long_copy)}></div>
      </div>
    </section>
  )}

  <style>
    :root {
      --font-body: "Inter", system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      --text-color: #1e293b;
      --heading-color: #111827;
      --font-size-base: 1.05rem;
      --line-height: 1.75;
      --para-spacing: 1.35em;
    }

    body, .intro, .long-copy { font-family: var(--font-body); color: var(--text-color); }

    .container { max-width: 1200px; margin: 0 auto; padding: 0 1rem; }

    .intro { margin: 32px auto 24px; }
    .intro h1 { font-size: 2.25rem; font-weight: 600; color: var(--heading-color); margin-bottom: .5em; }
    .intro p {
      font-size: var(--font-size-base);
      line-height: var(--line-height);
      margin: 0 0 var(--para-spacing);
    }

    .map-wrap { margin-bottom: 60px; }
    .map-card { border:1px solid #eee; border-radius:12px; overflow:hidden; box-shadow:0 1px 6px rgba(0,0,0,0.1); }

    .rv-section.rv-nopad { background: transparent; padding: 0; margin-top: 30px; }
    .container.rv-capped { max-width: 1200px; margin: 0 auto; padding: 0 1rem; }

    .long-wrap { background: #fafaf9; padding: clamp(32px, 5vw, 60px) 0; }
    .container.long { max-width: 1200px; margin: 0 auto; padding: 0 1rem; }

    .long-copy {
      font-size: var(--font-size-base);
      line-height: var(--line-height);
      color: var(--text-color);
    }
    .long-copy p { margin: 0 0 var(--para-spacing); }
    .long-copy h2, .long-copy h3 {
      font-weight: 600; color: var(--heading-color); line-height: 1.3; margin: 2em 0 .75em;
    }
    .long-copy h2 { font-size: 1.5rem; border-left: 4px solid #0a7bff; padding-left: .5rem; }
    .long-copy h3 { font-size: 1.25rem; }
  </style>

  <!-- Optional: keep RV embed perfectly flush & stable -->
  <style is:global>
    #rv-wrap-neigh .rv-block,
    #rv-wrap-neigh .rv-block .rv-gridView,
    #rv-wrap-neigh .rv-block .rv-filterView,
    #rv-wrap-neigh .rv-block .rv-results,
    #rv-wrap-neigh .rv-block .rv-content,
    #rv-wrap-neigh .rv-block .rv-items,
    #rv-wrap-neigh .rv-block .rv-root,
    #rv-wrap-neigh .rv-block .rv-container {
      margin-left: 0 !important;
      margin-right: 0 !important;
      padding-left: 0 !important;
      padding-right: 0 !important;
    }
    #rv-wrap-neigh { min-height: 900px; overflow-anchor: auto; }
  </style>
</Site>
