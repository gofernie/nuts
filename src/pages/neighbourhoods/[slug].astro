---
// File: src/pages/neighbourhoods/[slug].astro
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

export async function getStaticPaths() {
  // Helper lives INSIDE getStaticPaths → guaranteed defined when used.
  function buildCtaHtmlLocal(v: string): string {
    const s = (v || "").trim();
    if (!s) return "";

    // Raw embed HTML pasted directly
    if (/[<](script|iframe)\b/i.test(s) || /data-rv-block=/i.test(s)) return s;

    // RealtyVis block id (e.g., MQP2VMLT-14Y2W8DC)
    const id = s.match(/^[A-Z0-9]{8}-[A-Z0-9]{8}$/i)?.[0];
    if (id) {
      return `<div data-rv-block="${id}"></div>
<script src="https://cdn.realtyvis.com/js/embed.js" is:inline></script>`;
    }

    // URL → iframe/script
    try {
      const u = new URL(s);
      if (/cdn\.realtyvis\.com$/i.test(u.hostname)) {
        return `<script src="${u.href}" is:inline></script>`;
      }
      if (/(\brealtyvis\.com|app\.realtyvis\.com)$/i.test(u.hostname)) {
        return `<iframe src="${u.href}" loading="lazy" referrerpolicy="no-referrer-when-downgrade" style="width:100%;min-height:900px;border:0;display:block;"></iframe>`;
      }
      return `<iframe src="${u.href}" loading="lazy" style="width:100%;min-height:900px;border:0;display:block;"></iframe>`;
    } catch {
      return s;
    }
  }

  const url = import.meta.env.PUBLIC_SHEET_JSON;
  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw :
           Array.isArray(raw?.data) ? raw.data :
           Array.isArray(raw?.rows) ? raw.rows : [];
  } catch {
    return [];
  }

  const items = rows.map((r:any) => {
    const get=(k:string)=>(r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();
    const title = get("title"); if (!title) return null;

    const computedSlug = title.toLowerCase()
      .replace(/&/g,"-and-")
      .replace(/[^a-z0-9]+/g,"-")
      .replace(/^-+|-+$/g,"");

    return {
      slug: get("slug") || computedSlug,
      title,
      summary: get("summary"),
      hero_img: get("hero_img"),
      map_embed: get("map_embed"),
      long_copy: get("long_copy"),
      cta1: get("cta1"),
      status: get("status"),
      seo_title: get("seo_title"),
      seo_description: get("seo_description"),
    };
  }).filter((r)=>
    r && r.slug && r.title &&
    r.slug.toLowerCase()!=="index" &&
    !/^draft$/i.test(r.status||"")
  );

  return items.map((n:any)=>({
    params:{ slug:n.slug },
    props:{
      title: n.title,
      summary: n.summary || "",
      hero: heroPath(n.hero_img),

      // ✅ Embed HTML resolved from sheet cell cta1
      cta_html: buildCtaHtmlLocal(n.cta1 || ""),

      // Map resolver (unchanged)
      map_embed: (() => {
        const v = (n.map_embed || "").trim();
        if (!v) return "";
        const m = v.match(/src="([^"]+)"/i);
        if (m?.[1]) return m[1];
        if (v.includes("google.com/maps") && v.includes("embed")) return v;
        if (v.includes("google.com/maps")) {
          try {
            const u = new URL(v);
            const q = u.search ? `${u.search}&output=embed` : "?output=embed";
            return `https://www.google.com/maps${q}`;
          } catch {}
        }
        return `https://www.google.com/maps?q=${encodeURIComponent(v)}&output=embed`;
      })(),

      long_copy: n.long_copy || "",
      seo_title: n.seo_title || "",
      seo_description: n.seo_description || "",
    }
  }));
}

const {
  title, summary, hero, map_embed, long_copy, cta_html,
  seo_title, seo_description
} = Astro.props as any;

const pageSeoTitle = seo_title || title || "Neighbourhood";
const pageSeoDesc  = seo_description || summary || "";
---

<Site
  showHeader={true}
  title={title}
  seo_title={pageSeoTitle}
  seo_description={pageSeoDesc}
>
  {hero && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={hero} fetchpriority="high" />
    </Fragment>
  )}

  <!-- Hero -->
  <section class="hero-bleed">
    {hero && (
      <img
        src={hero}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000" height="1000"
      />
    )}
  </section>

  <div class="container intro">
    <h1>{title}</h1>
    {summary && <p>{summary}</p>}
  </div>

  {map_embed && (
    <div class="container map-wrap">
      <h2>Explore on the Map</h2>
      <div class="map-card">
        <iframe
          src={map_embed}
          title={`Map of ${title}`}
          loading="lazy"
          allowfullscreen
          referrerpolicy="no-referrer-when-downgrade"
          style="width:100%; height: min(720px, var(--hero-h)); border:0; display:block;"
        ></iframe>
      </div>
    </div>
  )}

  <!-- Inline embed from cta1 -->
  {cta_html && (
    <div class="container">
      <div class="embed-card" set:html={cta_html}></div>
    </div>
  )}

  {long_copy && (
    <div class="container">
      <article class="long-copy" set:html={long_copy}></article>
    </div>
  )}

  <style>
    .container { max-width: 1200px; margin-left: auto; margin-right: auto; padding: 0 1rem; }

    .intro { margin: 24px auto 20px; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin: 0 0 8px; color:#111827; }
    .intro p { font-size: 1rem; line-height:1.6; color:#1f2937; }

    .map-wrap h2{ font-size:1.25rem; margin:8px 0 12px; color:#111827; }
    .map-card{ border:1px solid #eee; border-radius:12px; overflow:hidden; box-shadow:0 1px 6px rgba(0,0,0,0.1); }

    .embed-card{
      background:#fff;
      color:#111827;
      border:1px solid #e5e7eb;
      border-radius:16px;
      padding:16px;
      margin:36px 0;
      box-shadow:0 2px 10px rgba(0,0,0,0.06);
      overflow:hidden;
    }
    .embed-card iframe { width:100%; display:block; border:0; }
    .embed-card [data-rv-block] { max-width:none; }
    .embed-card script { display:block; }

    .long-copy{ margin:40px 0 48px; font-size:1.05rem; line-height:1.8; color:#1f2937; }
    .long-copy p{ margin:0 0 1.25em; }
    .long-copy h2,.long-copy h3{ font-weight:700; color:#111827; line-height:1.3; margin:2em 0 .75em; }
    .long-copy h2{ font-size:1.5rem; border-left:4px solid #0a7bff; padding-left:.5rem; }
    .long-copy h3{ font-size:1.25rem; }
  </style>
</Site>
