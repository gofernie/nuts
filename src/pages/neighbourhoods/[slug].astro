---
/**
 * src/pages/neighbourhoods/[slug].astro
 * Dynamic route for a single neighbourhood page
 */

import Site from "../../layouts/Site.astro";

// ✅ fetch helper you already have
import { getJson } from "../../lib/fetchJson";

// ✅ ensure we’re pre-rendering (SSG)
export const prerender = true;

// ✅ env for the “neighbourhoods” sheet/tab JSON
const URL = import.meta.env.PUBLIC_SHEET_JSON || "";

/* ---------- Types (align with your columns) ---------- */
export type Row = {
  slug?: string;
  title?: string;
  category?: string;

  hero_img?: string;
  image_1?: string;
  image_2?: string;
  image_3?: string;

  card_1?: string;
  card_2?: string;
  card_3?: string;

  summary?: string;
  long_copy?: string;
  map_embed?: string;
  pill_features?: string;

  seo_title?: string;
  seo_description?: string;

  status?: string;
  sort?: string | number;

  start_date?: string;
  end_date?: string;

  cta1?: string;
  cta2?: string;
  cta3?: string;

  formspree?: string;
  form_title?: string;
  form_intro?: string;

  spare_1?: string;
  spare_2?: string;
  spare_3?: string;
  spare_4?: string;
  spare_5?: string;
  spare_6?: string;
  spare_7?: string;
  // add more if you’ve added spare_8..10 in this tab
};

/* ---------- Small utils (same spirit as before) ---------- */
const val = (s: unknown) => (s ?? "").toString().trim();

const slugify = (s: string) =>
  s
    .toLowerCase()
    .replace(/&/g, "-and-")
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "");

const imgPath = (s?: string) => {
  const v = val(s);
  if (!v) return "";
  if (v.startsWith("http")) return v;
  if (v.startsWith("/")) return v;
  return `/images/${v}`;
};

const heroPath = (s?: string) => {
  const v = val(s);
  if (!v) return "";
  if (v.startsWith("http")) return v;
  if (v.startsWith("/")) return v;
  if (/^images\//i.test(v)) return `/${v}`;
  if (/^hero\//i.test(v)) return `/images/${v}`;
  return `/images/hero/${v}`;
};

/* ---------- Data shaping ---------- */
type Item = Row & {
  _slug: string;
  _title: string;
  _hero: string;
};

/**
 * Normalize a sheet row into a consistent Item.
 */
function normalizeRow(r: Row): Item | null {
  const rawTitle = val(r.title);
  const computedSlug = val(r.slug) || (rawTitle ? slugify(rawTitle) : "");
  if (!computedSlug) return null;

  return {
    ...r,
    _slug: computedSlug,
    _title: rawTitle || computedSlug.replace(/-/g, " "),
    _hero: heroPath(r.hero_img || r.image_1 || r.card_1),
  };
}

/* ---------- getStaticPaths (fixes your error) ---------- */
export async function getStaticPaths() {
  if (!URL) return [];

  const data: unknown = await getJson(URL);
  if (!Array.isArray(data)) return [];

  const items = (data as Row[])
    .map(normalizeRow)
    .filter(Boolean) as Item[];

  return items.map((item) => ({
    params: { slug: item._slug },
    props: { item },
  }));
}

/* ---------- Page props ---------- */
interface Props {
  item: Item;
}
const { item } = Astro.props as Props;

/* ---------- SEO fallbacks ---------- */
const pageTitle = val(item.seo_title) || item._title;
const pageDesc =
  val(item.seo_description) || val(item.summary) || `Learn about ${item._title} in Fernie.`;

/* ---------- Simple render (wire into your layout) ---------- */
---
<Site title={pageTitle} description={pageDesc}>
  {/* Hero */}
  {item._hero && (
    <section class="relative w-full overflow-hidden">
      <img
        src={item._hero}
        alt={item._title}
        class="block w-full h-[38vh] md:h-[48vh] object-cover"
        loading="eager"
        decoding="async"
      />
    </section>
  )}

  {/* Heading + summary */}
  <section class="mx-auto max-w-6xl px-4 py-8 md:py-10">
    <h1 class="text-3xl md:text-4xl font-semibold tracking-tight text-gray-900">
      {item._title}
    </h1>

    {val(item.summary) && (
      <p class="mt-4 text-base md:text-lg text-gray-700 leading-relaxed">
        {item.summary}
      </p>
    )}

    {/* Long copy (render as HTML if you’re writing HTML in the sheet) */}
    {val(item.long_copy) && (
      <article class="prose prose-neutral max-w-none mt-6"
        set:html={item.long_copy} />
    )}

    {/* Optional map embed (expects an iframe string from the sheet) */}
    {val(item.map_embed) && (
      <div class="mt-8 rounded-xl overflow-hidden border border-black/5 bg-white shadow-sm">
        <div class="aspect-video" set:html={item.map_embed} />
      </div>
    )}
  </section>
</Site>
