---
// File: src/pages/neighbourhoods/[slug].astro
export const prerender = false;

import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

const slugParam = (Astro.params.slug || "").toString().trim();

const SOURCE_URL =
  import.meta.env.PUBLIC_NEIGHBOURHOODS_JSON ||
  import.meta.env.PUBLIC_SHEET_JSON ||
  "";

const get = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();
const slugify = (s:string)=> s.toLowerCase().replace(/&/g,"-and-").replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"");

let row:any = null;
let fetchError: string | null = null;

if (!SOURCE_URL) {
  fetchError = "Missing PUBLIC_NEIGHBOURHOODS_JSON / PUBLIC_SHEET_JSON in .env";
} else {
  try {
    const raw = await getJson<any>(SOURCE_URL);
    const rows:any[] =
      Array.isArray(raw) ? raw :
      Array.isArray(raw?.data) ? raw.data :
      Array.isArray(raw?.rows) ? raw.rows : [];

    row = rows.find(r=>{
      const s = get(r,"slug") || (get(r,"title") ? slugify(get(r,"title")) : "");
      return s === slugParam;
    }) || null;

    if (!row) fetchError = `No matching row for slug "${slugParam}".`;
  } catch (e:any) {
    fetchError = `Failed to load sheet: ${e?.message || e}`;
  }
}

const title        = (row && get(row,"title"))        || "Neighbourhood";
const summary      = (row && get(row,"summary"))      || "";
const long_copy    = (row && get(row,"long_copy"))    || "";
const heroImgRaw   = (row && get(row,"hero_img"))     || "/img/hero/fallback-1600x800.jpg";
const hero         = heroPath(heroImgRaw);
const map_embedRaw = (row && get(row,"map_embed"))    || "";
const cta1         = (row && (get(row,"cta1") || get(row,"rv_block"))) || "";

const pageSeoTitle = (row && get(row,"seo_title"))       || title;
const pageSeoDesc  = (row && get(row,"seo_description")) || summary;

function resolveMapSrc(v:string): string {
  const t = (v || "").trim();
  if (!t) return "";
  const m = t.match(/src="([^"]+)"/i);
  if (m?.[1]) return m[1];
  if (t.includes("google.com/maps") && t.includes("embed")) return t;
  if (t.includes("google.com/maps")) {
    try {
      const u = new URL(t);
      const q = u.search ? `${u.search}&output=embed` : "?output=embed";
      return `https://www.google.com/maps${q}`;
    } catch {}
  }
  return `https://www.google.com/maps?q=${encodeURIComponent(t)}&output=embed`;
}
const map_embed = resolveMapSrc(map_embedRaw);

const RV_SCRIPT = import.meta.env.PUBLIC_RV_SCRIPT || "https://cdn.realtyvis.com/js/embed.js";
const rawCta = (cta1 || "").trim();
const isRvId = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i.test(rawCta);
const isHtml = !!rawCta && !isRvId;
---

<Site showHeader={true} title={title} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  {hero && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={hero} fetchpriority="high" />
    </Fragment>
  )}

  <!-- HERO -->
  <section class="hero-bleed">
    <img
      src={hero}
      alt={title}
      fetchpriority="high"
      loading="eager"
      decoding="async"
      width="2000" height="1000"
    />
    <div class="hero-scrim" aria-hidden="true"></div>
    <div class="hero-overlay">
      <!-- mirror page container so H1 aligns with content -->
      <div class="container hero-title-wrap">
        <h1 class="hero-title" style="text-align:left;margin:0;display:block;">
          {title}
        </h1>
      </div>
    </div>
  </section>

  <!-- Body -->
  <main class="container neigh-body">
    {summary && (
      <section class="intro">
        <article class="long-copy" set:html={summary}></article>
      </section>
    )}

    {rawCta && (
      <section id="listings" class="rv-wrap">
        <div
          class="rv-lazy-shell"
          data-rv-ready="false"
          data-rv-script={RV_SCRIPT}
          {...(isRvId ? { 'data-rv-id': rawCta } : {})}
          {...(isHtml ? { 'data-rv-html': rawCta } : {})}
        >
          <div class="rv-skeleton">
            <div class="rv-skel-bar"></div>
            <div class="rv-skel-grid">
              <div class="rv-skel-card"></div>
              <div class="rv-skel-card"></div>
              <div class="rv-skel-card"></div>
            </div>
            <button class="rv-load-btn" type="button">Load listings</button>
          </div>
        </div>
      </section>
    )}

    {map_embed && (
      <section class="map-wrap">
        <h2>Map</h2>
        <div class="map-card">
          <iframe src={map_embed} width="100%" height="420" style="border:0" loading="lazy" referrerpolicy="no-referrer-when-downgrade" />
        </div>
      </section>
    )}

    {long_copy && (
      <section class="content">
        <article class="long-copy" set:html={long_copy}></article>
      </section>
    )}
  </main>

  <!-- RV lazy loader -->
  <script is:inline>
    (() => {
      const shells = Array.from(document.querySelectorAll('.rv-lazy-shell'));
      if (!shells.length) return;
      const loadShell = (el) => {
        if (!el || el.dataset.rvReady === "true") return;
        const scriptUrl = (el.getAttribute('data-rv-script') || "").trim();
        const rvId = el.getAttribute('data-rv-id');
        const rvHtml = el.getAttribute('data-rv-html');

        if (rvId) {
          el.innerHTML = `<div data-rv-block="${rvId}"></div>`;
          if (scriptUrl && !window.__rvScriptLoading) {
            window.__rvScriptLoading = true;
            const s = document.createElement('script');
            s.src = scriptUrl;
            s.async = true;
            s.onload = () => { window.__rvScriptLoaded = true; try { window.RealtyVis?.scan?.(); } catch {} };
            s.onerror = (e) => console.error("Failed to load RealtyVis script", e);
            document.head.appendChild(s);
          } else if (window.__rvScriptLoaded) {
            try { window.RealtyVis?.scan?.(); } catch {}
          }
        } else if (rvHtml) {
          el.innerHTML = rvHtml;
        }
        el.dataset.rvReady = "true";
      };

      document.addEventListener('click', (e) => {
        const btn = e.target.closest('.rv-load-btn');
        if (!btn) return;
        const shell = btn.closest('.rv-lazy-shell');
        loadShell(shell);
      });

      if ('IntersectionObserver' in window) {
        const io = new IntersectionObserver((entries) => {
          entries.forEach((entry) => { if (entry.isIntersecting) { loadShell(entry.target); io.unobserve(entry.target); } });
        }, { rootMargin: '200px 0px' });
        shells.forEach((el) => io.observe(el));
      } else {
        shells.forEach((el) => { const btn = el.querySelector('.rv-load-btn'); if (btn) btn.style.display = 'inline-flex'; });
      }
    })();
  </script>

  <style>
    /* Container */
    .container { max-width: 1200px; margin-inline: auto; padding: 0 1rem; }

    /* HERO (same sizing as index, no seam) */
    .hero-bleed {
      position: relative;
      left:50%; right:50%;
      margin-left:-50vw; margin-right:-50vw;
      width:100vw; max-width:100vw;
      height: clamp(300px, 38vw, 520px);
      overflow: hidden;
      background: #000; /* hides any subpixel line behind the image */
    }
    .hero-bleed img{
      display:block;
      width:100%;
      height: calc(100% + 1px);   /* overfill by 1px to kill grey seam */
      object-fit: cover;
      object-position: center;
    }
    .hero-scrim {
      position:absolute; inset:0;
      background: linear-gradient(to top, rgba(0,0,0,.55), rgba(0,0,0,0) 55%);
      z-index:1;
    }
    .hero-overlay{
      position:absolute; inset:0; z-index:2;
      display:flex; align-items:flex-end; justify-content:flex-start;
      padding-bottom: clamp(16px, 3vw, 28px);
      pointer-events:none;
    }
    /* âœ… mirror .container exactly so edges line up */
    .hero-title-wrap{
      width:100%;
      max-width: 1200px;
      margin-inline:auto;
      padding: 0 1rem;
      box-sizing: border-box;
      text-align:left;            /* no grid tricks */
    }
    .hero-title{
      color:#fff;
      font-size: clamp(2rem, 4.5vw, 3rem);
      font-weight: 800;
      line-height: 1.1;
      margin: 0;
      text-shadow: 0 2px 8px rgba(0,0,0,.45);
    }

    /* Body */
    .neigh-body { padding-top: 0; }
    .intro{ margin: 22px 0 24px; }
    .long-copy{ font-size:1.05rem; line-height:1.75; color:#1f2937; }
    .long-copy p{ margin:0 0 1.2em; }
    .long-copy h2,.long-copy h3{ font-weight:700; color:#111827; line-height:1.3; margin:2em 0 .75em; }
    .long-copy h2{ font-size:1.35rem; border-left:4px solid #0a7bff; padding-left:.5rem; }
    .long-copy h3{ font-size:1.2rem; }

    /* RV skeleton (unchanged) */
    .rv-lazy-shell{ position:relative; border-radius:14px; min-height:180px; }
    .rv-skeleton{ display:flex; flex-direction:column; gap:14px; align-items:flex-start; }
    .rv-skel-bar{ width:180px; height:16px; border-radius:6px; background:linear-gradient(90deg,#eee,#f6f6f6,#eee); animation: skel 1.2s infinite linear; }
    .rv-skel-grid{ display:grid; grid-template-columns: repeat(3,minmax(0,1fr)); gap:12px; width:100%; }
    .rv-skel-card{ height:120px; border-radius:12px; background:linear-gradient(90deg,#eee,#f6f6f6,#eee); animation: skel 1.2s infinite linear; }
    .rv-load-btn{ display:none; padding:10px 16px; border-radius:999px; border:1px solid #d1d5db; background:#fff; font-weight:600; cursor:pointer; }
    @keyframes skel { 0%{background-position:-200px 0} 100%{background-position:200px 0} }

    .map-wrap{ margin:28px 0; }
    .map-wrap h2{ font-size:1.25rem; margin:8px 0 12px; color:#111827; }
    .map-card{ border:1px solid #eee; border-radius:12px; overflow:hidden; box-shadow:0 1px 6px rgba(0,0,0,0.1); }
  </style>
</Site>
