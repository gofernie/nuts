---
// File: src/pages/neighbourhoods/[slug].astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import ListingButtons from "../../components/ListingButtons.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* ---------- utils ---------- */
const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

/* ---------- static paths ---------- */
export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_SHEET_JSON;
  if (!url) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw
      : Array.isArray(raw?.data) ? raw.data
      : Array.isArray(raw?.rows) ? raw.rows : [];
  } catch { return []; }

  const items = rows.map((r:any) => {
    const status = String(r?.status ?? r?.Status ?? r?.STATUS ?? "").trim().toLowerCase();
    const rawSlug = String(r?.slug ?? r?.Slug ?? r?.SLUG ?? "").trim().toLowerCase();
    if (status === "hidden" || status === "inactive" || rawSlug === "index") return null;

    const title = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    const slug  = rawSlug || slugify(title);
    return slug ? { params: { slug } } : null;
  }).filter(Boolean);

  return items;
}

/* ---------- page data ---------- */
const slugParam = (Astro.params.slug || "").toString().trim().toLowerCase();
const url = import.meta.env.PUBLIC_SHEET_JSON;
if (!url) throw new Error("Missing PUBLIC_SHEET_JSON in .env (restart dev).");

let row:any = null;
try {
  const raw = await getJson<any>(url);
  const rows:any[] = Array.isArray(raw)
    ? raw
    : Array.isArray(raw?.data) ? raw.data
    : Array.isArray(raw?.rows) ? raw.rows
    : [];
  row = rows.find((r:any) => {
    const rawSlug = String(r?.slug ?? r?.Slug ?? r?.SLUG ?? "").trim().toLowerCase();
    const title   = String(r?.title ?? r?.Title ?? r?.TITLE ?? "").trim();
    return (rawSlug || slugify(title)) === slugParam;
  });
} catch (e) { console.error("[neighbourhoods slug] JSON fetch failed:", e); }

if (!row) throw new Error(`Neighbourhood slug not found: ${slugParam}`);

/* ---------- fields ---------- */
const title    = String(row?.title ?? "Fernie Neighbourhood").trim();
const summary  = String(row?.summary ?? "").trim();
const body     = String(row?.long_copy ?? "").trim();
const heroImg  = String(row?.hero_img ?? "").trim();
const seoTitle = String(row?.seo_title ?? title).trim();
const seoDesc  = String(row?.seo_description ?? summary ?? "").trim();
const buttonsCell = String(row?.spare_2 ?? "").trim();

const SUMMARY_IS_HTML = true;
const BODY_IS_HTML    = true;

/* ---------- RealtyVis ---------- */
const rawCta =
  String(row?.cta1 ?? row?.rv_block ?? "").trim() ||
  String(import.meta.env.PUBLIC_DEFAULT_RV_BLOCK ?? "").trim();

const isRvId = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i.test(rawCta);
function stripScripts(html:string){ return html.replace(/<script\b[^>]*>[\s\S]*?<\/script>/gi,""); }
function extractRvContainer(html:string){
  const clean = stripScripts(html);
  const m = clean.match(/<div[^>]*\sdata-rv-block=["']?([A-Z0-9-]{17})["']?[^>]*><\/div>/i);
  return m?.[0] || "";
}
const containerHtml = isRvId ? `<div data-rv-block="${rawCta}"></div>` : extractRvContainer(rawCta);
const RV_URL = import.meta.env.PUBLIC_RV_SCRIPT || "https://cdn.realtyvis.com/js/embed.js";

/* ---------- hero preload ---------- */
const heroPreload = heroImg ? { href: heroPath(heroImg) } : null;
---

<Site title={seoTitle} seo_title={seoTitle} seo_description={seoDesc} heroPreload={heroPreload}>
  <!-- 🪝 Load RealtyVis script once if not already loaded -->
  <Fragment slot="head">
    <script is:inline>
      (function(){
        if (window.RealtyVis || window.__rvScriptLoaded || window.__rvScriptLoading) return;
        window.__rvScriptLoading = true;
        var s = document.createElement("script");
        s.src = {JSON.stringify(RV_URL)};
        s.async = true;
        s.onload = function(){
          window.__rvScriptLoaded = true;
          try { window.RealtyVis?.init?.(); window.RealtyVis?.scan?.(); } catch(e){}
        };
        s.onerror = function(e){ console.error("RealtyVis failed to load", e); window.__rvScriptLoading = false; };
        document.head.appendChild(s);
      })();
    </script>
  </Fragment>

  <HeroBleed
    slot="hero"
    src={heroImg ? heroPath(heroImg) : ""}
    title={title}
    containerMax={1200}
    containerPad={12}
    flush={false}
    preload={false}
  />

  {summary && (
    <div class="container summary-wrap">
      {SUMMARY_IS_HTML ? <div class="lead" set:html={summary}></div> : <p class="lead">{summary}</p>}
    </div>
  )}

  {buttonsCell && (
    <div class="container" style="margin-top:8px;">
      <ListingButtons raw={buttonsCell} />
    </div>
  )}

  {rawCta && (
    <div class="container listings-wrap">
      <h2 class="h2">Current Listings</h2>

      {isRvId
        ? <div id="rv-root" data-rv-block={rawCta}></div>
        : <div id="rv-root" class="rv-html" set:html={containerHtml}></div>}

      <script is:inline>
        (function(){
          const root = document.getElementById('rv-root');
          const emptyId = 'rv-empty';
          const emptyCard = `
            <div id="${emptyId}" class="rv-empty" hidden>
              <div class="rv-empty__card">
                <div class="rv-empty__title">No active listings right now</div>
                <p class="rv-empty__text">Save this search to get notified when new listings hit the market.</p>
                <div class="rv-empty__actions">
                  <button id="rv-save-search" class="btn-primary" disabled>🔔 Save this search</button>
                  <a class="btn-secondary" href="/search">Browse all listings</a>
                </div>
              </div>
            </div>`;
          root.insertAdjacentHTML('afterend', emptyCard);
          const empty = document.getElementById(emptyId);
          const saveBtn = document.getElementById('rv-save-search');

          const mounted = ()=> !!root.querySelector('[data-rv-card], .rv-card, [data-rv-mounted]');
          const count = ()=> root.querySelectorAll('[data-rv-card], .rv-card').length;
          const rescan = ()=> { try { window.RealtyVis?.init?.(); window.RealtyVis?.scan?.(); } catch(_){} };

          function enableSave(){
            if (saveBtn && window.RealtyVis?.openSaveSearch) {
              saveBtn.disabled = false;
              saveBtn.addEventListener('click', ()=> window.RealtyVis.openSaveSearch(), { once:true });
            }
          }
          function maybeShowEmpty(){
            if (!mounted()) return;
            if (count() === 0) {
              empty.hidden = false;
              enableSave();
            }
          }

          const mo = new MutationObserver(()=> mounted() && setTimeout(maybeShowEmpty, 200));
          mo.observe(root, { childList:true, subtree:true });

          ['astro:page-load','astro:after-swap'].forEach(ev=> document.addEventListener(ev,()=>{ rescan(); setTimeout(maybeShowEmpty,200); }));
          window.addEventListener('pageshow', e=>{ if (e.persisted) { rescan(); setTimeout(maybeShowEmpty,200); }});
          document.addEventListener('visibilitychange', ()=>{ if(!document.hidden) { rescan(); setTimeout(maybeShowEmpty,200); }});

          // shimmer fallback
          setTimeout(rescan, 2000);
        })();
      </script>
    </div>
  )}

  {body && (
    <div class="container body-wrap">
      {BODY_IS_HTML ? <div class="lead" set:html={body}></div> : <p class="lead">{body}</p>}
    </div>
  )}

  {!rawCta && (
    <div class="container note">
      <p><strong>Heads-up:</strong> No <code>cta1</code>/<code>rv_block</code> set, and no <code>PUBLIC_DEFAULT_RV_BLOCK</code>.</p>
    </div>
  )}

  <style>
    .container{ max-width:1200px; margin-inline:auto; padding-inline:12px; }
    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .body-wrap{ padding-top:12px; }
    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }

    .listings-wrap{ padding-top:16px; padding-bottom:8px; }
    .h2{ font-size: clamp(20px,2.6vw,28px); margin: 0 0 10px; }

    .rv-empty { margin-top: 12px; }
    .rv-empty__card {
      border: 1px solid #e5e7eb; background: #fff;
      border-radius: 14px; padding: 16px;
      box-shadow: 0 1px 4px rgba(0,0,0,.05);
    }
    .rv-empty__title { font-weight: 700; margin-bottom: 6px; font-size: 1.05rem; color: #111827; }
    .rv-empty__text { margin: 0 0 12px; color: #374151; line-height: 1.5; }
    .rv-empty__actions { display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 8px; }
    .btn-primary, .btn-secondary {
      appearance: none; border-radius: 10px; padding: 10px 14px;
      font-weight: 600; cursor: pointer; text-decoration: none;
      display: inline-flex; align-items: center; justify-content: center;
      border: 1px solid transparent;
    }
    .btn-primary { background: #111827; color: #fff; border-color: #111827; }
    .btn-primary[disabled] { opacity: .6; cursor: not-allowed; }
    .btn-secondary { background: #fff; color: #111827; border-color: #e5e7eb; }
    .btn-secondary:hover { background: #f9fafb; }

    /* ✨ shimmer placeholder for slow loads */
    #rv-root:empty::before {
      content:""; display:block; height: 180px;
      border-radius: 10px;
      background: linear-gradient(90deg, #eee 25%, #f6f6f6 37%, #eee 63%);
      background-size: 400% 100%;
      animation: shimmer 1.2s infinite linear;
    }
    @keyframes shimmer {
      0% { background-position: 100% 0; }
      100% { background-position: 0 0; }
    }

    .note{
      color:#666; background:#fafafa; border:1px solid #eee;
      padding:12px 14px; border-radius:8px; margin-top:16px;
    }
  </style>
</Site>
