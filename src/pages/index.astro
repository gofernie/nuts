---
// src/pages/index.astro

import Site from "../layouts/Site.astro";
import { getJson } from "../lib/fetchJson";
import { heroPath } from "../lib/paths";

const homeUrl  = import.meta.env.PUBLIC_HOME_JSON;
const listUrl  = import.meta.env.PUBLIC_SHEET_JSON;

type Row = {
  slug?: string;
  title?: string;
  summary?: string;
  hero_img?: string;
  status?: string;
  seo_title?: string;
  seo_description?: string;
};

let header: Row | null = null;
let items: Row[] = [];
let error: string | null = null;

const getVal = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const normalize = (r:any): Row => {
  const title = getVal(r,"title");
  const computedSlug = (title||"").toLowerCase()
    .replace(/&/g,"-and-").replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"");
  return {
    slug: getVal(r,"slug") || computedSlug,
    title,
    summary: getVal(r,"summary"),
    hero_img: getVal(r,"hero_img"),
    status: getVal(r,"status"),
    seo_title: getVal(r,"seo_title"),
    seo_description: getVal(r,"seo_description"),
  };
};

try {
  // HEADER from HOME tab
  if (!homeUrl) throw new Error("Missing PUBLIC_HOME_JSON in .env for homepage content.");
  const rawHome = await getJson<any>(homeUrl);

  const homeRows: any[] =
    Array.isArray(rawHome) ? rawHome :
    Array.isArray(rawHome?.data) ? rawHome.data :
    Array.isArray(rawHome?.rows) ? rawHome.rows :
    [];

  header = homeRows.length > 0 ? normalize(homeRows[0]) : null;

  // LIST CARDS from neighbourhoods sheet
  if (!listUrl) throw new Error("Missing PUBLIC_SHEET_JSON in .env for neighbourhood list.");
  const rawList = await getJson<any>(listUrl);

  const rows: any[] =
    Array.isArray(rawList) ? rawList :
    Array.isArray(rawList?.data) ? rawList.data :
    Array.isArray(rawList?.rows) ? rawList.rows :
    [];

  const normalized = rows.map(normalize);

  items = normalized.filter((r) =>
    r.slug && r.title &&
    r.slug.toLowerCase()!=="index" &&
    !/^draft$/i.test(r.status ?? "") &&
    !/^hidden$/i.test(r.status ?? "") &&
    !/^inactive$/i.test(r.status ?? "")
  );
} catch (e:any) {
  error = e?.message || String(e);
}

const heroSrc = header?.hero_img ? heroPath(header.hero_img) : "";
const heroH1       = header?.title || "Fernie Real Estate"; // ✅ H1 uses TITLE only
const pageSeoTitle = header?.seo_title || heroH1;
const pageSeoDesc  = header?.seo_description || header?.summary || "";
---

<Site showHeader={true} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>

  {heroSrc && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={heroSrc} fetchpriority="high" />
    </Fragment>
  )}

  <!-- HERO with H1 overlay -->
  <section class="hero-bleed">
    {heroSrc && (
      <img
        src={heroSrc}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
      />
    )}
    <div class="hero-overlay">
      <h1>{heroH1}</h1>
    </div>
  </section>

  <div class="container">
    <section class="grid-wrap">
      {error ? (
        <p class="error">Error: {error}</p>
      ) : items.length === 0 ? (
        <p>No neighbourhoods yet. Check your <code>PUBLIC_SHEET_JSON</code> URL or add rows to your sheet.</p>
      ) : (
        <div class="grid">
          {items.map((n) => {
            const primary = n.hero_img ? heroPath(n.hero_img) : "";
            const altBase = primary.includes("/images/")
              ? primary.replace("/images/", "/img/")
              : primary.replace("/img/", "/images/");
            const filename = (primary.split("/").pop() || "").trim();
            const finalFallback = filename ? `/img/hero/${filename}` : "";

            return (
              <a class="card" href={`/neighbourhoods/${n.slug}`}>
                <div class="thumb">
                  {primary ? (
                    <img
                      src={primary}
                      alt={n.title}
                      loading="lazy"
                      decoding="async"
                      onerror={`
                        if (this.dataset.step!=='1'){ this.dataset.step='1'; this.src='${altBase}'; }
                        else if (this.dataset.step!=='2' && '${finalFallback}'){ this.dataset.step='2'; this.src='${finalFallback}'; }
                        else {
                          const ph = document.createElement('div');
                          ph.className = 'ph';
                          ph.setAttribute('aria-hidden','true');
                          ph.textContent = 'No image';
                          this.replaceWith(ph);
                        }
                      `}
                    />
                  ) : (
                    <div class="ph" aria-hidden="true">No image</div>
                  )}
                </div>
                <div class="body">
                  <strong>{n.title}</strong>
                  {n.summary && <p>{(n.summary).split(/\s+/).slice(0,10).join(" ") + ((n.summary).split(/\s+/).length>10 ? "…" : "")}</p>}
                </div>
              </a>
            );
          })}
        </div>
      )}
    </section>
    <section class="container">
  <h2 class="sr-only">Fernie Snow Report</h2>
  <SnowReport />
</section>

<section class="container" style="margin-top:1rem">
    <h2 class="sr-only">Fernie Weather Report</h2>
  <WeatherReport />
</section>
  </div>

  <style>
    .container { max-width: 1200px; margin: 24px auto 0; padding: 0 1rem; }

    .hero-bleed {
      position: relative;
      width: 100%;
      height:75vh;
      min-height: 420px;
      overflow: clip;
      isolation: isolate;
      background: #e5e7eb;
    }
    .hero-bleed img {
      position: absolute;
      inset: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
      z-index: 0;
    }
    .hero-overlay {
      position: absolute;
      inset: 0;
      z-index: 1;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      color: white;
      padding: 0 1rem;
      background: linear-gradient(to top, rgba(0,0,0,0.45) 0%, rgba(0,0,0,0.15) 60%, transparent 100%);
    }
    .hero-overlay h1 {
      font-size: 3.25rem;
      font-weight: 800;
      line-height: 1.1;
      margin: 0;
      text-shadow: 0 2px 6px rgba(0,0,0,0.5);
      letter-spacing: -0.01em;
    }
    @media (min-width: 768px) { .hero-overlay h1 { font-size: 4.25rem; } }
    @media (min-width: 1024px){ .hero-overlay h1 { font-size: 4.75rem; } }

    .grid-wrap { margin-top: 24px; }
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 16px;
    }

    .card {
      display: flex; flex-direction: column;
      background: #fff; border-radius: 12px; overflow: hidden;
      border: 1px solid #eee; text-decoration: none; color: inherit;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      transform: translateY(0);
      transition: transform 0.25s ease, box-shadow 0.25s ease;
    }
    .card:hover { transform: translateY(-6px); box-shadow: 0 6px 16px rgba(0,0,0,0.12); }

    .thumb { aspect-ratio: 16/9; background: #f6f6f6; display: grid; place-items: center; }
    .thumb img { width: 100%; height: 100%; object-fit: cover; display: block; }

    .ph { font-size: 12px; color: #999; }
    .body { padding: 12px; }
    .body p { margin: .4rem 0 0 0; color: #555; font-size: .95rem; line-height: 1.35; }
    .error { color: #b00; }
  </style>
</Site>
