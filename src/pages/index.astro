---
// src/pages/index.astro
import Site from "../layouts/Site.astro";
import { getJson } from "../lib/fetchJson";
import { heroPath } from "../lib/paths";

const homeUrl  = import.meta.env.PUBLIC_HOME_JSON;

type Row = {
  slug?: string;
  title?: string;
  summary?: string;
  hero_img?: string;
  status?: string;
  seo_title?: string;
  seo_description?: string;
  cta1?: string; // RealtyVis block ID (e.g., MQP2VMLT-XXXX) OR full snippet
};

let header: Row | null = null;
let error: string | null = null;

const getVal = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const normalize = (r:any): Row => {
  const title = getVal(r,"title");
  const computedSlug = (title||"").toLowerCase()
    .replace(/&/g,"-and-").replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"");
  return {
    slug: getVal(r,"slug") || computedSlug,
    title,
    summary: getVal(r,"summary"),
    hero_img: getVal(r,"hero_img"),
    status: getVal(r,"status"),
    seo_title: getVal(r,"seo_title"),
    seo_description: getVal(r,"seo_description"),
    cta1: getVal(r,"cta1"),
  };
};

try {
  if (!homeUrl) throw new Error("Missing PUBLIC_HOME_JSON in .env for homepage content.");
  const rawHome = await getJson<any>(homeUrl);
  const homeRows: any[] =
    Array.isArray(rawHome) ? rawHome :
    Array.isArray(rawHome?.data) ? rawHome.data :
    Array.isArray(rawHome?.rows) ? rawHome.rows : [];
  header = homeRows.length > 0 ? normalize(homeRows[0]) : null;
} catch (e:any) {
  error = e?.message || String(e);
}

const heroSrc      = header?.hero_img ? heroPath(header.hero_img) : "";
const heroH1       = header?.title || "Fernie Real Estate";
const pageSeoTitle = header?.seo_title || heroH1;
const pageSeoDesc  = header?.seo_description || header?.summary || "";

// Weather coords (default: Fernie Alpine Resort)
const WX_LAT = Number(import.meta.env.PUBLIC_WEATHER_LAT ?? "") || 49.463;
const WX_LON = Number(import.meta.env.PUBLIC_WEATHER_LON ?? "") || -115.090;
---

<Site showHeader={true} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>

  {heroSrc && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={heroSrc} fetchpriority="high" />
    </Fragment>
  )}

  <!-- HERO -->
  <section class="hero-bleed">
    {heroSrc && (
      <img
        src={heroSrc}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
      />
    )}
    <div class="hero-overlay">
      <h1>{heroH1}</h1>
      {header?.summary && <p class="hero-lead">{header.summary}</p>}
    </div>
  </section>

  <div class="container">
    <!-- LISTINGS from HOME!cta1 -->
    <section class="section">
      <h2 class="visually-hidden">Featured Listings</h2>

      {error ? (
        <p class="error">Error: {error}</p>
      ) : header?.cta1 ? (
        <div class="listing-embed">
          {
            // If CTA1 contains HTML, render it as-is (may include its own <script>)
            /[<>]/.test(header.cta1)
              ? <Fragment set:html={header.cta1}></Fragment>
              : (
                  // If CTA1 is just an ID (e.g., MQP2VMLT-MA9LM8VT), emit the block only.
                  // Rely on your global RealtyVis loader in Site.astro to load & init the script.
                  <div data-rv-block={header.cta1}></div>
                )
          }
        </div>
      ) : (
        <p>Tip: Put your RealtyVis block ID (e.g. <code>MQP2VMLT-XXXXX</code>) or full embed snippet into <code>HOME!cta1</code> to render listings here.</p>
      )}
    </section>

    <!-- SNOW REPORT -->
    <section class="section">
      <h2 class="section-title">Snow Report (Fernie Alpine Resort)</h2>
      <div id="snow-report" class="wx-card">
        <div class="wx-row">
          <div class="wx-metric"><div class="wx-label">24-hr Snow</div><div class="wx-value" id="snow24">–</div></div>
          <div class="wx-metric"><div class="wx-label">72-hr Snow</div><div class="wx-value" id="snow72">–</div></div>
          <div class="wx-metric"><div class="wx-label">Base Depth</div><div class="wx-value" id="snowDepth">–</div></div>
        </div>
        <small class="wx-note">Approx. forecast • {WX_LAT.toFixed(3)}, {WX_LON.toFixed(3)}</small>
      </div>
    </section>

    <!-- WEATHER -->
    <section class="section">
      <h2 class="section-title">Weather</h2>
      <div id="weather-report" class="wx-card">
        <div class="wx-now">
          <div class="wx-now-temp"><span id="temp">–</span><span class="unit">°C</span></div>
          <div class="wx-now-meta">
            <span id="winds">Wind –</span> • <span id="precip">Precip –</span>
          </div>
        </div>
        <div id="wx-daily" class="wx-daily"></div>
        <small class="wx-note">Open-Meteo • {WX_LAT.toFixed(3)}, {WX_LON.toFixed(3)}</small>
      </div>
    </section>
  </div>

  <script>
    (async () => {
      const lat = {WX_LAT};
      const lon = {WX_LON};

      const url = new URL("https://api.open-meteo.com/v1/forecast");
      url.searchParams.set("latitude", String(lat));
      url.searchParams.set("longitude", String(lon));
      url.searchParams.set("current", "temperature_2m,precipitation,wind_speed_10m");
      url.searchParams.set("daily", "snowfall_sum,snow_depth_max,precipitation_sum,temperature_2m_max,temperature_2m_min");
      url.searchParams.set("timezone", "auto");

      try {
        const res = await fetch(url.toString(), { cache: "no-store" });
        const data = await res.json();

        const temp = Math.round(data.current?.temperature_2m ?? 0);
        const wind = Math.round(data.current?.wind_speed_10m ?? 0);
        const precip = data.current?.precipitation ?? 0;

        document.getElementById("temp").textContent = temp;
        document.getElementById("winds").textContent = `Wind ${wind} km/h`;
        document.getElementById("precip").textContent = `Precip ${precip.toFixed(1)} mm`;

        const daily = document.getElementById("wx-daily");
        daily.innerHTML = (data.daily?.time || []).slice(0,5).map((d,i)=>{
          const dt = new Date(d+"T00:00:00");
          const label = dt.toLocaleDateString(undefined,{weekday:"short",month:"short",day:"numeric"});
          const tmax = Math.round(data.daily.temperature_2m_max[i]);
          const tmin = Math.round(data.daily.temperature_2m_min[i]);
          const snow = (data.daily.snowfall_sum[i] ?? 0).toFixed(1);
          const p = (data.daily.precipitation_sum[i] ?? 0).toFixed(1);
          return `
            <div class="wx-day">
              <div class="wx-day-label">${label}</div>
              <div class="wx-day-temps">${tmax}° / ${tmin}°</div>
              <div class="wx-day-snow">${snow} cm snow</div>
              <div class="wx-day-precip">${p} mm precip</div>
            </div>
          `;
        }).join("");

        const snow24 = data.daily?.snowfall_sum?.[0] ?? 0;
        const snow72 = (data.daily?.snowfall_sum?.[0] ?? 0)
                     + (data.daily?.snowfall_sum?.[1] ?? 0)
                     + (data.daily?.snowfall_sum?.[2] ?? 0);
        const depth  = data.daily?.snow_depth_max?.[0] ?? 0;

        document.getElementById("snow24").textContent  = `${snow24.toFixed(1)} cm`;
        document.getElementById("snow72").textContent  = `${snow72.toFixed(1)} cm`;
        document.getElementById("snowDepth").textContent = `${depth.toFixed(0)} cm`;
      } catch (err) {
        console.warn("Weather fetch failed", err);
      }
    })();
  </script>

  <style>
    .container { max-width: 1200px; margin: 24px auto 0; padding: 0 1rem; }

    .hero-bleed {
      position: relative; width: 100%; height: 75vh; min-height: 420px;
      overflow: clip; isolation: isolate; background: #e5e7eb;
    }
    .hero-bleed img { position: absolute; inset: 0; width: 100%; height: 100%; object-fit: cover; z-index: 0; }
    .hero-overlay {
      position: absolute; inset: 0; z-index: 1; display: grid; place-items: center;
      text-align: center; color: white; padding: 0 1rem;
      background: linear-gradient(to top, rgba(0,0,0,0.45) 0%, rgba(0,0,0,0.15) 60%, transparent 100%);
    }
    .hero-overlay h1 { font-size: clamp(2.5rem, 6vw, 4.75rem); line-height: 1.1; margin: 0; text-shadow: 0 2px 6px rgba(0,0,0,0.5); letter-spacing: -0.01em; }
    .hero-lead { max-width: 68ch; margin: .6rem auto 0; text-wrap: balance; }

    .section { margin: 28px 0 40px; }
    .section-title { margin: 0 0 12px; font-size: 1.25rem; letter-spacing: .01em; }
    .error { color: #b00; }

    .wx-card { border: 1px solid #eee; border-radius: 12px; padding: 16px; background: #fff; box-shadow: 0 1px 3px rgba(0,0,0,0.05); }
    .wx-row { display: grid; grid-template-columns: repeat(3, 1fr); gap: 12px; margin-bottom: 10px; }
    .wx-metric { background:#f9fafb; border:1px solid #f1f1f1; border-radius:10px; padding:12px; text-align:center; }
    .wx-label { font-size:.8rem; color:#666; }
    .wx-value { font-size:1.25rem; font-weight:700; margin-top:4px; }

    .wx-now { display:flex; align-items:baseline; gap:16px; margin-bottom:12px; }
    .wx-now-temp { font-size:2rem; font-weight:800; }
    .wx-now-temp .unit { font-size:1rem; opacity:.8; margin-left:2px; }
    .wx-now-meta { color:#555; }

    .wx-daily { display:grid; grid-template-columns: repeat(auto-fit, minmax(160px,1fr)); gap:10px; margin-top:8px; }
    .wx-day { border:1px solid #f1f1f1; border-radius:10px; padding:10px; background:#fafafa; }
    .wx-day-label { font-weight:700; margin-bottom:4px; }
    .wx-day-temps, .wx-day-snow, .wx-day-precip { font-size:.9rem; color:#444; }

    .wx-note { display:block; margin-top:8px; color:#777; font-size:.75rem; }
    .visually-hidden {
      position:absolute!important;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;
      clip:rect(0,0,0,0);white-space:nowrap;border:0;
    }
  </style>
</Site>
