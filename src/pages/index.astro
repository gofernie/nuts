---
// src/pages/index.astro
import Site from "../layouts/Site.astro";
import { getJson } from "../lib/fetchJson";
import { heroPath } from "../lib/paths";
export const prerender = true;

const homeUrl = import.meta.env.PUBLIC_HOME_JSON;
const listUrl = import.meta.env.PUBLIC_SHEET_JSON;

type Row = {
  slug?: string;
  title?: string;
  summary?: string;
  hero_img?: string;
  status?: string;
  seo_title?: string;
  seo_description?: string;
  cta1?: string;
  cta2?: string;
  cta3?: string;
};

let header: Row | null = null;
let allItems: Row[] = [];
let items: Row[] = [];
let error: string | null = null;

const val = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const normalize = (r:any): Row => {
  const title = val(r,"title");
  const computedSlug = (title||"").toLowerCase()
    .replace(/&/g,"-and-").replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"");
  return {
    slug: val(r,"slug") || computedSlug,
    title,
    summary: val(r,"summary"),
    hero_img: val(r,"hero_img"),
    status: val(r,"status"),
    seo_title: val(r,"seo_title"),
    seo_description: val(r,"seo_description"),
    cta1: val(r,"cta1"),
    cta2: val(r,"cta2"),
    cta3: val(r,"cta3"),
  };
};

const visible = (r:any) => {
  const s = (r?.status || "").toLowerCase();
  const slug = (r?.slug || "").toLowerCase();
  return s !== "hidden" && s !== "inactive" && s !== "draft" && slug !== "index";
};

try {
  if (!homeUrl) throw new Error("Missing PUBLIC_HOME_JSON in .env for homepage content.");
  const rawHome = await getJson<any>(homeUrl);
  const homeRows:any[] =
    Array.isArray(rawHome) ? rawHome :
    Array.isArray(rawHome?.data) ? rawHome.data :
    Array.isArray(rawHome?.rows) ? rawHome.rows : [];
  header = homeRows.length ? normalize(homeRows[0]) : null;

  if (listUrl) {
    const rawList = await getJson<any>(listUrl);
    const rows:any[] =
      Array.isArray(rawList) ? rawList :
      Array.isArray(rawList?.data) ? rawList.data :
      Array.isArray(rawList?.rows) ? rawList.rows : [];
    allItems = rows.map(normalize).filter(visible);
  }
} catch (e:any) {
  error = e?.message || String(e);
}

const MAX_NEIGH_CARDS = 4;
const MUST_SLUGS = new Set(["skihill","ski-hill","fernie-ski-hill","ski-hill-condos","fernie-ski-hill-condos"]);

function chooseNeighbourCards(list: Row[], max = MAX_NEIGH_CARDS): Row[] {
  if (!list.length) return [];
  const lower = (s:string)=> (s||"").toLowerCase();
  const isSki = (slug?:string)=> {
    const s = lower(slug||"");
    return MUST_SLUGS.has(s) || /(^|-)ski(-|\b).*hill(\b|-$)/.test(s) || /ski.*hill/.test(s);
  };

  const must = list.find(r => isSki(r.slug));
  const rest = list.filter(r => r !== must);
  const a = [...rest];
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }

  const picked: Row[] = [];
  if (must) picked.push(must);
  picked.push(...a.slice(0, Math.max(0, max - picked.length)));
  return picked.slice(0, max);
}

items = chooseNeighbourCards(allItems);

const heroSrc      = header?.hero_img ? heroPath(header.hero_img) : "";
const heroH1       = header?.title || "Fernie Real Estate";
const pageSeoTitle = header?.seo_title || heroH1;
const pageSeoDesc  = header?.seo_description || header?.summary || "";
---

<Site showHeader={true} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  {heroSrc && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={heroSrc} fetchpriority="high" />
    </Fragment>
  )}

  <!-- HERO (only H1 now) -->
  <section class="hero-bleed">
    {heroSrc && (
      <img
        src={heroSrc}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
      />
    )}
    <div class="hero-overlay">
      <h1>{heroH1}</h1>
    </div>
  </section>

  <!-- SUMMARY CARD -->
  {header?.summary && (
    <div class="container">
      <section class="section">
        <div class="summary-card">
          <div class="prose" set:html={header.summary}></div>
        </div>
      </section>
    </div>
  )}

  <!-- NEIGHBOURHOODS TEASER -->
  {items.length > 0 && (
    <section class="section" id="neigh">
      <div class="section-head">
        <h2>Neighbourhoods</h2>
        <a class="link" href="/neighbourhoods" data-astro-prefetch="hover">Browse all â†’</a>
      </div>
      <div class="grid">
        {items.slice(0,4).map((n) => {
          const primary = n.hero_img ? heroPath(n.hero_img) : "";
          return (
            <a class="card" href={`/neighbourhoods/${n.slug}`} aria-label={n.title}>
              <div class="thumb">
                {primary
                  ? <img src={primary} alt={n.title} loading="lazy" decoding="async" />
                  : <div class="ph">No image</div>}
                <div class="thumb-grad" aria-hidden="true"></div>
                <div class="thumb-chip">{n.title}</div>
              </div>
              <div class="body">
                {n.summary && <p>{n.summary}</p>}
              </div>
            </a>
          );
        })}
      </div>
    </section>
  )}

  <style>
    .container { max-width: 1200px; margin: 24px auto 0; padding: 0 1rem; }

    /* HERO */
    .hero-bleed { position: relative; width: 100%; height: 80vh; min-height: 420px; overflow: clip; isolation: isolate; background: #e5e7eb; }
    .hero-bleed img { position: absolute; inset: 0; width: 100%; height: 100%; object-fit: cover; z-index: 0; }
    .hero-overlay {
      position: absolute; inset: 0; z-index: 1; display: grid; place-items: center; text-align: center; color: white; padding: 0 1rem;
      background: linear-gradient(to top, rgba(0,0,0,0.45) 0%, rgba(0,0,0,0.15) 60%, transparent 100%);
    }
    .hero-overlay h1 { font-size: clamp(2.5rem, 6vw, 4.75rem); line-height: 1.1; margin: 0; text-shadow: 0 2px 6px rgba(0,0,0,0.5); letter-spacing: -0.01em; }

    .summary-card {
      background:#fff; border:1px solid #eee; border-radius:14px; padding:18px 18px 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    }
    .summary-card .prose { font-size: clamp(1rem, 2.2vw, 1.1rem); line-height: 1.65; color:#1f2937; }
    .summary-card .prose a { text-decoration: underline; }

    .section { margin: 28px 0 40px; }
    .section-head { display:flex; align-items:baseline; justify-content:space-between; gap:16px; margin-bottom:12px; }
    .section-head h2 { margin: 0; font-size: 1.35rem; letter-spacing: .01em; }
    .link { text-decoration:none; color:#111827; opacity:.8; }
    .link:hover { opacity:1; }

    /* NEIGHBOURHOODS GRID */
    .grid { display:grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 12px; }
    .card { display:flex; flex-direction:column; background:#fff; border:1px solid #eee; border-radius:12px; overflow:hidden; text-decoration:none; color:inherit; box-shadow: 0 1px 3px rgba(0,0,0,0.05); transform: translateY(0); transition: transform .25s ease, box-shadow .25s ease; }
    .card:hover { transform: translateY(-6px); box-shadow: 0 6px 16px rgba(0,0,0,0.12); }
    .thumb { position:relative; aspect-ratio: 16/9; background:#f6f6f6; display:grid; place-items:center; overflow:hidden; }
    .thumb img { width:100%; height:100%; object-fit:cover; display:block; }
    .thumb-grad { position:absolute; inset:auto 0 0 0; height:56%; background: linear-gradient(to top, rgba(0,0,0,.55), rgba(0,0,0,0)); }
    .thumb-chip {
      position:absolute; left:10px; bottom:10px; color:#fff; font-weight:800; letter-spacing:.2px;
      text-shadow: 0 2px 8px rgba(0,0,0,.45); font-size: clamp(1rem, 2vw, 1.15rem);
    }
    .ph { font-size:12px; color:#999; }
    .body { padding: 12px; }
    .body p { margin:.4rem 0 0; color:#555; font-size:.95rem; line-height:1.35; display:-webkit-box; -webkit-line-clamp:3; -webkit-box-orient:vertical; overflow:hidden; }
  </style>
</Site>
