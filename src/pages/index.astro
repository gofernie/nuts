---
// src/pages/index.astro
import Site from "../layouts/Site.astro";
import { getJson } from "../lib/fetchJson";
import { heroPath } from "../lib/paths";
export const prerender = true;

const homeUrl = import.meta.env.PUBLIC_HOME_JSON;
const listUrl = import.meta.env.PUBLIC_SHEET_JSON;

type Row = {
  slug?: string;
  title?: string;
  summary?: string;
  hero_img?: string;
  status?: string;
  seo_title?: string;
  seo_description?: string;
  cta1?: string; // RealtyVis block ID or full snippet
  cta2?: string; // Feature copy (HTML/text)
  cta3?: string; // Optional extra
};

let header: Row | null = null;
let allItems: Row[] = [];
let items: Row[] = [];
let error: string | null = null;

const val = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const normalize = (r:any): Row => {
  const title = val(r,"title");
  const computedSlug = (title||"").toLowerCase()
    .replace(/&/g,"-and-").replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"");
  return {
    slug: val(r,"slug") || computedSlug,
    title,
    summary: val(r,"summary"),
    hero_img: val(r,"hero_img"),
    status: val(r,"status"),
    seo_title: val(r,"seo_title"),
    seo_description: val(r,"seo_description"),
    cta1: val(r,"cta1"),
    cta2: val(r,"cta2"),
    cta3: val(r,"cta3"),
  };
};

const visible = (r:any) => {
  const s = (r?.status || "").toLowerCase();
  const slug = (r?.slug || "").toLowerCase();
  return s !== "hidden" && s !== "inactive" && s !== "draft" && slug !== "index";
};

try {
  // HOME header
  if (!homeUrl) throw new Error("Missing PUBLIC_HOME_JSON in .env for homepage content.");
  const rawHome = await getJson<any>(homeUrl);
  const homeRows:any[] =
    Array.isArray(rawHome) ? rawHome :
    Array.isArray(rawHome?.data) ? rawHome.data :
    Array.isArray(rawHome?.rows) ? rawHome.rows : [];
  header = homeRows.length ? normalize(homeRows[0]) : null;

  // Neighbourhoods source
  if (listUrl) {
    const rawList = await getJson<any>(listUrl);
    const rows:any[] =
      Array.isArray(rawList) ? rawList :
      Array.isArray(rawList?.data) ? rawList.data :
      Array.isArray(rawList?.rows) ? rawList.rows : [];
    allItems = rows.map(normalize).filter(visible);
  }
} catch (e:any) {
  error = e?.message || String(e);
}

/* ---- Neighbourhoods (4 only; Ski Hill first) ---- */
const MAX_NEIGH_CARDS = 4;
const MUST_SLUGS = new Set(["skihill","ski-hill","fernie-ski-hill","ski-hill-condos","fernie-ski-hill-condos"]);

function chooseNeighbourCards(list: Row[], max = MAX_NEIGH_CARDS): Row[] {
  if (!list.length) return [];
  const lower = (s:string)=> (s||"").toLowerCase();
  const isSki = (slug?:string)=> {
    const s = lower(slug||"");
    return MUST_SLUGS.has(s) || /(^|-)ski(-|\b).*hill(\b|-$)/.test(s) || /ski.*hill/.test(s);
  };

  const must = list.find(r => isSki(r.slug));
  const rest = list.filter(r => r !== must);

  // Shuffle the rest
  const a = [...rest];
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }

  const picked: Row[] = [];
  if (must) picked.push(must);
  picked.push(...a.slice(0, Math.max(0, max - picked.length)));
  return picked.slice(0, max);
}

items = chooseNeighbourCards(allItems);

/* ---- SEO / hero ---- */
const heroSrc      = header?.hero_img ? heroPath(header.hero_img) : "";
const heroH1       = header?.title || "Fernie Real Estate";
const pageSeoTitle = header?.seo_title || heroH1;
const pageSeoDesc  = header?.seo_description || header?.summary || "";

/* ---- Weather coords (default: FAR) ---- */
const WX_LAT = Number(import.meta.env.PUBLIC_WEATHER_LAT ?? "") || 49.463;
const WX_LON = Number(import.meta.env.PUBLIC_WEATHER_LON ?? "") || -115.090;
---

<Site showHeader={true} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>

  {heroSrc && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={heroSrc} fetchpriority="high" />
      <!-- RealtyVis warm-up DNS/conn -->
      <link rel="preconnect" href="https://cdn.realtyvis.com" crossorigin>
      <link rel="dns-prefetch" href="https://cdn.realtyvis.com">
      <link rel="preconnect" href="https://app.realtyvis.com" crossorigin>
      <link rel="dns-prefetch" href="https://app.realtyvis.com">
      <link rel="prefetch" href="https://cdn.realtyvis.com/js/embed.js" as="script">
    </Fragment>
  )}

  <!-- HERO -->
  <section class="hero-bleed">
    {heroSrc && (
      <img
        src={heroSrc}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
      />
    )}
    <div class="hero-overlay">
      <h1>{heroH1}</h1>
    </div>
  </section>

  <!-- SUMMARY: white card container under hero -->
  {header?.summary && (
    <div class="container">
      <section class="section">
        <div class="summary-card">
          <div class="prose" set:html={header.summary}></div>
        </div>
      </section>
    </div>
  )}

  <div class="container">

    <!-- QUICK TILES -->
    <section class="section tiles tiles--upgraded">
      <a class="tile" href="/search" data-astro-prefetch="hover" data-jump="#new-listings" data-accent="indigo" aria-label="Buy in Fernie">
        <div class="tile-ico-wrap">
          <div class="tile-ico">üè†</div>
        </div>
        <div class="tile-title">Buy in Fernie</div>
        <p>See active listings and set alerts.</p>
      </a>

      <a class="tile" href="/contact" data-astro-prefetch data-accent="rose" aria-label="Sell with a Plan">
        <div class="tile-ico-wrap">
          <div class="tile-ico">üìà</div>
        </div>
        <div class="tile-title">Sell with a Plan</div>
        <p>Pricing, prep, and marketing that works.</p>
      </a>

      <a class="tile" href="/neighbourhoods/" data-jump="#neigh" data-accent="emerald" aria-label="Explore Areas">
        <div class="tile-ico-wrap">
          <div class="tile-ico">üó∫Ô∏è</div>
        </div>
        <div class="tile-title">Explore Areas</div>
        <p>Compare neighbourhoods and vibes.</p>
      </a>
    </section>

    <!-- NEW LISTINGS -->
    <section class="section" id="new-listings">
      <div class="section-head">
        <h2>New Listings</h2>
        <a class="link btn btn-ghost" href="/search" data-astro-prefetch="hover">See all ‚Üí</a>
      </div>

      {error ? (
        <p class="error">Error: {error}</p>
      ) : header?.cta1 ? (
        <div class="listing-wrap">
          <div class="rv-host">
            {
              /[<>]/.test(header.cta1)
                ? <Fragment set:html={header.cta1}></Fragment>
                : <div data-rv-block={header.cta1}></div>
            }
          </div>

          <!-- Hover-to-warm connections for RealtyVis (no template literals) -->
          <script is:inline>
(function () {
  var warmed = false;
  function warm() {
    if (warmed) return; warmed = true;
    new Image().src = "https://app.realtyvis.com/favicon.ico";
    new Image().src = "https://cdn.realtyvis.com/favicon.ico";
    try {
      fetch("https://app.realtyvis.com/css/site.min.css", { mode: "no-cors" }).catch(function(){});
      fetch("https://app.realtyvis.com/js/site.min.js", { mode: "no-cors" }).catch(function(){});
    } catch (e) {}
  }
  var host = document.querySelector(".rv-host") || document.querySelector(".listing-wrap");
  if (!host) return;
  ["pointerover", "touchstart", "focusin"].forEach(function (ev) {
    host.addEventListener(ev, warm, { once: true, passive: true });
  });
})();
          </script>
        </div>
      ) : (
        <p class="muted">
          Add your RealtyVis block ID (e.g. <code>MQP2VMLT-XXXXX</code>) or full embed snippet to <code>HOME!cta1</code>.
        </p>
      )}
    </section>

    <!-- NEIGHBOURHOODS TEASER (4 only; Ski Hill first) -->
    {items.length > 0 && (
      <section class="section" id="neigh">
        <div class="section-head">
          <h2>Neighbourhoods</h2>
          <a class="link" href="/neighbourhoods" data-astro-prefetch="hover">Browse all ‚Üí</a>
        </div>
        <div class="grid">
          {items.slice(0,4).map((n) => {
            const primary = n.hero_img ? heroPath(n.hero_img) : "";
            return (
              <a class="card" href={`/neighbourhoods/${n.slug}`} aria-label={n.title}>
                <div class="thumb">
                  {primary
                    ? <img src={primary} alt={n.title} loading="lazy" decoding="async" />
                    : <div class="ph">No image</div>}
                  <div class="thumb-grad" aria-hidden="true"></div>
                  <div class="thumb-chip">{n.title}</div>
                </div>
                <div class="body">
                  {n.summary && <p>{n.summary}</p>}
                </div>
              </a>
            );
          })}
        </div>
      </section>
    )}

    <!-- SNOW & WEATHER -->
    <section class="section two-col">
      <div class="wx-card">
        <div class="wx-header">Snow Report (Fernie Alpine Resort)</div>
        <div class="wx-row">
          <div class="wx-metric"><div class="wx-label">24-hr Snow</div><div class="wx-value" id="snow24">‚Äì</div></div>
          <div class="wx-metric"><div class="wx-label">72-hr Snow</div><div class="wx-value" id="snow72">‚Äì</div></div>
          <div class="wx-metric"><div class="wx-label">Base Depth</div><div class="wx-value" id="snowDepth">‚Äì</div></div>
        </div>
        <small class="wx-note">Approx. forecast ‚Ä¢ {WX_LAT.toFixed(3)}, {WX_LON.toFixed(3)}</small>
      </div>

      <div class="wx-card">
        <div class="wx-header">Weather</div>
        <div class="wx-now">
          <div class="wx-now-temp"><span id="temp">‚Äì</span><span class="unit">¬∞C</span></div>
          <div class="wx-now-meta"><span id="winds">Wind ‚Äì</span> ‚Ä¢ <span id="precip">Precip ‚Äì</span></div>
        </div>
        <div id="wx-daily" class="wx-daily"></div>
        <small class="wx-note">Open-Meteo ‚Ä¢ {WX_LAT.toFixed(3)}, {WX_LON.toFixed(3)}</small>
      </div>
    </section>

  </div>

  <script>
    // Smooth jump + ripple click effect
    function enhanceButtons(){
      const ease = (t)=>1- Math.pow(1-t,3);

      document.querySelectorAll('[data-jump]').forEach(el=>{
        el.addEventListener('click', (e)=>{
          const targetSel = el.getAttribute('data-jump');
          if (!targetSel) return;
          const target = document.querySelector(targetSel);
          if (!target) return;
          e.preventDefault();

          const start = window.scrollY;
          const end = target.getBoundingClientRect().top + window.scrollY - 12;
          const dur = 500;
          const t0 = performance.now();
          function step(t){
            const p = Math.min(1, (t - t0)/dur);
            const y = start + (end - start) * ease(p);
            window.scrollTo(0, y);
            if (p < 1) requestAnimationFrame(step);
          }
          requestAnimationFrame(step);
        }, {passive:false});
      });

      document.addEventListener('click', (e)=>{
        const btn = (e.target as HTMLElement)?.closest('.ripple, .btn, .tile');
        if (!btn) return;
        const rect = (btn as HTMLElement).getBoundingClientRect();
        const circle = document.createElement('span');
        circle.className = 'ripple-ink';
        const size = Math.max(rect.width, rect.height);
        circle.style.width = circle.style.height = size + 'px';
        circle.style.left = (('clientX' in e ? (e as MouseEvent).clientX : rect.left) - rect.left - size/2) + 'px';
        circle.style.top  = (('clientY' in e ? (e as MouseEvent).clientY : rect.top)  - rect.top  - size/2) + 'px';
        (btn as HTMLElement).appendChild(circle);
        setTimeout(()=>circle.remove(), 450);
      }, {passive:true});
    }

    // Weather + Snow (Open-Meteo)
    function renderWeather() {
      const lat = {WX_LAT};
      const lon = {WX_LON};
      const url = new URL("https://api.open-meteo.com/v1/forecast");
      url.searchParams.set("latitude", String(lat));
      url.searchParams.set("longitude", String(lon));
      url.searchParams.set("current", "temperature_2m,precipitation,wind_speed_10m");
      url.searchParams.set("daily", "snowfall_sum,snow_depth_max,precipitation_sum,temperature_2m_max,temperature_2m_min");
      url.searchParams.set("timezone", "auto");

      fetch(url.toString(), { cache: "no-store" })
        .then(r => r.json())
        .then(data => {
          const el = (id) => document.getElementById(id);
          const temp = Math.round(data?.current?.temperature_2m ?? 0);
          const wind = Math.round(data?.current?.wind_speed_10m ?? 0);
          const precip = data?.current?.precipitation ?? 0;

          if (el("temp"))    el("temp").textContent = String(temp);
          if (el("winds"))   el("winds").textContent = `Wind ${wind} km/h`;
          if (el("precip"))  el("precip").textContent = `Precip ${Number(precip||0).toFixed(1)} mm`;

          const daily = document.getElementById("wx-daily");
          if (daily && data?.daily?.time) {
            daily.innerHTML = data.daily.time.slice(0,5).map((d,i)=>{
              const dt = new Date(d+"T00:00:00");
              const label = dt.toLocaleDateString(undefined,{weekday:"short",month:"short",day:"numeric"});
              const tmax = Math.round(data.daily.temperature_2m_max[i] ?? 0);
              const tmin = Math.round(data.daily.temperature_2m_min[i] ?? 0);
              const snow = Number(data.daily.snowfall_sum[i] ?? 0).toFixed(1);
              const p = Number(data.daily.precipitation_sum[i] ?? 0).toFixed(1);
              return `
                <div class="wx-day">
                  <div class="wx-day-label">${label}</div>
                  <div class="wx-day-temps">${tmax}¬∞ / ${tmin}¬∞</div>
                  <div class="wx-day-snow">${snow} cm snow</div>
                  <div class="wx-day-precip">${p} mm precip</div>
                </div>`;
            }).join("");
          }

          const snow24 = Number(data?.daily?.snowfall_sum?.[0] ?? 0).toFixed(1);
          const snow72 = Number(
            (data?.daily?.snowfall_sum?.[0] ?? 0) +
            (data?.daily?.snowfall_sum?.[1] ?? 0) +
            (data?.daily?.snowfall_sum?.[2] ?? 0)
          ).toFixed(1);
          const depth  = Number(data?.daily?.snow_depth_max?.[0] ?? 0).toFixed(0);

          if (el("snow24"))   el("snow24").textContent  = `${snow24} cm`;
          if (el("snow72"))   el("snow72").textContent  = `${snow72} cm`;
          if (el("snowDepth"))el("snowDepth").textContent = `${depth} cm`;
        })
        .catch(()=>{ /* ignore for now */ });
    }

    addEventListener("astro:page-load", () => { enhanceButtons(); renderWeather(); }, { once: true });
    addEventListener("pageshow", (e)=>{ if (e.persisted) { enhanceButtons(); renderWeather(); } });
  </script>

  <style>
    .container { max-width: 1200px; margin: 24px auto 0; padding: 0 1rem; }

    /* HERO */
    .hero-bleed { position: relative; width: 100%; height: 80vh; min-height: 420px; overflow: clip; isolation: isolate; background: #e5e7eb; }
    .hero-bleed img { position: absolute; inset: 0; width: 100%; height: 100%; object-fit: cover; z-index: 0; }
    .hero-overlay {
      position: absolute; inset: 0; z-index: 1; display: grid; place-items: center; text-align: center; color: white; padding: 0 1rem;
      background: linear-gradient(to top, rgba(0,0,0,0.45) 0%, rgba(0,0,0,0.15) 60%, transparent 100%);
    }
    .hero-overlay h1 { font-size: clamp(2.5rem, 6vw, 4.75rem); line-height: 1.1; margin: 0; text-shadow: 0 2px 6px rgba(0,0,0,0.5); letter-spacing: -0.01em; }

    /* SUMMARY CARD */
    .summary-card {
      background:#fff; border:1px solid #eee; border-radius:14px; padding:18px 18px 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    }
    .summary-card .prose { font-size: clamp(1rem, 2.2vw, 1.1rem); line-height: 1.65; color:#1f2937; }

    .section { margin: 28px 0 40px; }
    .section-head { display:flex; align-items:baseline; justify-content:space-between; gap:16px; margin-bottom:12px; }
    .section-head h2 { margin: 0; font-size: 1.35rem; letter-spacing: .01em; }
    .link { text-decoration:none; color:#111827; opacity:.8; }
    .link:hover { opacity:1; }

    /* ========= QUICK TILES (white lift + colored shadow) ========= */
    .tiles { display:grid; grid-template-columns: repeat(auto-fit,minmax(220px,1fr)); gap:12px; }
    .tiles--upgraded { display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 14px; }
    .tiles--upgraded .tile {
      --glow: rgba(79,70,229,.26); /* default indigo glow (fallback) */

      position: relative;
      display: grid;
      grid-template-rows: auto auto 1fr;
      align-items: start;
      gap: 10px;
      padding: 18px 16px;
      border-radius: 16px;
      border: 1px solid #eaecef;
      background-color: #ffffff; /* stays white */
      box-shadow: 0 1px 3px rgba(0,0,0,.05);
      text-decoration: none; color: inherit;
      overflow: hidden;
      transform: translateZ(0);
      transition: transform .24s ease, box-shadow .24s ease, border-color .24s ease, background-color .24s ease;
    }
    .tiles--upgraded .tile:hover {
      transform: translateY(-6px);
      border-color: #e1e5ea;
      box-shadow:
        0 6px 16px rgba(0,0,0,.10),
        0 14px 36px var(--glow);
      background-color: #ffffff;
    }

    /* Per-accent colored shadow */
    .tiles--upgraded .tile[data-accent="indigo"] { --glow: rgba(79,70,229,.28); }   /* indigo-600 */
    .tiles--upgraded .tile[data-accent="rose"]   { --glow: rgba(244,63,94,.28); }   /* rose-500 */
    .tiles--upgraded .tile[data-accent="emerald"]{ --glow: rgba(16,185,129,.28); }  /* emerald-500 */

    /* icon motion */
    .tile-ico-wrap {
      position: relative;
      width: clamp(56px, 8vw, 72px);
      height: clamp(56px, 8vw, 72px);
      border-radius: 9999px;
      display: grid; place-items: center;
      background: #fff;
      border: 1px solid rgba(0,0,0,0.06);
      box-shadow: inset 0 1px 0 rgba(255,255,255,.6), 0 6px 18px rgba(0,0,0,.06);
      transition: transform .22s ease, box-shadow .22s ease;
    }
    .tiles--upgraded .tile:hover .tile-ico-wrap {
      transform: translateY(-2px);
      box-shadow: inset 0 1px 0 rgba(255,255,255,.7), 0 10px 24px rgba(0,0,0,.10);
    }

    .tile-ico { font-size: clamp(2.2rem, 6vw, 3rem); line-height: 1; filter: drop-shadow(0 2px 6px rgba(0,0,0,.12)); }
    .tile-title { font-weight: 800; letter-spacing: .2px; margin-top: 4px; font-size: clamp(1.05rem, 2.2vw, 1.2rem); }
    .tiles--upgraded p { margin: 2px 0 0; color: #515c67; font-size: .98rem; line-height: 1.45; }

    /* NEIGHBOURHOODS GRID */
    .grid { display:grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 12px; }
    .card { display:flex; flex-direction:column; background:#fff; border:1px solid #eee; border-radius:12px; overflow:hidden; text-decoration:none; color:inherit; box-shadow: 0 1px 3px rgba(0,0,0,0.05); transform: translateY(0); transition: transform .25s ease, box-shadow .25s ease; }
    .card:hover { transform: translateY(-6px); box-shadow: 0 6px 16px rgba(0,0,0,0.12); }
    .thumb { position:relative; aspect-ratio: 16/9; background:#f6f6f6; display:grid; place-items:center; overflow:hidden; }
    .thumb img { width:100%; height:100%; object-fit:cover; display:block; }
    .thumb-grad { position:absolute; inset:auto 0 0 0; height:56%; background: linear-gradient(to top, rgba(0,0,0,.55), rgba(0,0,0,0)); }
    .thumb-chip { position:absolute; left:10px; bottom:10px; color:#fff; font-weight:800; letter-spacing:.2px; text-shadow: 0 2px 8px rgba(0,0,0,.45); font-size: clamp(1rem, 2vw, 1.15rem); }
    .ph { font-size:12px; color:#999; }
    .body { padding: 12px; }
    .body p { margin:.4rem 0 0; color:#555; font-size:.95rem; line-height:1.35; display:-webkit-box; -webkit-line-clamp:3; -webkit-box-orient:vertical; overflow:hidden; }

    /* WEATHER */
    .two-col { display:grid; grid-template-columns: 1fr 1fr; gap: 12px; }
    @media (max-width: 900px) { .two-col { grid-template-columns: 1fr; } }
    .wx-card { border: 1px solid #eee; border-radius: 12px; padding: 16px; background: #fff; box-shadow: 0 1px 3px rgba(0,0,0,0.05); }
    .wx-header { font-weight: 700; margin-bottom: 8px; }
    .wx-row { display:grid; grid-template-columns: repeat(3,1fr); gap:12px; margin-bottom:10px; }
    .wx-metric { background:#f9fafb; border:1px solid #f1f1f1; border-radius:10px; padding:12px; text-align:center; }
    .wx-label { font-size:.8rem; color:#666; }
    .wx-value { font-size:1.25rem; font-weight:700; margin-top:4px; }
    .wx-now { display:flex; align-items:baseline; gap:16px; margin-bottom:12px; }
    .wx-now-temp { font-size:2rem; font-weight:800; }
    .wx-now-temp .unit { font-size:1rem; opacity:.8; margin-left:2px; }
    .wx-now-meta { color:#555; }
    .wx-daily { display:grid; grid-template-columns: repeat(auto-fit, minmax(160px,1fr)); gap:10px; margin-top:8px; }
    .wx-day { border:1px solid #f1f1f1; border-radius:10px; padding:10px; background:#fafafa; }
    .wx-day-label { font-weight:700; margin-bottom:4px; }
    .wx-note { display:block; margin-top:8px; color:#777; font-size:.75rem; }

    .muted { color:#6b7280; }
    .error { color:#b91c1c; }

    /* =========================================
       ‚ú® INLINE TEXT LINK ‚ÄúPILL/TAB‚Äù STYLE (updated)
       Default looks like previous hover; hover just darkens slightly.
       Applies to links in CMS prose blocks.
       ========================================= */
    :global(.summary-card .prose a:not(.btn)),
    :global(.feature-copy .prose a:not(.btn)) {
      display: inline-block;
      padding: 0px 10px;
      font-size: 1.0rem;
      font-weight: 500;
      color: #1e1b4b;                 /* indigo-950-ish text */
      background-color: #ececec;      /* indigo-200 base */
      border-radius: 5px;          /* pill */
      text-decoration: none;
      box-shadow: 0 0 0 rgba(79,70,229,0.18);
      transition:
        background-color .25s ease,
        color .25s ease,
        box-shadow .25s ease,
        transform .15s ease;
    }
    :global(.summary-card .prose a:not(.btn):hover),
    :global(.feature-copy .prose a:not(.btn):hover) {
      background-color: #d8d8d8;      /* a touch darker */
      box-shadow: 0 4px 12px rgba(255, 255, 255, 0.28);
      transform: translateY(0px);
      text-decoration: none;
    }
    :global(.summary-card .prose a.active:not(.btn)),
    :global(.feature-copy .prose a.active:not(.btn)) {
      background-color: #111827;      /* dark tab look when you add .active */
      color: #fff;
      font-weight: 700;
      box-shadow: 0 4px 12px rgba(17,24,39,0.25);
    }
    :global(.summary-card .prose a:not(.btn):focus-visible),
    :global(.feature-copy .prose a:not(.btn):focus-visible) {
      outline: 3px solid rgba(79,70,229,0.45);
      outline-offset: 2px;
      text-decoration: none;
    }
  </style>
</Site>
