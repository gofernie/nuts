---
// File: src/pages/xtraarea/index.astro
import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

const url       = import.meta.env.PUBLIC_XTRAAREA_JSON;
const PATH_BASE = "/xtraarea";

type Row = {
  slug?: string;
  title?: string;
  summary?: string;
  long_copy?: string;
  hero_img?: string;
  status?: string;
  seo_title?: string;
  seo_description?: string;
  cta1?: string;
  cta2?: string;
  cta3?: string;
};

let items: Row[] = [];
let header: Row | null = null;
let error: string | null = null;

/* ---------- helpers ---------- */
const get = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const slugify = (v:string) =>
  (v ?? "").toLowerCase().trim()
    .replace(/&/g,"-and-")
    .replace(/[^a-z0-9]+/g,"-")
    .replace(/^-+|-+$/g,"");

const normalize = (r:any): Row => {
  const title = get(r,"title");
  const computedSlug = slugify(title || "");
  return {
    slug: get(r,"slug") || computedSlug,
    title,
    summary: get(r,"summary"),
    long_copy: get(r,"long_copy"),
    hero_img: get(r,"hero_img"),
    status: get(r,"status"),
    seo_title: get(r,"seo_title"),
    seo_description: get(r,"seo_description"),
    cta1: get(r,"cta1"),
    cta2: get(r,"cta2"),
    cta3: get(r,"cta3"),
  };
};

try {
  if (!url) throw new Error("Missing PUBLIC_XTRAAREA_JSON in .env (restart dev).");
  const raw = await getJson<any>(url);

  const rows: any[] =
    Array.isArray(raw) ? raw :
    Array.isArray(raw?.data) ? raw.data :
    Array.isArray(raw?.rows) ? raw.rows :
    [];

  const normalized = rows.map(normalize);

  header =
    normalized.find(r => (r.slug ?? "").toLowerCase().trim() === "index") ??
    normalized.find(r => (r.title ?? "").toLowerCase().trim() === "index") ??
    normalized.find(r => (r.status ?? "").toLowerCase().trim() === "index") ??
    normalized.find(r => {
      const t = (r.title ?? "").toLowerCase().trim();
      return t === "xtraarea" || t === "xtra area" || t === "other areas";
    }) ??
    normalized.find(r => !!(r.long_copy || r.summary || r.seo_description)) ??
    null;

  items = normalized.filter((r) =>
    r.slug && r.title &&
    (r.slug ?? "").toLowerCase().trim()   !== "index" &&
    (r.title ?? "").toLowerCase().trim()  !== "index" &&
    (r.status ?? "").toLowerCase().trim() !== "index" &&
    !/^draft$/i.test(r.status ?? "") &&
    !/^hidden$/i.test(r.status ?? "") &&
    !/^inactive$/i.test(r.status ?? "")
  );

} catch (e:any) {
  error = e?.message || String(e);
}

// Resolve images
const resolveImg = (v?: string) => {
  const s = (v || "").trim();
  if (!s) return "";
  if (/^(https?:)?\/\//i.test(s)) return s;
  if (s.startsWith("/")) return s;
  return heroPath(s);
};

const heroSrc      = resolveImg(header?.hero_img);
const heroH1       = header?.title || "Other Areas";
const introText    = (header?.long_copy || header?.summary || header?.seo_description || "").trim();
const pageSeoTitle = header?.seo_title || heroH1;
const pageSeoDesc  = (header?.seo_description || "").trim();
---

<Site showHeader={true} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  {heroSrc && (
    <Fragment slot="head">
      <link rel="preload" as="image" href={heroSrc} fetchpriority="high" />
    </Fragment>
  )}

  <!-- HERO -->
  <section class="hero-bleed">
    {heroSrc && (
      <img
        src={heroSrc}
        alt=""
        fetchpriority="high"
        loading="eager"
        decoding="async"
        width="2000"
        height="1000"
      />
    )}
    <div class="hero-scrim" aria-hidden="true"></div>
    <div class="hero-overlay">
      <div class="container">
        <h1 class="hero-title">{heroH1}</h1>
      </div>
    </div>
  </section>

  <div class="container">
    {introText && <article class="summary" set:html={introText}></article>}

    {error ? (
      <p class="error">Error: {error}</p>
    ) : items.length === 0 ? (
      <p>No areas yet. Check your <code>PUBLIC_XTRAAREA_JSON</code> URL or add rows to your sheet.</p>
    ) : (
      <section class="grid">
        {items.map((n) => {
          const primary = resolveImg(n.hero_img);
          const altBase = primary.includes("/images/")
            ? primary.replace("/images/", "/img/")
            : primary.replace("/img/", "/images/");
          const filename = (primary.split("/").pop() || "").trim();
          const finalFallback = filename ? `/img/hero/${filename}` : "";

          return (
            <a class="card" href={`${PATH_BASE}/${n.slug}`}>
              <div class="thumb">
                {primary ? (
                  <img
                    src={primary}
                    alt={n.title}
                    loading="lazy"
                    decoding="async"
                    onerror={`if (this.dataset.step!=='1'){ this.dataset.step='1'; this.src='${altBase}'; }
                              else if (this.dataset.step!=='2' && '${finalFallback}'){ this.dataset.step='2'; this.src='${finalFallback}'; }
                              else { const ph = document.createElement('div'); ph.className = 'ph'; ph.setAttribute('aria-hidden','true'); ph.textContent = 'No image'; this.replaceWith(ph); }`}
                  />
                ) : (
                  <div class="ph" aria-hidden="true">No image</div>
                )}
                <div class="overlay"><div class="title">{n.title}</div></div>
              </div>
              <div class="body">
                {n.summary
                  ? <p>{(n.summary).split(/\s+/).slice(0,18).join(" ") + ((n.summary).split(/\s+/).length>18 ? "…" : "")}</p>
                  : <p>{n.title}</p>}
              </div>
            </a>
          );
        })}
      </section>
    )}
  </div>

  <style>
    .container { max-width: var(--container-max); margin-inline: auto; padding-inline: var(--container-pad); }

    /* ---------- HERO ---------- */
    .hero-bleed {
      position: relative;
      isolation: isolate;
      left: 50%; right: 50%;
      margin-left: -50vw; margin-right: -50vw;
      width: 100vw; max-width: 100vw;
      height: clamp(320px, 46vw, 560px);
      overflow: hidden; background: #e5e7eb;
      margin-bottom: clamp(16px, 2.5vw, 24px);
    }
    .hero-bleed img { width: 100%; height: 100%; display: block; object-fit: cover; object-position: center; }
    .hero-scrim { position: absolute; inset: 0; background: linear-gradient(to top, rgba(0,0,0,.55), rgba(0,0,0,0) 55%); z-index: 10; }

    /* ✅ Lock H1 left from first paint (no center flash) */
    .hero-overlay {
      position: absolute;
      inset: 0;
      pointer-events: none;
      z-index: 20;
      display: flex;
      align-items: flex-end;
      justify-content: flex-start;              /* force left */
      padding-bottom: clamp(16px, 3vw, 28px);
      text-align: left;                         /* backup */
    }
    .hero-overlay .container {
      display: flex;                            /* ensure flex context is present immediately */
      justify-content: flex-start !important;   /* harden against late-loading styles */
      align-items: flex-end;
      width: 100%;
      padding-inline: var(--container-pad);
      margin-inline: auto;
      max-width: var(--container-max);
    }
    .hero-title {
      margin: 0;
      text-align: left !important;
      max-width: 100%;
      font-size: clamp(2.25rem, 5vw, 3.25rem);
      line-height: 1.1;
      font-weight: 800;
      color: #fff;
      text-shadow: 0 2px 8px rgba(0,0,0,.45);
      flex: 0 1 auto;                           /* avoid flex auto-centering */
    }

    /* Intro summary */
    .summary {
      margin: 18px 0 26px;
      font-size: 1.06rem;
      line-height: 1.8;
      color: #1f2937;
      max-width: none;
    }

    /* Grid */
    .grid {
      display: grid;
      grid-template-columns: repeat(4, minmax(0, 1fr));
      gap: 20px;
      margin-bottom: clamp(36px, 5vw, 60px);
    }
    @media (max-width: 1200px) { .grid { grid-template-columns: repeat(3, minmax(0,1fr)); } }
    @media (max-width: 900px)  { .grid { grid-template-columns: repeat(2, minmax(0,1fr)); } }
    @media (max-width: 640px)  { .grid { grid-template-columns: 1fr; } }

    .card {
      display: flex; flex-direction: column;
      background: #fff;
      border-radius: 14px; overflow: hidden;
      border: 1px solid #eee; text-decoration: none; color: inherit;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
      transform: translateY(0);
      transition: transform .25s ease, box-shadow .25s ease;
    }
    .card:hover { transform: translateY(-6px); box-shadow: 0 6px 16px rgba(0,0,0,0.12); }

    /* 16:9 thumbs */
    .thumb { position: relative; background: #f6f6f6; overflow: hidden; }
    .thumb::before { content: ""; display: block; padding-top: 56.25%; }
    .thumb > * { position: absolute; inset: 0; }
    .thumb img { width: 100%; height: 100%; object-fit: cover; display: block; transition: transform .35s ease; }
    .card:hover .thumb img { transform: scale(1.03); }

    .overlay { position: absolute; inset: 0; display: flex; align-items: flex-end; pointer-events: none; background: linear-gradient(to top, rgba(0,0,0,.35), rgba(0,0,0,0) 55%); }
    .overlay .title { color: #fff; font-weight: 800; letter-spacing: .2px; font-size: clamp(1rem, 1.6vw, 1.3rem); padding: 12px 14px; text-shadow: 0 1px 2px rgba(0,0,0,0.45); }

    .body { padding: 10px 12px 14px; }
    .body p { margin: 0; color: #4b5563; font-size: .96rem; line-height: 1.35; }

    .ph { position: absolute; inset: 0; display: grid; place-items: center; font-size: 12px; color: #999; background: #f6f6f6; }

    .error { color: #b00; }
  </style>
</Site>
