---
// File: src/pages/xtraarea/[slug].astro
export const prerender = false;

import Site from "../../layouts/Site.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* --------- params & source --------- */
const slugParam = (Astro.params.slug || "").toString().trim();

const SOURCE_URL =
  import.meta.env.PUBLIC_XTRAAREA_JSON ||
  import.meta.env.PUBLIC_SHEET_JSON ||
  "";

/* --------- helpers --------- */
const get = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const slugify = (s:string)=> s.toLowerCase()
  .replace(/&/g,"-and-")
  .replace(/[^a-z0-9]+/g,"-")
  .replace(/^-+|-+$/g,"");

/* --------- fetch row now (server) --------- */
let row:any = null;
let fetchError:string|null = null;

if (!SOURCE_URL) {
  fetchError = "Missing PUBLIC_XTRAAREA_JSON / PUBLIC_SHEET_JSON in .env";
} else {
  try {
    const raw = await getJson<any>(SOURCE_URL);
    const rows:any[] =
      Array.isArray(raw) ? raw :
      Array.isArray(raw?.data) ? raw.data :
      Array.isArray(raw?.rows) ? raw.rows : [];

    row = rows.find(r=>{
      const s = get(r,"slug") || (get(r,"title") ? slugify(get(r,"title")) : "");
      return s === slugParam;
    }) || null;

    if (!row) fetchError = `No matching row for slug "${slugParam}".`;
  } catch(e:any){
    fetchError = `Failed to load sheet: ${e?.message || e}`;
  }
}

/* --------- derived props (safe fallbacks) --------- */
const title   = (row && get(row,"title")) || "Extra Area";
const summary = (row && (get(row,"summary") || get(row,"seo_description"))) || "";
const heroImg = (row && get(row,"hero_img")) || "/img/hero/fallback-1600x800.jpg";
const hero    = heroPath(heroImg);

const pageSeoTitle = (row && get(row,"seo_title")) || title;
const pageSeoDesc  = (row && get(row,"seo_description")) || summary;

/* --------- CTA handling (ID or HTML) --------- */
const rawCta = (row && (get(row,"cta1") || get(row,"rv_block"))) ||
               import.meta.env.PUBLIC_DEFAULT_RV_BLOCK || "";
const isRvId = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i.test(rawCta);
const isHtml = !!rawCta && !isRvId;

/* --------- RealtyVis script URL --------- */
const RV_SCRIPT = import.meta.env.PUBLIC_RV_SCRIPT || "https://cdn.realtyvis.com/js/embed.js";
---

<Site showHeader={true} title={title} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  <!-- Preload LCP image -->
  <Fragment slot="head">
    <link rel="preload" as="image" href={hero} fetchpriority="high" />
  </Fragment>

  <!-- HERO (full bleed, bottom-left H1, no bg box) -->
  <section class="hero-bleed">
    <img
      src={hero}
      alt={title}
      fetchpriority="high"
      loading="eager"
      decoding="async"
      width="2000" height="1000"
    />
    <div class="hero-scrim" aria-hidden="true"></div>
    <div class="hero-overlay">
      <div class="hero-container">
        <h1 class="hero-title">{title}</h1>
      </div>
    </div>
  </section>

  <!-- Body -->
  <main class="container body">
    {summary && (
      <section class="intro">
        <article class="summary" set:html={summary}></article>
      </section>
    )}

    {fetchError && (
      <section class="error"><p>{fetchError}</p></section>
    )}

    {!fetchError && rawCta && (
      <section id="listings" class="rv-wrap">
        <h2 class="h2">Current Listings</h2>

        {isRvId ? (
          <>
            <div data-rv-block={rawCta}></div>
            <script is:inline>
              (function(){
                function scan(){ try{ window.RealtyVis?.scan?.(); }catch(e){} }
                if (!window.__rvScriptLoading && !window.__rvScriptLoaded) {
                  window.__rvScriptLoading = true;
                  var s = document.createElement('script');
                  s.src = "{RV_SCRIPT}";
                  s.async = true; s.defer = true;
                  s.onload = function(){ window.__rvScriptLoaded = true; scan(); };
                  s.onerror = function(e){ console.error("RealtyVis script failed", e); };
                  document.head.appendChild(s);
                } else if (window.__rvScriptLoaded) {
                  scan();
                } else {
                  setTimeout(scan, 250);
                }
              })();
            </script>
          </>
        ) : (
          <div class="rv-html" set:html={rawCta}></div>
        )}
      </section>
    )}

    {!fetchError && !rawCta && (
      <section class="note">
        <p><strong>Heads-up:</strong> No <code>cta1</code>/<code>rv_block</code> set, and no <code>PUBLIC_DEFAULT_RV_BLOCK</code>.</p>
      </section>
    )}
  </main>

  <style>
    :root { --container-max: 1200px; --container-pad: 1rem; }
    .container { max-width: var(--container-max); margin-inline: auto; padding-inline: var(--container-pad); }

    /* ---------- HERO ---------- */
    .hero-bleed{
      position:relative;
      left:50%; right:50%;
      margin-left:-50vw; margin-right:-50vw;
      width:100vw; max-width:100vw;
      height: clamp(300px, 38vw, 520px);
      overflow:hidden; background:#e5e7eb;
      line-height:0; font-size:0;
    }
    .hero-bleed img{
      display:block;
      width:100%;
      height:calc(100% + 1px); /* avoid hairline seam */
      object-fit:cover; object-position:center;
    }
    .hero-scrim{
      position:absolute; inset:0;
      background:linear-gradient(to top, rgba(0,0,0,.55), rgba(0,0,0,0) 55%);
      z-index:5;
    }
    .hero-overlay{
      position:absolute; inset:0; z-index:10;
      display:flex; align-items:flex-end; justify-content:flex-start;
      padding-bottom:clamp(16px,3vw,28px);
      pointer-events:none;
    }
    .hero-container{ width:100%; max-width:var(--container-max); margin-inline:auto; padding-inline:var(--container-pad); }
    .hero-title{
      margin:0; color:#fff; font-weight:800; line-height:1.1;
      font-size:clamp(2rem,4.5vw,3rem);
      text-shadow:0 2px 8px rgba(0,0,0,.45);
      background:none; padding:0; display:inline-block;
    }

    /* ---------- Body ---------- */
    .body{ padding-block: 20px; }
    .intro{ margin: 0 0 22px; }

    .summary{
      width:100%;
      max-width:none !important;
      font-size:1rem; line-height:1.65; color:#1f2937;
    }
    .summary :where(p, ul, ol, blockquote, figure){
      width:100%; max-width:none !important; margin-left:0; margin-right:0;
    }

    .h2{ font-size: clamp(20px,2.6vw,28px); margin: 0 0 10px; }

    .note{ color:#666; background:#fafafa; border:1px solid #eee; padding:12px 14px; border-radius:8px; }
    .error{ border:1px solid #d33; background:#fff5f5; color:#600; padding:12px 14px; border-radius:8px; }

    .rv-html :where(iframe, div){ width:100% !important; }
  </style>
</Site>
