---
// File: src/pages/xtraarea/_slug_.astro
export const prerender = true;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import RVEmbed from "../../components/RVEmbed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* ---------- helpers (MUST be above getStaticPaths) ---------- */
const field = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "")
    ?.toString?.()
    ?.trim?.() || "";

const slugify = (s:string)=> (s ?? "")
  .toLowerCase().trim()
  .replace(/&/g,"-and-")
  .replace(/[^a-z0-9]+/g,"-")
  .replace(/^-+|-+$/g,"");

/* ---------- static paths: fetch once, pass row via props ---------- */
export async function getStaticPaths() {
  const SOURCE_URL =
    import.meta.env.PUBLIC_XTRAAREA_JSON ||
    import.meta.env.PUBLIC_SHEET_JSON ||
    "";

  if (!SOURCE_URL) return [];

  let rows:any[] = [];
  try {
    const raw = await getJson<any>(SOURCE_URL);
    rows = Array.isArray(raw)
      ? raw : Array.isArray(raw?.data)
      ? raw.data : Array.isArray(raw?.rows)
      ? raw.rows : [];
  } catch {
    return [];
  }

  const items = rows.map((r:any) => {
    const status  = field(r,"status").toLowerCase();
    const rawSlug = field(r,"slug").toLowerCase();
    const hidden  = status === "hidden" || status === "inactive" || rawSlug === "index";
    if (hidden) return null;

    const title = field(r,"title");
    const slug  = (rawSlug || slugify(title)).toLowerCase();
    return slug ? { params: { slug }, props: { row: r } } : null;
  }).filter(Boolean) as any[];

  return items;
}

/* ---------- page data (from props; no refetch/throw) ---------- */
type Row = Record<string, any>;
const { row: rowIn } = Astro.props as { row?: Row };
const row = rowIn ?? ({} as Row);

/* ---------- derived props ---------- */
const title   = field(row,"title") || "Extra Area";
const summary = field(row,"summary") || field(row,"seo_description") || "";
const heroImg = field(row,"hero_img") || "/img/hero/fallback-1600x800.jpg";
const hero    = heroPath(heroImg);

const pageSeoTitle = field(row,"seo_title") || title;
const pageSeoDesc  = field(row,"seo_description") || summary;

/* ---------- RealtyVis embed (ID or pasted container) ---------- */
const rawCta =
  (field(row,"cta1") || field(row,"rv_block")) ||
  (import.meta.env.PUBLIC_DEFAULT_RV_BLOCK || "");

const ID_RE = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i;
function stripScripts(html:string) { return html.replace(/<script\b[^>]*>[\s\S]*?<\/script>/gi, ""); }
function extractRvId(html:string) {
  const clean = stripScripts(html);
  const m = clean.match(/data-rv-block=["']?([A-Z0-9]{8}-[A-Z0-9]{8})["']?/i);
  return m?.[1] || "";
}
const rvBlockId = ID_RE.test(rawCta) ? rawCta : extractRvId(rawCta);
const hasValidBlock = ID_RE.test(rvBlockId);
---

<Site showHeader={true} title={title} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  <HeroBleed
    src={hero}
    title={title}
    containerMax={1200}
    flush={false}
    containerPad={12}
  />

  {summary && (
    <div class="container summary-wrap">
      <div class="lead" set:html={summary}></div>
    </div>
  )}

  <main class="container body">
    {(rawCta) && (
      <section class="rv-wrap">
        <h2 class="h2">Current Listings</h2>

        {hasValidBlock ? (
          <div class="rv-host">
            <RVEmbed block={rvBlockId} minHeight="1000px" showSkeleton={false} />
          </div>
        ) : (
          <div class="rv-fallback">
            <p>Listings are unavailable right now.</p>
            <p><a href="/search">Browse all listings</a></p>
          </div>
        )}

        {/* Hover-to-warm connections for RealtyVis */}
        {hasValidBlock && (
          <script is:inline>
{`(function(){
  let warmed=false;
  function warm(){
    if(warmed) return; warmed=true;
    new Image().src="https://app.realtyvis.com/favicon.ico";
    new Image().src="https://cdn.realtyvis.com/favicon.ico";
    try{
      fetch("https://app.realtyvis.com/css/site.min.css",{mode:"no-cors"}).catch(()=>{});
      fetch("https://app.realtyvis.com/js/site.min.js",{mode:"no-cors"}).catch(()=>{});
    }catch(e){}
  }
  const host=document.querySelector(".rv-host")||document.querySelector(".rv-wrap");
  if(!host) return;
  ["pointerover","touchstart","focusin"].forEach(ev=>{
    host.addEventListener(ev,warm,{once:true,passive:true});
  });
})();`}
          </script>
        )}
      </section>
    )}

    {!rawCta && (
      <section class="note">
        <p><strong>Heads-up:</strong> No <code>cta1</code>/<code>rv_block</code> set, and no <code>PUBLIC_DEFAULT_RV_BLOCK</code>.</p>
      </section>
    )}
  </main>

  <style>
    :root { --container-max: 1200px; --container-pad: 12px; }
    .container { max-width: var(--container-max); margin-inline: auto; padding-inline: var(--container-pad); }

    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }

    .body{ padding-block: 20px; }
    .h2{ font-size: clamp(20px,2.6vw,28px); margin: 0 0 10px; }

    .note{ color:#666; background:#fafafa; border:1px solid #eee; padding:12px 14px; border-radius:8px; }
    .rv-fallback{
      margin-top: 12px; padding:12px 16px; background:#fff3cd;
      border:1px solid #ffe69c; border-radius:10px; color:#5c3c00;
    }

    /* Kill shimmer/skeletons coming from RV */
    .rv-host [class*="skeleton"],
    .rv-host [class*="Skeleton"],
    .rv-host [class*="loading"],
    .rv-host [data-skeleton],
    .rv-host .rv-skeleton,
    .rv-host .loading-skeleton,
    .rv-host .rv-loading {
      animation: none !important;
      background: none !important;
      background-image: none !important;
      box-shadow: none !important;
      opacity: 0 !important;
      pointer-events: none !important;
    }
    .rv-host * { animation-duration: 0s !important; transition: none !important; }

    /* RVEmbed safety */
    .rv-html :where(iframe, div){ width:100% !important; }
  </style>
</Site>
