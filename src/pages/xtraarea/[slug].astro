---
// File: src/pages/xtraarea/[slug].astro
export const prerender = false;

import Site from "../../layouts/Site.astro";
import HeroBleed from "../../components/HeroBleed.astro";
import RVEmbed from "../../components/RVEmbed.astro";
import { getJson } from "../../lib/fetchJson";
import { heroPath } from "../../lib/paths";

/* ---------- params & source ---------- */
const slugParam = (Astro.params.slug || "").toString().trim().toLowerCase();
const SOURCE_URL =
  import.meta.env.PUBLIC_XTRAAREA_JSON ||
  import.meta.env.PUBLIC_SHEET_JSON ||
  "";

/* ---------- helpers ---------- */
const get = (r:any,k:string)=>
  (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

const slugify = (s:string)=> (s ?? "")
  .toLowerCase().trim()
  .replace(/&/g,"-and-")
  .replace(/[^a-z0-9]+/g,"-")
  .replace(/^-+|-+$/g,"");

/* ---------- fetch row ---------- */
let row:any = null;
let fetchError:string|null = null;

if (!SOURCE_URL) {
  fetchError = "Missing PUBLIC_XTRAAREA_JSON / PUBLIC_SHEET_JSON in .env";
} else {
  try {
    const raw = await getJson<any>(SOURCE_URL);
    const rows:any[] = Array.isArray(raw)
      ? raw : Array.isArray(raw?.data)
      ? raw.data : Array.isArray(raw?.rows)
      ? raw.rows : [];

    row = rows.find(r=>{
      const s = get(r,"slug") || (get(r,"title") ? slugify(get(r,"title")) : "");
      return s.toLowerCase() === slugParam;
    }) || null;

    if (!row) fetchError = `No matching row for slug "${slugParam}".`;
  } catch(e:any){
    fetchError = `Failed to load sheet: ${e?.message || e}`;
  }
}

/* ---------- derived props ---------- */
const title   = (row && get(row,"title")) || "Extra Area";
const summary = (row && (get(row,"summary") || get(row,"seo_description"))) || "";
const heroImg = (row && get(row,"hero_img")) || "/img/hero/fallback-1600x800.jpg";
const hero    = heroPath(heroImg);

const pageSeoTitle = (row && get(row,"seo_title")) || title;
const pageSeoDesc  = (row && get(row,"seo_description")) || summary;

/* ---------- RealtyVis embed (ID or pasted container) ---------- */
const rawCta =
  (row && (get(row,"cta1") || get(row,"rv_block"))) ||
  (import.meta.env.PUBLIC_DEFAULT_RV_BLOCK || "");

const ID_RE = /^[A-Z0-9]{8}-[A-Z0-9]{8}$/i;
function stripScripts(html:string) { return html.replace(/<script\b[^>]*>[\s\S]*?<\/script>/gi, ""); }
function extractRvId(html:string) {
  const clean = stripScripts(html);
  const m = clean.match(/data-rv-block=["']?([A-Z0-9]{8}-[A-Z0-9]{8})["']?/i);
  return m?.[1] || "";
}
const rvBlockId = ID_RE.test(rawCta) ? rawCta : extractRvId(rawCta);
const hasValidBlock = ID_RE.test(rvBlockId);
---

<Site showHeader={true} title={title} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  <HeroBleed
    src={hero}
    title={title}
    containerMax={1200}
    flush={false}
    containerPad={12}
  />

  {summary && (
    <div class="container summary-wrap">
      <div class="lead" set:html={summary}></div>
    </div>
  )}

  <main class="container body">
    {fetchError && (
      <section class="error"><p>{fetchError}</p></section>
    )}

    {!fetchError && rawCta && (
      <section class="rv-wrap">
        <h2 class="h2">Current Listings</h2>

        {hasValidBlock ? (
<RVEmbed block={rvBlockId} minHeight="1000px" showSkeleton={false} />


        ) : (
          <div class="rv-fallback">
            <p>Listings are unavailable right now.</p>
            <p><a href="/search">Browse all listings</a></p>
          </div>
        )}
      </section>
    )}

    {!fetchError && !rawCta && (
      <section class="note">
        <p><strong>Heads-up:</strong> No <code>cta1</code>/<code>rv_block</code> set, and no <code>PUBLIC_DEFAULT_RV_BLOCK</code>.</p>
      </section>
    )}
  </main>

  <style>
    :root { --container-max: 1200px; --container-pad: 12px; }
    .container { max-width: var(--container-max); margin-inline: auto; padding-inline: var(--container-pad); }

    .summary-wrap{ padding-top:16px; padding-bottom:8px; }
    .lead{ margin:0; font-size:1.075rem; line-height:1.6; color:#111827; }

    .body{ padding-block: 20px; }
    .h2{ font-size: clamp(20px,2.6vw,28px); margin: 0 0 10px; }

    .note{ color:#666; background:#fafafa; border:1px solid #eee; padding:12px 14px; border-radius:8px; }
    .error{ border:1px solid #d33; background:#fff5f5; color:#600; padding:12px 14px; border-radius:8px; }

    .rv-fallback{
      margin-top: 12px; padding:12px 16px; background:#fff3cd;
      border:1px solid #ffe69c; border-radius:10px; color:#5c3c00;
    }

    /* RVEmbed ships its own skeleton; no extra shimmer needed here. */
    .rv-html :where(iframe, div){ width:100% !important; }
  </style>
</Site>
