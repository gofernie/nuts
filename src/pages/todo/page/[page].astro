---
// src/pages/todo/page/[page].astro
import Site from "../../../layouts/Site.astro";
import { getJson } from "../../../lib/fetchJson";
import { heroPath } from "../../../lib/paths";

export async function getStaticPaths() {
  const url = import.meta.env.PUBLIC_TODO_JSON;
  if (!url) return [];

  let rows: any[] = [];
  try {
    const raw = await getJson<any>(url);
    rows = Array.isArray(raw) ? raw :
           Array.isArray(raw?.data) ? raw.data :
           Array.isArray(raw?.rows) ? raw.rows : [];
  } catch {
    return [];
  }

  const get = (r:any,k:string)=>
    (r?.[k] ?? r?.[k?.toLowerCase?.()] ?? r?.[k?.toUpperCase?.()] ?? "").toString().trim();

  const normalize = (r:any) => {
    const title = get(r,"title");
    const raw_slug = get(r,"slug");
    const computedSlug = (title||"").toLowerCase()
      .replace(/&/g,"-and-").replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"");
    return {
      raw_slug, title,
      summary: get(r,"summary"),
      hero_img: get(r,"hero_img"),
      status: get(r,"status"),
      category: get(r,"category"),
      seo_title: get(r,"seo_title"),
      seo_description: get(r,"seo_description"),
      slug: raw_slug || computedSlug,
    };
  };

  const normalized = rows.map(normalize);

  const header =
    normalized.find(r => (r.raw_slug ?? "").toLowerCase() === "index") ??
    normalized.find(r => (r.status ?? "").toLowerCase() === "header") ??
    normalized.find(r => !r.raw_slug) ?? null;

  const items = normalized.filter((r) => {
    if (!r.slug || !r.title) return false;
    if (header && r === header) return false;
    const s = (r.status ?? "").toLowerCase();
    return !["draft","hidden","inactive","header"].includes(s);
  });

  const realPerPage = 7;
  const totalPages = Math.max(1, Math.ceil(items.length / realPerPage));

  return Array.from({ length: totalPages }, (_, i) => ({
    params: { page: String(i + 1) },
    props: { totalPages, page: i + 1, items, header },
  }));
}

const { totalPages, page, items, header } = Astro.props;

const heroSrc = header?.hero_img ? heroPath(header.hero_img) : "";
const pageSeoTitle = header?.seo_title || header?.title || "Things To Do";
const pageSeoDesc  = header?.seo_description || header?.summary || "";

const realPerPage = 7;
const start = (page - 1) * realPerPage;
const end = start + realPerPage;
const pageSlice = items.slice(start, end);

const ctaCard = {
  __cta: true,
  slug: "plan-your-trip",
  title: "Plan Your Perfect Fernie Trip",
  category: "Get Started",
  summary: "Want a done-for-you plan? Tell us your dates, vibe, and budget. We’ll craft a custom Fernie day-by-day — trails, eats, hidden gems.",
  hero_img: "",
  status: "published",
};

function seededBetween(min:number, max:number, seed:number) {
  const x = Math.sin(seed * 9301 + 49297) * 233280;
  const r = x - Math.floor(x);
  return Math.floor(r * (max - min + 1)) + min;
}

let displayCards = [...pageSlice];
const minIndex = Math.min(2, Math.max(0, displayCards.length));
const maxIndex = displayCards.length;
const insertIndex = (displayCards.length >= 2)
  ? seededBetween(minIndex, maxIndex, page)
  : displayCards.length;
displayCards.splice(insertIndex, 0, ctaCard as any);

function buildPageList(total:number, current:number, radius:number = 2): (number|string)[] {
  const pages:number[] = [];
  const left = Math.max(1, current - radius);
  const right = Math.min(total, current + radius);
  for (let i = 1; i <= total; i++) {
    if (i === 1 || i === total || (i >= left && i <= right)) pages.push(i);
  }
  const list:(number|string)[] = [];
  let prev:number|undefined;
  for (const p of pages) {
    if (prev !== undefined) {
      if (p - prev === 2) list.push(prev + 1);
      else if (p - prev > 2) list.push("…");
    }
    list.push(p);
    prev = p;
  }
  return list;
}

const pageList = buildPageList(totalPages, page, 2);
const totalItems = items.length;
const realStart = (page - 1) * realPerPage + 1;
const realEnd = Math.min(page * realPerPage, totalItems);

// Absolute URL helper for canonical/prev/next (uses astro.config.mjs "site" if set)
const abs = (p:string) => (Astro.site ? new URL(p, Astro.site).href : p);
const canonicalUrl = abs(`/todo/page/${page}`);
const prevUrl = page > 1 ? abs(`/todo/page/${page - 1}`) : null;
const nextUrl = page < totalPages ? abs(`/todo/page/${page + 1}`) : null;
---

<Site showHeader={true} seo_title={pageSeoTitle} seo_description={pageSeoDesc}>
  <Fragment slot="head">
    {heroSrc && <link rel="preload" as="image" href={heroSrc} fetchpriority="high" />}
    <link rel="canonical" href={canonicalUrl} />
    {prevUrl && <link rel="prev" href={prevUrl} />}
    {nextUrl && <link rel="next" href={nextUrl} />}
  </Fragment>

  <section class="hero-bleed">
    {heroSrc && <img src={heroSrc} alt="" fetchpriority="high" loading="eager" decoding="async" width="2000" height="1000" />}
  </section>

  <div class="container intro">
    <h1>{header?.title || pageSeoTitle}</h1>
    {(header?.summary || pageSeoDesc) && <p>{header?.summary || pageSeoDesc}</p>}
  </div>

  <div class="container">
    <section class="grid-wrap">
      <div class="grid">
        {displayCards.map((n) => {
          const isCTA = (n as any).__cta === true;
          const short = (n.summary || "").replace(/\s+/g," ").trim();
          const preview = short ? (short.split(/\s+/).slice(0,12).join(" ") + (short.split(/\s+/).length>12 ? "…" : "")) : "";
          const href = isCTA ? "/contact" : `/todo/${n.slug}`;
          const primary = !isCTA && n.hero_img ? heroPath(n.hero_img) : "";

          return (
            <a class="card" href={href} aria-label={isCTA ? "Get help planning your Fernie trip" : n.title}>
              <div class="thumb">
                {isCTA ? <div class="ph" aria-hidden="true">✨</div> :
                  (primary ? <img src={primary} alt={n.title} loading="lazy" decoding="async" /> : <div class="ph">No image</div>)}
              </div>
              <div class="body">
                <strong>{n.title}</strong>
                {(n.category || isCTA) && <span class="tag">{isCTA ? "Get Started" : n.category}</span>}
                {preview && <p>{preview}</p>}
              </div>
            </a>
          );
        })}
      </div>

      <nav class="pager" aria-label="Pagination">
        <div class="pager-meta" role="status">
          Showing {Math.min(realStart, totalItems)}–{Math.max(realStart <= totalItems ? realEnd : 0, 0)} of {totalItems} activities
        </div>
        <ul class="pager-list" role="list">
          {page > 1
            ? <li><a href={`/todo/page/${page-1}`} class="page" rel="prev"><span class="chev">‹</span><span class="label">Prev</span></a></li>
            : <li><span class="page is-disabled"><span class="chev">‹</span><span class="label">Prev</span></span></li>}

          {pageList.map((p) =>
            typeof p === "string" ? <li><span class="gap">…</span></li> :
            p === page ? <li><span class="page is-active" aria-current="page">{p}</span></li> :
            <li><a href={`/todo/page/${p}`} class="page" aria-label={`Page ${p}`}>{p}</a></li>
          )}

          {page < totalPages
            ? <li><a href={`/todo/page/${page+1}`} class="page" rel="next"><span class="label">Next</span><span class="chev">›</span></a></li>
            : <li><span class="page is-disabled"><span class="label">Next</span><span class="chev">›</span></span></li>}
        </ul>
      </nav>
    </section>
  </div>

  <style>
    .container { max-width: 1200px; margin-left: auto; margin-right: auto; padding: 0 1rem; }
    .intro { margin-top: 24px; margin-bottom: 20px; text-align: left; }
    .intro h1 { font-size: 2.25rem; font-weight: 700; margin: 0 0 8px 0; color: #111827; }
    .intro p { font-size: 1rem; line-height: 1.6; margin: 0; color: #1f2937; }

    .grid-wrap { margin-top: 24px; }
    .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 16px; }

    .card { display:flex; flex-direction:column; background:#fff; border-radius:12px; overflow:hidden;
      border:1px solid #eee; text-decoration:none; color:inherit; box-shadow:0 1px 3px rgba(0,0,0,0.05); }
    .thumb { aspect-ratio:16/9; background:#f6f6f6; display:grid; place-items:center; }
    .thumb img { width:100%; height:100%; object-fit:cover; display:block; }
    .ph { font-size:12px; color:#999; }
    .body { padding:12px; position:relative; }
    .body strong { display:block; }
    .body p { margin:.4rem 0 0 0; color:#555; font-size:.95rem; line-height:1.35; }
    .tag { display:inline-block; margin:.25rem 0 0; font-size:.78rem; color:#374151; border:1px solid #e5e7eb; border-radius:999px; padding:.05rem .5rem; background:#fff; }

    .hero-bleed { position:relative; left:50%; right:50%; margin-left:-50vw; margin-right:-50vw; width:100vw; max-width:100vw; height:clamp(300px, 38vw, 520px); overflow:hidden; background:#e5e7eb; display:block; }
    .hero-bleed img { width:100%; height:100%; display:block; object-fit:cover; object-position:center; }

    /* Modern Pager */
    .pager { display:grid; gap:.75rem; justify-items:center; margin:28px 0 48px;
      --brand:#0971ce; --muted:#6b7280; --line:#e5e7eb; --bg:#fff; --bg-hover:#f9fafb;
    }
    .pager-meta { font-size:.92rem; color:var(--muted); }
    .pager-list { display:flex; flex-wrap:wrap; gap:.5rem; list-style:none; padding:0; margin:0; }
    .page, .gap {
      display:inline-flex; align-items:center; justify-content:center;
      min-width:42px; height:42px; padding:0 .9rem;
      border-radius:999px; border:1px solid var(--line);
      background:var(--bg); color:#111; text-decoration:none;
      box-shadow:0 1px 2px rgba(0,0,0,.04);
      transition:background .2s,transform .2s,box-shadow .2s,color .2s;
    }
    .page:hover { background:var(--bg-hover); transform:translateY(-1px); box-shadow:0 4px 12px rgba(0,0,0,.06); }
    .page:focus-visible { outline:3px solid rgba(9,113,206,.25); outline-offset:2px; }
    .page.is-active { background:var(--brand); color:#fff; border-color:var(--brand); box-shadow:0 6px 14px rgba(9,113,206,.28); cursor:default; }
    .page.is-disabled { background:#f3f4f6; color:#9ca3af; cursor:not-allowed; }
    .gap { background:transparent; border:none; box-shadow:none; color:#9ca3af; }
  </style>
</Site>
